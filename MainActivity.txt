package com.simplr.app.androidpilot;

import static com.simplr.app.androidpilot.utility.CalendarUtils.daysInMonthArray;
import static com.simplr.app.androidpilot.utility.CalendarUtils.monthYearFromDate;
import static com.simplr.app.androidpilot.utility.CalendarUtils.selectedDate;
import static java.lang.Integer.parseInt;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlarmManager;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.ActivityNotFoundException;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.PorterDuff;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.pdf.PdfDocument;
import android.graphics.pdf.PdfRenderer;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationManager;
import android.media.AudioManager;

import androidx.appcompat.app.AppCompatDelegate;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.exifinterface.media.ExifInterface;

import android.media.ToneGenerator;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.BatteryManager;
import android.os.Build;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.os.ParcelFileDescriptor;
import android.print.PrintAttributes;
import android.print.pdf.PrintedPdfDocument;
import android.provider.DocumentsContract;
import android.provider.MediaStore;
import android.provider.OpenableColumns;
import android.provider.Settings;
import android.text.Editable;
import android.text.Html;
import android.text.InputType;
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextWatcher;
import android.util.Base64;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.ExpandableListView;
import android.widget.GridView;
import android.widget.HorizontalScrollView;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.PopupMenu;
import android.widget.PopupWindow;
import android.widget.ProgressBar;
import android.widget.RadioGroup;
import android.widget.RatingBar;
import android.widget.SeekBar;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.view.ContextThemeWrapper;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import androidx.core.widget.NestedScrollView;
import androidx.fragment.app.FragmentContainerView;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewpager.widget.ViewPager;

import com.dantsu.escposprinter.EscPosCharsetEncoding;
import com.dantsu.escposprinter.EscPosPrinter;
import com.dantsu.escposprinter.EscPosPrinterCommands;
import com.dantsu.escposprinter.connection.bluetooth.BluetoothPrintersConnections;
import com.dascom.print.ESCPOS;
import com.dascom.print.ZPL;
import com.dascom.print.connection.BluetoothConnection;
import com.dascom.print.utils.BluetoothUtils;
import com.ferfalk.simplesearchview.BuildConfig;
import com.ferfalk.simplesearchview.SimpleSearchView;
import com.ferfalk.simplesearchview.SimpleSearchViewListener;
import com.ferfalk.simplesearchview.utils.DimensUtils;
import com.github.gcacace.signaturepad.views.SignaturePad;
import com.google.android.flexbox.FlexDirection;
import com.google.android.flexbox.FlexboxLayoutManager;
import com.google.android.flexbox.JustifyContent;
import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationCallback;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationResult;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.navigation.NavigationView;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import com.google.android.material.tabs.TabLayout;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.google.firebase.FirebaseApp;
import com.google.gson.Gson;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.parser.PdfReaderContentParser;
import com.rei.view.MaterialEditText;
import com.rei.view.MaterialEditTextArea;
import com.rei.view.MaterialEditTextAreaBack;
import com.rei.view.MaterialEditTextDate;
import com.rei.view.MaterialEditTextPassword;
import com.rei.view.MaterialEditText_back;
import com.rei.view.MaterialSpinner;
import com.rei.view.MaterialSpinnerBack;
import com.rei.view.MaterialSpinnerBackNew;
import com.rt.printerlibrary.bean.BluetoothEdrConfigBean;
import com.rt.printerlibrary.bean.LableSizeBean;
import com.rt.printerlibrary.bean.Position;
import com.rt.printerlibrary.cmd.Cmd;
import com.rt.printerlibrary.cmd.ZplFactory;
import com.rt.printerlibrary.connect.PrinterInterface;
import com.rt.printerlibrary.enumerate.PrintDirection;
import com.rt.printerlibrary.factory.cmd.CmdFactory;
import com.rt.printerlibrary.manager.PosManager;
import com.rt.printerlibrary.setting.BitmapSetting;
import com.rt.printerlibrary.setting.CommonSetting;
import com.simplr.app.androidpilot.Alarm.AlarmScheduler;
import com.simplr.app.androidpilot.Api.RetrofitInterface;
import com.simplr.app.androidpilot.AppUpdate.UpdateClass;
import com.simplr.app.androidpilot.Bluetooth.BluetoothDeviceChecker;
import com.simplr.app.androidpilot.Internet.NetworkUtil;
import com.simplr.app.androidpilot.PromtPay.CRC16;
import com.simplr.app.androidpilot.SendLog.SendLog;
import com.simplr.app.androidpilot.Survey.SurveyListconfigcustom;
import com.simplr.app.androidpilot.Views.ButtonGroup;
import com.simplr.app.androidpilot.Views.ButtonList;
import com.simplr.app.androidpilot.access.DA_ActionConfig;
import com.simplr.app.androidpilot.access.DA_ColorConfig;
import com.simplr.app.androidpilot.access.DA_DeviceSystemList;
import com.simplr.app.androidpilot.access.DA_DownloadTransconfig;
import com.simplr.app.androidpilot.access.DA_Dynamics;
import com.simplr.app.androidpilot.access.DA_Dynamics_syscon;
import com.simplr.app.androidpilot.access.DA_FormConfig;
import com.simplr.app.androidpilot.access.DA_Functions;
import com.simplr.app.androidpilot.access.DA_GridFunctions;
import com.simplr.app.androidpilot.access.DA_ListConfig;
import com.simplr.app.androidpilot.access.DA_MenuConfig;
import com.simplr.app.androidpilot.access.DA_MessageConfig;
import com.simplr.app.androidpilot.access.DA_QueryConfig;
import com.simplr.app.androidpilot.access.DA_SearchConfig;
import com.simplr.app.androidpilot.access.DA_Survey;
import com.simplr.app.androidpilot.access.DA_System;
import com.simplr.app.androidpilot.access.DA_SystemList;
import com.simplr.app.androidpilot.access.DA_WebserviceConfig;
import com.simplr.app.androidpilot.access.DA_WorkFlowConfig;
import com.simplr.app.androidpilot.adapter.AD_DashBoard;
import com.simplr.app.androidpilot.adapter.AD_DynamicBaseListAdapter;
import com.simplr.app.androidpilot.adapter.AttachFileAdapter;
import com.simplr.app.androidpilot.adapter.CalendarAdapter;
import com.simplr.app.androidpilot.adapter.CustomExpandableListAdapter;
import com.simplr.app.androidpilot.adapter.EventAdapter;
import com.simplr.app.androidpilot.adapter.HourAdapter;
import com.simplr.app.androidpilot.adapter.ImageWidgetAdapter;
import com.simplr.app.androidpilot.adapter.MultiImageAdapter;
import com.simplr.app.androidpilot.adapter.MultiImageAdapterOnline;
import com.simplr.app.androidpilot.adapter.ProductListAdapter;
import com.simplr.app.androidpilot.adapter.WidgetAdapter;
import com.simplr.app.androidpilot.adminSync.AdminSync;
import com.simplr.app.androidpilot.appInterface.ChatModel;
import com.simplr.app.androidpilot.appInterface.ResponseModel;
import com.simplr.app.androidpilot.application.LogoutListener;
import com.simplr.app.androidpilot.application.TimeOutApp;
import com.simplr.app.androidpilot.chart.BarChartList;
import com.simplr.app.androidpilot.chart.GaugeChartList;
import com.simplr.app.androidpilot.chart.LineChartList;
import com.simplr.app.androidpilot.chart.MultiChartList;
import com.simplr.app.androidpilot.chart.MultiSeriesLineChartList;
import com.simplr.app.androidpilot.chart.PieChartList;
import com.simplr.app.androidpilot.dashboard.Dashboard;
import com.simplr.app.androidpilot.dashboard.WorkFlow;
import com.simplr.app.androidpilot.dataSync.DataSyncBackground;
import com.simplr.app.androidpilot.dataSync.DatasyncAsync;
import com.simplr.app.androidpilot.dataSync.DatasyncAsyncCustom;
import com.simplr.app.androidpilot.dataSync.UploadPhotoToserver;
import com.simplr.app.androidpilot.downloadTransconfig.DownloadTransConfig;
import com.simplr.app.androidpilot.downloadTransconfig.DownloadTransConfigAuto;
import com.simplr.app.androidpilot.dynamiccustomconfigs.Listconfigcustom;
import com.simplr.app.androidpilot.dynamiccustomconfigs.ListconfigcustomChild;
import com.simplr.app.androidpilot.dynamiccustomconfigs.ListconfigcustomExpandable;
import com.simplr.app.androidpilot.dynamiccustomconfigs.ListconfigcustomGrid;
import com.simplr.app.androidpilot.dynamiccustomconfigs.MainMenuconfig;
import com.simplr.app.androidpilot.entity.BE_ActionConfig;
import com.simplr.app.androidpilot.entity.BE_Banner;
import com.simplr.app.androidpilot.entity.BE_BarChart;
import com.simplr.app.androidpilot.entity.BE_Broadcast;
import com.simplr.app.androidpilot.entity.BE_Cardview;
import com.simplr.app.androidpilot.entity.BE_ChartInit;
import com.simplr.app.androidpilot.entity.BE_ColorConfig;
import com.simplr.app.androidpilot.entity.BE_ComboBox;
import com.simplr.app.androidpilot.entity.BE_Dascom1145;
import com.simplr.app.androidpilot.entity.BE_Dascom1145_Dtl;
import com.simplr.app.androidpilot.entity.BE_Dascom1145_Hdr;
import com.simplr.app.androidpilot.entity.BE_DownloadTransconfig;
import com.simplr.app.androidpilot.entity.BE_ExpandableListviewHeader;
import com.simplr.app.androidpilot.entity.BE_FormConfig;
import com.simplr.app.androidpilot.entity.BE_FormWidgetSize;
import com.simplr.app.androidpilot.entity.BE_FormWidgetValue;
import com.simplr.app.androidpilot.entity.BE_Functions;
import com.simplr.app.androidpilot.entity.BE_GaugeChart;
import com.simplr.app.androidpilot.entity.BE_GridFunctions;
import com.simplr.app.androidpilot.entity.BE_ImageComboBox;
import com.simplr.app.androidpilot.entity.BE_LineChart;
import com.simplr.app.androidpilot.entity.BE_ListConfig;
import com.simplr.app.androidpilot.entity.BE_Location;
import com.simplr.app.androidpilot.entity.BE_MapLatLong;
import com.simplr.app.androidpilot.entity.BE_MenuConfig;
import com.simplr.app.androidpilot.entity.BE_MessageConfig;
import com.simplr.app.androidpilot.entity.BE_MultiChart;
import com.simplr.app.androidpilot.entity.BE_MultiSeriesLineChart;
import com.simplr.app.androidpilot.entity.BE_MultipleImageRating;
import com.simplr.app.androidpilot.entity.BE_Parameters;
import com.simplr.app.androidpilot.entity.BE_PieChart;
import com.simplr.app.androidpilot.entity.BE_Presentation;
import com.simplr.app.androidpilot.entity.BE_PrintConfig;
import com.simplr.app.androidpilot.entity.BE_PrintDocumentListConfig;
import com.simplr.app.androidpilot.entity.BE_QueryConfig;
import com.simplr.app.androidpilot.entity.BE_QueryConfigIMAGEWIDGET;
import com.simplr.app.androidpilot.entity.BE_QueryFields;
import com.simplr.app.androidpilot.entity.BE_SearchConfig;
import com.simplr.app.androidpilot.entity.BE_StackedBarChart;
import com.simplr.app.androidpilot.entity.BE_StaicViews;
import com.simplr.app.androidpilot.entity.BE_SurveyConfig;
import com.simplr.app.androidpilot.entity.BE_SurveyPOSLineData;
import com.simplr.app.androidpilot.entity.BE_System;
import com.simplr.app.androidpilot.entity.BE_SystemList;
import com.simplr.app.androidpilot.entity.BE_WebserviceConfig;
import com.simplr.app.androidpilot.entity.BE_Widget;
import com.simplr.app.androidpilot.entity.BE_WorkFlow;
import com.simplr.app.androidpilot.entity.Event;
import com.simplr.app.androidpilot.entity.HourEvent;
import com.simplr.app.androidpilot.entity.SurveyModel;
import com.simplr.app.androidpilot.entity.SurveySummary;
import com.simplr.app.androidpilot.entity.UploadImage;
import com.simplr.app.androidpilot.entity.UploadImageList;
import com.simplr.app.androidpilot.filter.BottomsheetFilter;
import com.simplr.app.androidpilot.firebaseconfig.FirebaseInitialize;
import com.simplr.app.androidpilot.gpsActionTypes.CheckLocation;
import com.simplr.app.androidpilot.gpsActionTypes.FindAddress;
import com.simplr.app.androidpilot.gpsActionTypes.LocationFinder;
import com.simplr.app.androidpilot.htmlView.HtmlfileViewer;
import com.simplr.app.androidpilot.htmlView.MarginFinder;
import com.simplr.app.androidpilot.httpFunction.HttpGet;
import com.simplr.app.androidpilot.loginCount.LoginCount;
import com.simplr.app.androidpilot.map.GoogleMapPolylocation;
import com.simplr.app.androidpilot.map.GoogleMaplocation;
import com.simplr.app.androidpilot.map.MapFragment;
import com.simplr.app.androidpilot.map.MapWrapperLayout;
import com.simplr.app.androidpilot.presentation.BannerPresentation;
import com.simplr.app.androidpilot.presentation.Presentation;
import com.simplr.app.androidpilot.printer.BluetoothPrintService;
import com.simplr.app.androidpilot.printer.ParseBitmap;
import com.simplr.app.androidpilot.sendDB.HttpFunction;
import com.simplr.app.androidpilot.sendData.SendData;
import com.simplr.app.androidpilot.serviceProvider.GpsLocationService;
import com.simplr.app.androidpilot.tab.TabFragmet;
import com.simplr.app.androidpilot.tab.TabLayoutAdapter;
import com.simplr.app.androidpilot.timer.FloatingViewService;
import com.simplr.app.androidpilot.ui.CustomView;
import com.simplr.app.androidpilot.updateServer.UpdateToserver;
import com.simplr.app.androidpilot.utility.ActionConfig;
import com.simplr.app.androidpilot.utility.CalendarUtils;
import com.simplr.app.androidpilot.utility.DeviceInfo;
import com.simplr.app.androidpilot.utility.FileHelper;
import com.simplr.app.androidpilot.utility.PDFGeneratorUtil;
import com.simplr.app.androidpilot.utility.RippleEffect;
import com.simplr.app.androidpilot.utility.UT_AlertDialog;
import com.simplr.app.androidpilot.utility.UT_AsyncResponse;
import com.simplr.app.androidpilot.utility.UT_Common;
import com.simplr.app.androidpilot.utility.UT_Constants;
import com.simplr.app.androidpilot.utility.UT_DateTime;
import com.simplr.app.androidpilot.utility.UT_Image;
import com.simplr.app.androidpilot.utility.UT_SystemConfig;
import com.simplr.app.androidpilot.utility.UT_View;
import com.simplr.app.androidpilot.utility.sunmi.SunmiPrintHelper;
import com.simplr.app.androidpilot.webservice.WS_StartUp;
//import com.tbuonomo.viewpagerdotsindicator.WormDotsIndicator;
import com.woosim.printer.WoosimCmd;
import com.woosim.printer.WoosimImage;
import com.woosim.printer.WoosimService;
import com.zebra.sdk.comm.Connection;
import com.zebra.sdk.comm.ConnectionException;
import com.zebra.sdk.graphics.internal.ZebraImageAndroid;
import com.zebra.sdk.printer.ZebraPrinter;
import com.zebra.sdk.printer.ZebraPrinterFactory;
import com.zebra.sdk.printer.ZebraPrinterLanguageUnknownException;

import net.glxn.qrgen.android.QRCode;
import net.glxn.qrgen.core.image.ImageType;

import org.apache.commons.lang3.StringUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Document;

import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.TextStyle;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.ConcurrentModificationException;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;


import honeywell.connection.Connection_Bluetooth;
import honeywell.printer.DocumentDPL;
import honeywell.printer.ParametersDPL;
import io.reactivex.rxjava3.android.schedulers.AndroidSchedulers;
import io.reactivex.rxjava3.core.Observable;
import io.reactivex.rxjava3.core.Single;
import io.reactivex.rxjava3.disposables.CompositeDisposable;
import io.reactivex.rxjava3.disposables.Disposable;
import io.reactivex.rxjava3.schedulers.Schedulers;
import me.himanshusoni.quantityview.QuantityView;
import okhttp3.ConnectionPool;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.RequestBody;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;


public class MainActivity extends BaseActivity implements /*SearchAnimationToolbar.OnSearchQueryChangedListener,*/UT_Constants, NavigationView.OnNavigationItemSelectedListener, OnMapReadyCallback, LogoutListener, UT_AsyncResponse, RippleEffect, DataSyncBackground.CallBack {
    public CustomView customView;
    public boolean nextDisable;
    ZebraPrinter printer;
    public boolean signDone;
    public ArrayList<HashMap<String, String>> finalselectvalues;
    private ArrayList<HashMap<String, String>> finalselectvalues2;
    public ArrayList<UploadImageList> imageListPreview;
    ArrayList<LinearLayout> layoutArrayList;
    ArrayList<LinearLayout> layoutArrayListllvalue;
    ArrayList<String> tabNameList;
    ArrayList<TabFragmet> tabFragmentList;
    boolean tabload = false;
    public boolean menuOpen = false;
    public int imageHeight = 100;

    public ArrayList<WebView> webViewArrayList;
    public HashMap<Integer, Integer> arrCountrefresh;
    boolean calendarEvent = false;
    boolean mIsFloatingViewAttached = false;
    int menuCount = 0;
    public FindAddress locationFinder;
    private ArrayList<String> linesPrinted;
    private GoogleMap mMap;
    public GoogleMaplocation googleMap;

    public GoogleMapPolylocation googleMapPoly;
    private static final int REQUEST_PERMISSIONS = 100;
    private static final int REQUEST_BLUETOOTH = 101;
    public boolean boolean_permission;
    public Double latitude, longitude;
    boolean titleVisible = false;
    public String listimageTagname;
    public String surveyimageTagname;
    BE_SurveyConfig cameraSurveyConfig;
    public String surveyimageFilename;
    boolean reimageupload = false;
    private String screen = "";
    private String pageName = "";
    public String paramScreenName = "";
    public ArrayList<BE_Parameters> parameters = new ArrayList<>();
    private DA_QueryConfig da_queryConfig;
    private DA_Dynamics da_dynamics;
    public ArrayList<BE_Presentation> PresentationRtn;
    private Runnable viewpageRunnable = null;
    final Handler viewpageHandler = new Handler();
    private DA_SystemList da_systemList;
    private DA_DeviceSystemList da_deviceSystemList;
    private DA_Dynamics_syscon da_dynamics_syscon;
    private DA_ListConfig da_listConfig;
    private FirebaseInitialize firebase;
    private UT_View ut_view;
    private UT_Common ut_common;
    public UT_SystemConfig ut_sp;
    private UT_AlertDialog ut_dialog;
    private UT_DateTime ut_dateTime;
    private String header;
    public double screenWidth = 0;
    private double screenHeight = 0;
    public double heightRatio = 0;
    private double widthRatio = 0;
    public int textPadding = 0;
    private int contentPadding = 0;
    private int displayRatio = 0;
    private int textRatio = 0;
    private int formLineHeight = 0;
    private int layoutLineHeight = 0;
    // private String access = "";
    private int cellWidth = 0;
    private int cellHeight = 0;
    private int iconWidth = 0;
    private int iconHeight = 0;
    public String language = "";
    public HashMap<String, String> formValues;
    private HashMap<String, ArrayList<BE_ComboBox>> formSpinners;
    private HashMap<String, ArrayList<BE_ComboBox>> listSpinners;
    public HashMap<String, String> selectedListValues;
    public ArrayList<TextWatcher> textWatcherArrayList;
    public ArrayList<String> fieldNameList;
    private int selectedListIndex;
    private int lastpos;
    public HashMap<String, String> paramFormValues;
    public HashMap<String, String> paramSelectedListValues;
    private ArrayList<BE_ListConfig> listConfigs;

    public ArrayList<BE_ListConfig> mlistConfigs;
    //public ArrayList<String> listConfigValues;
    public ArrayList<HashMap<String, String>> listConfigValues = new ArrayList<>();
    private ArrayList<HashMap<String, String>> listConfigSearchValues = new ArrayList<>();
    boolean multiLineIndex;
    private String listConfigQuery, listConfigQuerySearchconfig;
    private AD_DynamicBaseListAdapter AD_DynamicBaseAdpter;
    private int listPage;
    private int listPageChild;
    private int listLimit;
    private int listLimitChild;
    public int MdtlistLimit = 0;
    public int MdtlistLimitChild = 0;
    private boolean accessFolder;
    private DA_GridFunctions da_gridFunctions;
    public ArrayList<BE_GridFunctions> gridFunctions;
    BluetoothConnection connection;
    public String actionValueforTimer;

    /// Table name called Functions...
    private DA_Functions da_Functions;
    public ArrayList<BE_Functions> Functions;

    //  private GridLayout gridView;
    private AD_DashBoard ad_dashBoard;
    private boolean allLoad;
    private boolean allLoadChild;

    private static final int PICK_IMAGE_REQUEST = 1056;

    //events
    public View.OnClickListener onListClick;

    private View.OnLongClickListener onListLongClick;
    public ArrayList<BE_ActionConfig> actionConfigs;
    public ArrayList<BE_ActionConfig> da_actionConfig_child;
    private ArrayList<BE_QueryConfig> actionConfigQueries;
    private ArrayList<BE_QueryConfig> actionConfigQueriesChild;
    boolean hasRowItemClicked;
    boolean hasRowItemDoubleClicked;
    boolean hasRowItemLongPress;
    boolean hasWindowActivated;
    boolean hasFormRowItemClicked;
    boolean hasWindowOpened;
    boolean hasWindowPreparingToOpen;
    boolean firstLoad;
    private LinearLayout formContent;
    private LinearLayout titleLayout;
    private ArrayList<BE_FormConfig> formConfigs;
    private ArrayList<BE_PrintConfig> printConfigs;
    private ArrayList<BE_PrintDocumentListConfig> printListConfig;
    public ArrayList<BE_SearchConfig> searchConfigs;
    public ArrayList<BE_WorkFlow> workFlowConfigs;
    private ArrayList<BE_MenuConfig> menuConfigs;
    private ArrayList<BE_ColorConfig> colorConfigs;
    private ArrayList<BE_SurveyConfig> surveyConfigs;
    private ArrayList<BE_SurveyPOSLineData> surveyConfigs2;
    public BE_QueryConfig queryFormConfig;
    public BE_QueryConfig queryListConfig;
    public NestedScrollView formScrollView;
    int mYear, mMonth, mDay, mHour, mMinute, mSec;
    public String sTimepicker, sDatepicker;
    public ArrayList<BE_ComboBox> spinnerItems;
    public HashMap<String, String> scFilterselectedvalues = new HashMap<>();
    public Typeface typeFace;
    //  FrameLayout rootLayout;
    public ChipGroup scFilterLayout;
    public ArrayList<SurveyModel> surveyModelArrayList = new ArrayList<>();
    ////  Buttons
    // com.google.android.material.chip.Chip customfilterButton;
    public String formID = "";
    public boolean formIDfs = false;
    //////Flags
    public boolean serachViewflag = false;
    boolean initscListflag = false;
    // List for Menu config
    public ArrayList<String> mainMenuvalue = new ArrayList<>();
    public ArrayList<String> menuFooterIcons = new ArrayList<>();
    public ArrayList<String> menuonListItemclick = new ArrayList<>();
    public ArrayList<String> menuFooterIcons_DisplayText = new ArrayList<>();
    public ArrayList<String> mainMenuCode = new ArrayList<>();
    public LinearLayout listConfigView, ll_menuConfig, footerContent, listBottomvalue;

    public ProductListAdapter productListAdapter;
    public ArrayList<BE_MessageConfig> messageConfigs;
    public ArrayList<BE_MessageConfig> messageConfigsChild;
    public ToggleButton toggleBtn;
    int proportionHeight = 0;
    int toggleHeight = 0;
    int footerHeight = 0;
    public NestedScrollView scrollView;
    public NestedScrollView chartscrollView;
    public ImageView imageTakePhoto;
    public String fontsize;
    int dashboardImage;
    public DA_DownloadTransconfig da_transConfig;
    public ArrayList<BE_DownloadTransconfig> transconfig;
    public ArrayList<BE_System> system;

    ///// Variable for  System Table
    public String DateFormmat, TimeFormat, DateTimeFormat, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits;
    boolean allowClick = true;
    ///Onlclick background color change
    public String MDTNO;
    public String FixedLot;
    public ArrayList<UploadImage> mGetUploadImage;
    public UploadImage uploadImage;
    public boolean actionPerformed = false;
    public String CameraTagFieldname;
    public int ListCameraTagFieldname;
    public LinearLayout listConfigHeader;
    public MaterialCardView zerothCardview;
    private String TAG = "FirebaseInitialize";
    double currentLatitude = 0.0, currentLongitude = 0.0;
    public ProgressBar progressBar;
    //// Change password

    //    String cameraFormFilename;
//    public ProgressDialog progressdialog;
    public Dialog progressdialog;

    boolean indicatorShow = false;

    boolean progressShow = false;
    public boolean tabFilter = false;

    boolean dialogShow = false;
    boolean alertdialogShow = false;
    boolean EditTextcursorFocus = false;
    public ExpandableListView expandableListView;
    int groupPos;
    boolean bCancel = false;
    public String POSTURL;
    public String GETURL;
    public String tempCameraFilename = "";
    public String FIELDNAMEPHOTOTAKEN = "";
    public String imageTag = "";
    public ArrayList<UploadImage> TotalUploadImage;
    public String replacebitmapImage = null;
    private Toolbar toolbar;
    public Intent intent;
    public TextView headerTitle;
    private UT_DateTime ut_time;
    public String provider;

    public HorizontalScrollView listConfigContainer;
    public String formCameraFilename, listCameraFilename;
    public LinearLayout mainContent, customScreen;

    public LinearLayout monthlyCalendar;
    public LinearLayout dailyCalendarLayout;

    ///// FAB -->using it in MEnuconfig
    public FloatingActionButton fabMenu;
    public LinearLayout fabAction;
    private boolean fabExpanded = false;
    private UT_Image ut_image;
    public static final int EXTRA_REVEAL_CENTER_PADDING = 40;
    public SimpleSearchView simpleSearchView;
    public LinearLayout searchviewlayout;
    private ImageView qrScanner;
    public AppBarLayout appBar;

    /////Flag usage for Toolbars
    boolean MessagemenuEnable = false;
    public boolean SearchmenuEnable = false;
    boolean NextmenuDisable = false;
    boolean MainmenuEnable = false;
    boolean SyncmenuEnable = false;
    boolean PrintmenuEnable = false;
    boolean actiavtedEnable = false;

    boolean refreshEnable = false;
    boolean saveEnable = false;
    public boolean finishSurvey = false;

    public boolean shareEnable = false;
    public FileHelper fileHelper;
    public FileWriter writer;
    boolean banner = false;
    public File output;
    public boolean popupWindow = false;
    public String AT_GETURL, AT_POSTURL;
    boolean multiDisplayNo = false;

    /////////// Form's Listview
    public LinearLayout llValues;
    public String actionListFieldname;
    public String transFieldname = "";
    private String systemVersionValue;
    public String runningNo;
    // bunch of location related apis
    private FusedLocationProviderClient mFusedLocationClient;
    private LocationCallback mLocationCallback;
    private Location mCurrentLocation;
    public String jsFieldname;
    public String DBSolutionName = "";
    public String SolutionName = "";
    public ArrayList<BE_MapLatLong> MapLatLongRtn;
    int inActiveTimer = 0;
    private Boolean isUserTimedOut = false;
    float filterTextsize = 0;
    private final CompositeDisposable disposables = new CompositeDisposable();
    public String mainDashboardActivated = "MainWidget";
    public NestedScrollView nsValues;
    public HorizontalScrollView hsContainer;
    // Survey Screen declare
    int surveycount = 0;
    public SurveyListconfigcustom surveylistconfig;
    public HashMap<String, String> surveyValue;
    public ArrayList<SurveySummary> surveySummary;
    public ArrayList<String> surveyRadioGroup;
    public BE_FormConfig be_formConfig;
    String listviewFieldName;
    public boolean listInsideForm = false;
    boolean bluetoothLoad = false;
    boolean IsconfigChange;
    public DownloadTransConfig downloadTransconfig;
    public ViewPager viewPager;
    public LinearLayout dotIndicator;
    public Bitmap defaultListCamerabitMap = null;
    boolean listExecute = false;
    public String previousScreenName = "";
    public ImageView image;
    public Bitmap photo = null;
    public String photosavepath = "";
    public boolean takemultiIMage = false;
    public boolean multicamera = false;
    private TextView screenNameText;
    public TextView appNameText;
    public ArrayList<BE_WebserviceConfig> stringArrayList;
    public ArrayList<BE_Broadcast> broadcast;
    public Timer t;
    public Timer t2;
    //    Timer timer2;
    public Timer timer3;

    public CountDownTimer countDownTimer;
    public TextView timeTextview;

    public MultiImageAdapter multiImageAdapter;
    public MultiImageAdapterOnline multiImageAdapterOnline;

    private int lastOrientation;

    public BottomSheetDialog bottomSheetDialog;

    CalendarAdapter calendarAdapter;

    String destroycall;
    private BluetoothAdapter mBluetoothAdapter = null;
    // Member object for the print services
    public BluetoothPrintService mPrintService = null;
    private WoosimService mWoosim = null;
    public static final int MESSAGE_DEVICE_NAME = 1;
    public static final int MESSAGE_TOAST = 2;
    public static final int MESSAGE_READ = 3;

    // Key names received from the BluetoothPrintService Handler
    public static final String DEVICE_NAME = "device_name";
    public static final String TOAST = "toast";

    private int printLine = 15;

    public ImageView customImageOne, customImageTwo, customImageThree, customImageFour;
    public ImageButton cbuttonone, cbuttonTwo, cbuttonThree, cbuttonFour;
    public Bitmap bitmapone = null, bitmaptwo = null, bitmapthree = null, bitmapfour = null;
    public String imageNameone = "", imageNametwo = "", imageNamethree = "", imageNamefour = "";
    public int listPosition = 0;
    public String location = "";

    boolean before1 = false;
    boolean before2 = false;
    boolean after1 = false;
    boolean after2 = false;

    public File SalesDirectory1, SalesDirectory2, SalesDirectory3, SalesDirectory4;

    public LinearLayout widgetcontent;

    public ImageButton datebackBtn;
    public TextView monthYearTV;
    public ImageButton datenextBtn;
    public RecyclerView calendarRecyclerView;

    public LinearLayout calendarLayout;

    public ArrayList<LocalDate> daysInMonth;

    public LatLngBounds latLngBounds;
    public List<Marker> markerlist;

    public ArrayList<LinkedHashMap<String, String>> hashMapArrayList;
    public ArrayList<LinkedHashMap<String, String>> hashMapArrayList2;
    public int tagNo;

    public ArrayList<String> pdfFilename;

    String refreshListName = "";
    String formListScreenName;
    LinearLayout FormList_llValues;
    LinearLayout CustMessage_llValues;
    LinearLayout HQMessage_llValues;
    LinearLayout MyMessage_llValues;
    LinearLayout llParentLayoutformlist;

    public String searchFilterSecond = "";
    String searchFieldName = "";

    public ProgressBar progresslayout;
    public LinearProgressIndicator loadingProgress;
    public TextView percentage;
    HourAdapter hourAdapter;
    String attachFieldName;
    RecyclerView attachRecyclerView;
    AttachFileAdapter fileAdapter;
    ArrayList<String> fileNameList;
    public boolean openstatus = false;
    public boolean formlist;
    public TabLayoutAdapter tabLayoutAdapter;
    Button svbtn;
    String buttonroot;
    Typeface screennametypeface;
    ArrayList<BE_ColorConfig> colorConfigsChild;

    public ArrayList<String> showformfileds;
    public ArrayList<NestedScrollView> nestedScrollViewArrayList = new ArrayList<NestedScrollView>();
    public ArrayList<LinearLayout> linearLayoutArrayList = new ArrayList<LinearLayout>();

    public String screenNameChild;

    public ArrayList<HashMap<String, String>> listConfigValuesChild;

    public FragmentContainerView fragmentContainer;

    private DeviceInfo deviceInfo;
    public File masterImage;
    public File transImage;
    String masterImageName;
    String transImageName;
    FloatingActionButton filterIcon;

    Connection_Bluetooth hwBtConnection = null;
    public ActionConfig actionConfig;

    FusedLocationProviderClient distancefusedLocationClient;
    private LocationCallback distancelocationCallback;
    LocationRequest distancelocationRequest;
    public String distanceFieldName;
    String bluetoothFieldName = "";

    String targetDeviceAddress;
    public boolean deviceFound;
    public FloatingActionButton fabBtn;

    Timer delayTimer;

    int imageCompressSize = 65;
    ArrayList<BluetoothDevice> deviceArrayList;
    Dialog scandialog;
    WebView webViewJavaScript;
    String signfilename = "";
    String IntentParamRoot;

    boolean Startlocationstream = false;
    public int listselectpos;

    int pagingHeight = 120;

    String AppBarShow = "";

    ArrayList<HashMap<String, String>> formValuess;
    int maxLength = 32;

    public EditText listTextBox;

    @SuppressLint("NewApi")
    @Override
    protected void onCreate(Bundle savedInstanceState) {

        intent = getIntent();
        screen = intent.getStringExtra(IN_SCREEN_NAME);

        try {
            AppBarShow = intent.getStringExtra(IN_AppBarShow);
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            IntentParamRoot = intent.getStringExtra(IN_PARAM_ROOT);
        } catch (Exception e) {
            e.printStackTrace();
        }


        System.out.println("Start screen : " + screen);
        deviceInfo = new DeviceInfo();

        indicatorShow = false;
        IsconfigChange = true;
        writer = ActionConfig.writer;

        if (screen.equals("Form-AddMessage")) {
            setTheme(R.style.AppTheme_Dialog);
            //    getWindow().setLayout(700, 1000);
        } else {
            getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
        }

        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_main);

        fileHelper = ((TimeOutApp) getApplicationContext()).fileHelper;
        actionConfig = new ActionConfig(this, actionConfigs, ut_sp, fileHelper);

        distancefusedLocationClient = LocationServices.getFusedLocationProviderClient(this);
        distancelocationRequest = LocationRequest.create();
        distancelocationRequest.setInterval(10000);  // 10 seconds
        distancelocationRequest.setFastestInterval(5000);  // 5 seconds
        distancelocationRequest.setPriority(LocationRequest.PRIORITY_LOW_POWER);

        bluetoothFieldName = "";
        targetDeviceAddress = "";
        refreshListName = "";

        nextDisable = false;
        finalselectvalues = new ArrayList<HashMap<String, String>>();
        finalselectvalues2 = new ArrayList<HashMap<String, String>>();
        listConfigValuesChild = new ArrayList<HashMap<String, String>>();
        imageListPreview = new ArrayList<UploadImageList>();
        layoutArrayList = new ArrayList<LinearLayout>();
        layoutArrayListllvalue = new ArrayList<LinearLayout>();
        markerlist = new ArrayList<>();
        daysInMonth = new ArrayList<>();
        ut_sp = new UT_SystemConfig(getApplicationContext());
        broadcast = new ArrayList<>();
        da_dynamics = new DA_Dynamics(this);
        tabNameList = new ArrayList<>();
        tabFragmentList = new ArrayList<>();
        da_systemList = new DA_SystemList(this);
        da_deviceSystemList = new DA_DeviceSystemList(this);
        mPrintService = new BluetoothPrintService(mHandler, MainActivity.this);
        textWatcherArrayList = new ArrayList<>();
        fieldNameList = new ArrayList<>();
        showformfileds = new ArrayList<>();
        deviceArrayList = new ArrayList<BluetoothDevice>();

        formlist = false;
        screennametypeface = Typeface.createFromAsset(getAssets(), "fonts/Poppins-Bold.ttf");
        Typeface appNameTexttypeface = Typeface.createFromAsset(getAssets(), "fonts/Poppins-Bold.ttf");

        screenNameText = (TextView) findViewById(R.id.screenName);
        screenNameText.setTypeface(screennametypeface);
        screenNameText.setVisibility(View.GONE);

        fileHelper = ((TimeOutApp) getApplicationContext()).fileHelper;
        addStack(screen);
        ut_sp.setStringValue(IN_SCREEN_NAME, screen);
        ut_sp.setStringValue(SP_BACK_SCREENNAME, "");

        selectedListIndex = -1;

        progresslayout = (ProgressBar) findViewById(R.id.progresslayout);

        scrollView = (NestedScrollView) findViewById(R.id.scrollConfigValues);
        appNameText = (TextView) findViewById(R.id.appNameText);
        appNameText.setTypeface(appNameTexttypeface);
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        appBar = (AppBarLayout) findViewById(R.id.appbar);
        simpleSearchView = findViewById(R.id.searchView);
        searchviewlayout = findViewById(R.id.searchviewlayout);
        qrScanner = findViewById(R.id.qrScanner);

        datebackBtn = findViewById(R.id.datebackBtn);
        monthYearTV = findViewById(R.id.monthYearTV);
        datenextBtn = findViewById(R.id.datenextBtn);
        calendarRecyclerView = findViewById(R.id.calendarRecyclerView);
        calendarLayout = findViewById(R.id.calendarLayout);
        svbtn = findViewById(R.id.svbutton);
        fabBtn = findViewById(R.id.fabBtn);


        CustMessage_llValues = new LinearLayout(this);
        HQMessage_llValues = new LinearLayout(this);
        MyMessage_llValues = new LinearLayout(this);

        View map_relative_layout = findViewById(R.id.map_relative_layout);
        View fragment = findViewById(R.id.map);
        map_relative_layout.setVisibility(View.GONE);
        fragment.setVisibility(View.GONE);

        setSupportActionBar(toolbar);
        getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_arrow_back_white_24dp);

        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                doBackButton(null, "");
            }
        });

        logDeviceInfo();

        TotalUploadImage = new ArrayList<>();
        stringArrayList = new ArrayList<>();

        pdfFilename = new ArrayList<String>();
        hashMapArrayList = new ArrayList<LinkedHashMap<String, String>>();
        hashMapArrayList2 = new ArrayList<LinkedHashMap<String, String>>();

        typeFace = Typeface.createFromAsset(getAssets(), "fonts/Poppins-Light.ttf");
        formContent = (LinearLayout) findViewById(R.id.formContent);
        titleLayout = (LinearLayout) findViewById(R.id.titleLayout);
        listConfigHeader = (LinearLayout) findViewById(R.id.listConfigHeader);
        zerothCardview = (MaterialCardView) findViewById(R.id.zerothCardview);
        progressBar = findViewById(R.id.progressBar);

        listConfigView = (LinearLayout) findViewById(R.id.listConfigValues);
        listBottomvalue = (LinearLayout) findViewById(R.id.listBottomvalue);
        filterIcon = (FloatingActionButton) findViewById(R.id.filterIcon);

        titleLayout.setVisibility(View.GONE);


        String sizezz = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'ImageCompressSize'");

        if (sizezz != null && !sizezz.isEmpty()) {
            try {
                imageCompressSize = parseInt(sizezz);
            } catch (Exception e) {
                e.printStackTrace();
                imageCompressSize = 65;
            }
        } else {
            imageCompressSize = 65;
        }


        filterIcon.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                float size = Float.parseFloat(String.valueOf(fontsize));
                filterTextsize = (18) * size;
                BottomsheetFilter filter = new BottomsheetFilter(MainActivity.this, screen, da_dynamics, da_queryConfig, ut_common, searchConfigs, scFilterselectedvalues, scFilterLayout, filterTextsize, formValues, bottomSheetDialog);
                filter.bottomSheet();
            }
        });

//        if (screen.contains("FORM-LOGIN")) {
        if (AppBarShow.equalsIgnoreCase("NOBAR") || screen.contains("FORM-LOGIN")) {
            appBar.setVisibility(View.GONE);
            appNameText.setVisibility(View.GONE);
            screenNameText.setVisibility(View.GONE);
            listBottomvalue.setVisibility(View.GONE);
            getSupportActionBar().setDisplayHomeAsUpEnabled(false);
            getSupportActionBar().setDisplayShowTitleEnabled(false);

        } else {
            listBottomvalue.setVisibility(View.GONE);
            try {
                if (ut_sp.getStringValue(UT_Constants.XML_SOLUTION_NAME).equals("WMS")) {
                    SolutionName = "WMS";
                    appNameText.setText("Simplr Solutions");
                } else {
                    SolutionName = "SALES";
                    if (menuCount > 3) {
                        appNameText.setText("");
                    } else {
                        appNameText.setText("Simplr Sales");
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
                appNameText.setText("Simplr");
            }
//            screenNameText.setVisibility(View.VISIBLE);
            screenNameText.setVisibility(View.GONE);
            appNameText.setVisibility(View.VISIBLE);
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setDisplayShowTitleEnabled(false);
        }


        WS_StartUp ws_startUp = new WS_StartUp(MainActivity.this);
        ws_startUp.getDimensions();
        initUI(formContent, screen);
        initActivity(formContent, screen);
        actionPerformed = false;


        svbtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (buttonroot.equals("NEXT")) {
                    executeActionConfig("", AN_INITNEXTBUTTONCLICK, "");
                } else {
                    executeActionConfig("", AN_INITSAVEBUTTONCLICK, "");
                }
            }
        });


        toolbar.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View v) {
                Toast.makeText(getApplicationContext(), screen, Toast.LENGTH_LONG).show();
                return false;
            }
        });


    }


    private void updateDistanceTolist(Location location) {
        try {
            double latitude = location.getLatitude();
            double longitude = location.getLongitude();

            Location startPoint = new Location("locationA");
            startPoint.setLatitude(latitude);
            startPoint.setLongitude(longitude);
            int sizeOne = 0;

            if (distanceFieldName != null && !distanceFieldName.isEmpty()) {
                if (!hashMapArrayList.isEmpty()) {

                    sizeOne = hashMapArrayList.size();

                    String format = hashMapArrayList.get(0).get("format0".toUpperCase());
                    String decimalRounding = hashMapArrayList.get(0).get("decimalRounding0".toUpperCase());


                    for (int i = 0; i < hashMapArrayList.size(); i++) {

                        String latlong = hashMapArrayList.get(i).get(distanceFieldName.toUpperCase() + i);

                        if (latlong != null && !latlong.isEmpty() && latlong.contains(",")) {

                            String[] values = latlong.split(",");

                            Location endPoint = new Location("locationB");
                            endPoint.setLatitude(Double.parseDouble(values[0]));
                            endPoint.setLongitude(Double.parseDouble(values[1]));

                            double distance = startPoint.distanceTo(endPoint) / 1000;
                            double finalDistance = distance;

                            if (format != null && !format.isEmpty()) {
                                if (format.equalsIgnoreCase("Meter")) {
                                    finalDistance = startPoint.distanceTo(endPoint);

                                } else {
                                    finalDistance = (startPoint.distanceTo(endPoint) / 1000);
                                }
                            }

                            String value;

                            if (decimalRounding != null && !decimalRounding.isEmpty()) {
                                value = String.format("%." + decimalRounding + "f", finalDistance);
                            } else {
                                int intvalue = (int) finalDistance;
                                value = String.valueOf(intvalue);
                            }

                            if (distanceFieldName != null && !distanceFieldName.isEmpty()) {
                                updatelistvalue(distanceFieldName, i, value, format);
                            }

                        }
                    }

                }

                if (!hashMapArrayList2.isEmpty()) {

                    String format = hashMapArrayList2.get(0).get("format0".toUpperCase());
                    String decimalRounding = hashMapArrayList2.get(0).get("decimalRounding0".toUpperCase());

                    for (int i = 0; i < hashMapArrayList2.size(); i++) {
                        int a = sizeOne + i + 1;

                        String latlong = hashMapArrayList2.get(i).get(distanceFieldName.toUpperCase() + a);

                        if (latlong != null && !latlong.isEmpty() && latlong.contains(",")) {

                            String[] values = latlong.split(",");

                            Location endPoint = new Location("locationB");
                            endPoint.setLatitude(Double.parseDouble(values[0]));
                            endPoint.setLongitude(Double.parseDouble(values[1]));

                            double distance = startPoint.distanceTo(endPoint) / 1000;

                            double finalDistance = distance;

                            if (format != null && !format.isEmpty()) {
                                if (format.equalsIgnoreCase("Meter")) {
                                    finalDistance = startPoint.distanceTo(endPoint);

                                } else {
                                    finalDistance = (startPoint.distanceTo(endPoint) / 1000);
                                }
                            }

                            String value;

                            if (decimalRounding != null && !decimalRounding.isEmpty()) {
                                value = String.format("%." + decimalRounding + "f", finalDistance);
                            } else {
                                int intvalue = (int) finalDistance;
                                value = String.valueOf(intvalue);
                            }

                            if (distanceFieldName != null && !distanceFieldName.isEmpty()) {
                                updatelistvalue(distanceFieldName, a, value, format);
                            }
                        }

                    }

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private static final double EARTH_RADIUS = 6371.01; // Radius of the Earth in kilometers

    public static double calculateHaversineDistance(double lat1, double lon1, double lat2, double lon2) {
        // Convert degrees to radians
        double lat1Rad = Math.toRadians(lat1);
        double lon1Rad = Math.toRadians(lon1);
        double lat2Rad = Math.toRadians(lat2);
        double lon2Rad = Math.toRadians(lon2);

        // Calculate the differences
        double deltaLat = lat2Rad - lat1Rad;
        double deltaLon = lon2Rad - lon1Rad;

        // Haversine formula
        double a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +
                Math.cos(lat1Rad) * Math.cos(lat2Rad) *
                        Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);

        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        // Multiply by Earth's radius to get the distance
        return EARTH_RADIUS * c; // Distance in kilometers
    }

    private void updatelistvalue(String fieldName, int i, String distance, String format) {

        try {
            View view;
            if (formlist) {
                if (FormList_llValues != null) {
                    view = FormList_llValues.findViewWithTag(fieldName + "#" + i);
                } else {
                    view = listConfigView.findViewWithTag(fieldName + "#" + i);
                }
            } else {
                view = listConfigView.findViewWithTag(fieldName + "#" + i);
            }

            if (format != null && !format.isEmpty()) {
                if (format.equalsIgnoreCase("Meter")) {
                    updateViewValue(view, distance + " m", fieldName, "listSpinners", i);
                } else {
                    updateViewValue(view, distance + " km", fieldName, "listSpinners", i);
                }
            } else {
                updateViewValue(view, distance, fieldName, "listSpinners", i);
            }
            selectedListValues.put(fieldName.toUpperCase(), distance);
        } catch (Exception e) {
            e.printStackTrace();
            fileHelper.fileWriter("Exception : " + e.getLocalizedMessage(), writer);
        }
    }

    public final MyHandler mHandler = new MyHandler(this);

    public void deleteTakePhotos() {
        try {
            String count = da_systemList.getSystemValue("select SystemValue from SystemList where Code = 'PhotoRetentionDays'");

            if (count != null) {
                if (!count.isEmpty()) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss", Locale.getDefault());
                    String currentDate = sdf.format(new Date());

                    File SalesDirectory = new File(fileHelper.getTakeImageFolder() + "/");

                    if (SalesDirectory.exists()) {

                        File[] FileList = SalesDirectory.listFiles();

                        assert FileList != null;
                        if (FileList.length != 0) {
                            for (File value : FileList) {
                                File file = new File(String.valueOf(value));
//                          Fri Dec 29 11:34:01 GMT+08:00 2023

                                long durationMillis = System.currentTimeMillis() - file.lastModified();
                                long daysBetween = TimeUnit.MILLISECONDS.toDays(durationMillis);

                                int a = parseInt(count);

                                if (daysBetween >= a) {
                                    file.delete();
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void loadchildEXPlist(String mscreenNameChild) {

        screenNameChild = mscreenNameChild;

        BE_QueryConfig queryListConfig = da_queryConfig.getQueryConfig(screenNameChild);
        actionConfigQueriesChild = da_queryConfig.getActionConfigQueries(mscreenNameChild, ut_sp.getStringValue(SP_ACCESS_LEVEL));

        System.out.println("queryListConfig : " + queryListConfig);

        ArrayList<BE_ListConfig> listConfigs = da_listConfig.getListConfigs(screenNameChild, language, screenWidth);
        System.out.println("listConfigs : " + listConfigs);

        listLimitChild = 10;
        listPageChild = 0;
        String Query = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, null, null, null, FixedLot, system, null, null);
        listConfigValuesChild = da_dynamics.getListConfigValues(screenNameChild, listConfigs, Query, listPageChild, listLimitChild, MdtlistLimit);

        System.out.println("listConfigValues : " + listConfigValuesChild);

        DA_ActionConfig da_actionConfig = new DA_ActionConfig(this);
        da_actionConfig_child = da_actionConfig.getActionConfigs(screenNameChild, ut_sp.getStringValue(SP_ACCESS_LEVEL));

        DA_MessageConfig da_messageConfig = new DA_MessageConfig(this);
        messageConfigsChild = da_messageConfig.getMessageConfigs(screenNameChild, language);

        initAddmainListEXPCHILD(screenNameChild, listConfigs, listConfigValuesChild, linearLayoutArrayList.get(0), null, Query, 0, null, hsContainer, nestedScrollViewArrayList.get(0), onListClick, onListLongClick);

    }


    public void explistclick(View view) {
        String listTag = "";
        String listValue = "";
        String[] tempTag;

        if (allowClick) {

            if (hasRowItemClicked || hasFormRowItemClicked || hasRowItemDoubleClicked) {
                readListRowValues(view);

                if (hasRowItemClicked) {
                    executeActionConfig("", AN_ROWITEMCLICKED, "");
                } else if (hasFormRowItemClicked) {
                    executeActionConfig(actionListFieldname, AN_FORMROWITEMCLICKED, "");
                } else if (hasRowItemDoubleClicked) {
                    executeActionConfig("", AN_ROWITEMDOUBLECLICKED, "");
                }

            } else {

                ViewGroup viewGroup = (ViewGroup) view;
                Log.v("Res Id", "" + view.getId());
                for (int i = 0; i < viewGroup.getChildCount(); i++) {
                    View temp = viewGroup.getChildAt(i);
                    if (temp instanceof MaterialCardView) {
                        MaterialCardView card = (MaterialCardView) viewGroup.getChildAt(i);
                        ViewGroup viewGroup1 = ((ViewGroup) card.getChildAt(0));
                        for (int k = 0; k < viewGroup1.getChildCount(); k++) {
                            View child1 = viewGroup1.getChildAt(k);
                            if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("SALES")) {
                                int color = R.color.colorPrimary;
                                child1.setBackground(getBackgroundDrawable(color, child1.getBackground()));
                            } else if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("WMS")) {
                                int color = Color.MAGENTA;
                                child1.setBackground(getBackgroundDrawable(color, child1.getBackground()));
                            }

                            if (child1 instanceof LinearLayout) {
                                LinearLayout relativeLayout = (LinearLayout) child1;
                                for (int relav = 0; relav < relativeLayout.getChildCount(); relav++) {
                                    View child = relativeLayout.getChildAt(relav);
                                    Log.v("ReadRowValues ", "" + view.getId());

                                    if (child instanceof EditText) {
                                        EditText value = (EditText) child;
                                        listTag = value.getTag().toString();
                                        listValue = value.getText().toString();
                                        if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("SALES")) {
                                            int color = R.color.colorPrimary;
                                            value.setBackground(getBackgroundDrawable(color, value.getBackground()));

                                        } else if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("WMS")) {
                                            int color = Color.MAGENTA;
                                            value.setBackground(getBackgroundDrawable(color, value.getBackground()));

                                        }
                                    } else if (child instanceof MaterialButton) {
                                        MaterialButton value = (MaterialButton) child;
                                        listTag = value.getTag().toString();
                                        listValue = value.getText().toString();

                                    } else if (child instanceof TextView) {
                                        TextView value = (TextView) child;
                                        listTag = value.getTag().toString();
                                        listValue = value.getText().toString();
                                        if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("SALES")) {
                                            int color = R.color.colorPrimary;
                                            value.setBackground(getBackgroundDrawable(color, value.getBackground()));

                                        } else if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("WMS")) {
                                            int color = Color.MAGENTA;
                                            value.setBackground(getBackgroundDrawable(color, value.getBackground()));
                                        }
                                    } else if (child instanceof Spinner) {
                                        Spinner value = (Spinner) child;
                                        listTag = value.getTag().toString();
                                        if (value.getSelectedItem() != null) {
                                            listValue = value.getSelectedItem().toString();
                                        }
                                    }
                                    if (listTag.contains("#")) {
                                        tempTag = listTag.split("#");
                                        selectedListValues.put(tempTag[0].toUpperCase(), listValue);
                                        selectedListIndex = Integer.valueOf(tempTag[1]);
                                    } else {
                                        selectedListValues.put(listTag.toUpperCase(), listValue);
                                        selectedListIndex = 0;
                                    }
                                }
                            }
//                            fileHelper.fileWriter("readListRowValues selectedListValues : " + selectedListValues, writer);
//                            System.out.println("readListRowValues selectedListValues : " + selectedListValues);

                        }
                    }
                }

            }
        }

    }


    private void initAddmainListEXPCHILD(String screenNameChild, ArrayList<BE_ListConfig> listConfigs, ArrayList<HashMap<String, String>> listConfigValues, LinearLayout listValues, Object o, String query, int i, Object o1, HorizontalScrollView hsContainer, NestedScrollView scrollConfigValues, View.OnClickListener onListClick, View.OnLongClickListener onListLongClick) {

        DA_ColorConfig da_colorConfig = new DA_ColorConfig(this);
        colorConfigsChild = da_colorConfig.getColorConfigs(screenNameChild);

        ListconfigcustomChild listConfigCustom = new ListconfigcustomChild(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, null, null, null, FixedLot, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
        listConfigCustom.initConfiguration(screenNameChild, scrollConfigValues, listConfigs, listConfigValues, listValues, colorConfigsChild, onListClick, onListLongClick, textPadding, query, hsContainer);

    }


    private static class MyHandler extends Handler {
        private final WeakReference<MainActivity> mActivity;

        MyHandler(MainActivity activity) {
            mActivity = new WeakReference<>(activity);
        }

        @Override
        public void handleMessage(Message msg) {
            MainActivity activity = mActivity.get();
            if (activity != null) {
                activity.handleMessage(msg);
            }
        }
    }

    private void handleMessage(Message msg) {
        switch (msg.what) {
            case MESSAGE_DEVICE_NAME:
                // save the connected device's name
                String mConnectedDeviceName = msg.getData().getString(DEVICE_NAME);
                Toast.makeText(getApplicationContext(), "Connected to " + mConnectedDeviceName, Toast.LENGTH_SHORT).show();

                break;
            case MESSAGE_TOAST:
                Toast.makeText(getApplicationContext(), msg.getData().getInt(TOAST), Toast.LENGTH_SHORT).show();
                break;
        }
    }

    public static void deleteCache(Context context) {
        try {
            File dir = context.getCacheDir();
            deleteDir(dir);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static boolean deleteDir(File dir) {

        if (dir != null && dir.isDirectory()) {
            String[] children = dir.list();

            for (int i = 0; i < children.length; i++) {
                boolean success = deleteDir(new File(dir, children[i]));
                if (!success) {
                    return false;
                }
            }
            return dir.delete();
        } else if (dir != null && dir.isFile()) {
            return dir.delete();
        } else {
            return false;
        }
    }

    private void appVersionCheck() {

        try {
            systemVersionValue = this.getPackageManager().getPackageInfo(this.getPackageName(), 0).versionName;
            Log.d("VERSION-NUMBER------>", systemVersionValue);
            formValues.put(SP_APP_VERSION, systemVersionValue);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }


    }


    @Override
    public void onUserInteraction() {
        super.onUserInteraction();

        ((TimeOutApp) getApplication()).onUserInteracted();

    }

    private void updateLocationUI() {
        if (mCurrentLocation != null) {
//            fileHelper.fileWriter("executeQuery Query : " + "INSERT INTO CustVisit(CustNo, TransNo, TransType, AgentId, Longitude, Latitude, Status, Remarks, TransDate, uploaded) VALUES ('','" + ut_sp.getStringValue(SQL_TRANSDOCNO) + "','GPS-LOC','','" + mCurrentLocation.getLongitude() + "','" + mCurrentLocation.getLatitude() + "','','GPS-LOC','" + sDatepicker + sTimepicker + "',1)", writer);
            da_dynamics.executeQuery("INSERT INTO CustVisit(CustNo, TransNo, TransType, AgentId, Longitude, Latitude, Status, Remarks, TransDate, uploaded) VALUES ('','" + ut_sp.getStringValue(SQL_TRANSDOCNO) + "','GPS-LOC','','" + mCurrentLocation.getLongitude() + "','" + mCurrentLocation.getLatitude() + "','','GPS-LOC','" + sDatepicker + sTimepicker + "',1)");
        }

    }

    @Override
    protected void onPause() {
        super.onPause();
        if (connection != null) {
            connection.disconnect();
            connection = null;
        }
        Log.d("Log", "onPause Called");
        try {
            if (broadcastReceiver != null) {
                unregisterReceiver(broadcastReceiver);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            if (banner) {
                viewpageHandler.removeCallbacks(viewpageRunnable);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            if (distancefusedLocationClient != null) {
                distancefusedLocationClient.removeLocationUpdates(distancelocationCallback);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    @Override
    protected void onStop() {
        super.onStop();
        Log.d("Log", "onStop Called");

        if (!indicatorShow) {
            try {
                if (progressdialog != null) {
                    progressdialog.dismiss();
                    progressdialog = null;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (!progressShow) {
            try {

                if (ut_dialog.dialogProgress != null) {
                    if (ut_dialog.dialogProgress.isShowing()) {
                        ut_dialog.dialogProgress.dismiss();
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if (!alertdialogShow) {
            try {

                if (ut_dialog.dialog != null) {
                    if (ut_dialog.dialog.isShowing()) {
                        ut_dialog.dialog.dismiss();
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (!dialogShow) {
            try {

                if (ut_dialog.dialogone != null) {
                    if (ut_dialog.dialogone.isShowing()) {
                        ut_dialog.dialogone.dismiss();
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        switch (requestCode) {
            case REQUEST_PERMISSIONS: {
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    boolean_permission = true;

                } else {
                    Toast.makeText(getApplicationContext(), "Please allow the permission", Toast.LENGTH_LONG).show();
                }
            }
            case REQUEST_BLUETOOTH: {
                fileHelper.fileWriter("Delete Query : " + "delete from tbl_PrintBluetooth", writer);
                Log.d("Delete Query", "delete from tbl_PrintBluetooth");
                da_dynamics.executeQuery("delete from tbl_PrintBluetooth");

                broadcast = da_dynamics.getBroadcast();
                BluetoothAdapter BA = BluetoothAdapter.getDefaultAdapter();
                if (ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN) != PackageManager.PERMISSION_GRANTED) {
                    // TODO: Consider calling
                    //    ActivityCompat#requestPermissions
                    // here to request the missing permissions, and then overriding
                    //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
                    //                                          int[] grantResults)
                    // to handle the case where the user grants the permission. See the documentation
                    // for ActivityCompat#requestPermissions for more details.
                    return;
                }
                BA.startDiscovery();
                IntentFilter filter = new IntentFilter();
                for (int i = 0; i < broadcast.size(); i++) {
                    filter.addAction(broadcast.get(i).ActionName);
                }
                filter.setPriority(100);

                System.out.println("registerReceiver 1 " + filter);

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                    registerReceiver(broadcastReceiver, filter, Context.RECEIVER_NOT_EXPORTED);
                } else {
                    registerReceiver(broadcastReceiver, filter);
                }

            }
        }
    }

    public BroadcastReceiver timerBroadcastReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            try {
                String action = intent.getAction();

                if (action.equals("ManTimerAction")) {
                    String FieldName = intent.getStringExtra("valueName");
                    executeActionConfig("", FieldName, "");
                    LocalBroadcastManager.getInstance(MainActivity.this).unregisterReceiver(timerBroadcastReceiver);
                    stopService(new Intent(MainActivity.this, FloatingViewService.class));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    };


    public BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {

        @SuppressLint("MissingPermission")
        @Override
        public void onReceive(Context context, Intent intent) {

            String action = intent.getAction();
            writer = ActionConfig.writer;

            fileHelper.fileWriter("BroadcastReceiver ActionName : " + action, writer);
            System.out.println("BroadcastReceiver ActionName : " + action);


            if (action.equals(GpsLocationService.str_receiver)) {
                try {
                    if (ut_dialog.dialogone != null) {
                        dialogShow = false;
                        ut_dialog.dialogone.dismiss();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                latitude = Double.valueOf(intent.getStringExtra("latutide"));
                longitude = Double.valueOf(intent.getStringExtra("longitude"));

                if (latitude != null && longitude != null) {
                    fileHelper.fileWriter("executeQuery Query : " + "INSERT INTO CustVisit(CustNo, TransNo, TransType, AgentId, Longitude, Latitude, Status, Remarks, TransDate, uploaded) VALUES ('','" + ut_sp.getStringValue(SQL_TRANSDOCNO) + "','GPS-LOC','','" + longitude + "','" + latitude + "','','GPS-LOC','" + sDatepicker + sTimepicker + "',1)", writer);

                    da_dynamics.executeQuery("INSERT INTO CustVisit(CustNo, TransNo, TransType, AgentId, Longitude," +
                            " Latitude, Status, Remarks, TransDate, uploaded)" +
                            " VALUES ('','" + ut_sp.getStringValue(SQL_TRANSDOCNO) + "','GPS-LOC','','"
                            + longitude + "','" + latitude + "','','GPS-LOC','"
                            + sDatepicker + sTimepicker + "',1)");

                    Toast.makeText(getApplicationContext(), "Lat: " + latitude + ", " +
                            "Lng: " + longitude, Toast.LENGTH_SHORT).show();
                }

            } else if (BluetoothDevice.ACTION_FOUND.equals(action)) {

                if (!targetDeviceAddress.isEmpty()) {
                    BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);

                    System.out.println("Bluetooth device address : " + device.getAddress());
                    System.out.println("Target device address : " + targetDeviceAddress);
                    System.out.println("Bluetooth device : " + device.getName());
                    if (device.getAddress().equals(targetDeviceAddress)) {
                        deviceFound = true;
                        Log.d(TAG, "Target Bluetooth device is available: " + device.getName());
                        unregisterReceiver(broadcastReceiver);
                    }

                } else {

//                    try {
//                        if (ut_dialog.dialogone != null) {
//                            dialogShow = false;
//                            ut_dialog.dialogone.dismiss();
//                        }
//                    } catch (Exception e) {
//                        e.printStackTrace();
//                    }

//                    if (scandialog != null && !scandialog.isShowing()) {
//                        scandialog = new Dialog(MainActivity.this);
//                        scandialog.setContentView(R.layout.loading_dialog);
//                        scandialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
//                        scandialog.setCancelable(true);
//                        scandialog.setCanceledOnTouchOutside(false);
//                        scandialog.getWindow().getAttributes().windowAnimations = R.style.animation;
//                        scandialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);
//                        scandialog.show();
//                    } else if (scandialog == null) {
//                        scandialog = new Dialog(MainActivity.this);
//                        scandialog.setContentView(R.layout.loading_dialog);
//                        scandialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
//                        scandialog.setCancelable(true);
//                        scandialog.setCanceledOnTouchOutside(false);
//                        scandialog.getWindow().getAttributes().windowAnimations = R.style.animation;
//                        scandialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);
//                        scandialog.show();
//                    }

                    try {

                        BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                        fileHelper.fileWriter("executeQuery Query : " + "insert into tbl_printbluetooth(PrintDeviceName, MACAddress)values ('" + device.getName() + "','" + device.getAddress() + "')", writer);
                        deviceArrayList.add(device);

                        if (device.getName() == null) {
                            da_dynamics.executeQuery("insert into tbl_printbluetooth(PrintDeviceName, MACAddress)values" +
                                    " ('Unknown','" + device.getAddress() + "')");
                        } else {
                            da_dynamics.executeQuery("insert into tbl_printbluetooth(PrintDeviceName, MACAddress)values" +
                                    " ('" + device.getName() + "','" + device.getAddress() + "')");
                        }

                        executeActionConfig(bluetoothFieldName, AN_FindBluetoothEnd, "");

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

            } else if (action.equalsIgnoreCase(BluetoothAdapter.ACTION_DISCOVERY_FINISHED)) {
                if (deviceArrayList != null && !deviceArrayList.isEmpty()) {
                    for (BluetoothDevice device : deviceArrayList) {
                        if (device.getName() == null) {
                            da_dynamics.executeQuery("insert into tbl_printbluetooth(PrintDeviceName, MACAddress)values" +
                                    " ('Unknown','" + device.getAddress() + "')");
                        } else {
                            da_dynamics.executeQuery("insert into tbl_printbluetooth(PrintDeviceName, MACAddress)values" +
                                    " ('" + device.getName() + "','" + device.getAddress() + "')");
                        }
                    }
                    if (scandialog != null && scandialog.isShowing()) {
                        scandialog.dismiss();
                    }
                    executeActionConfig(bluetoothFieldName, AN_FindBluetoothEnd, "");

                }
            } else if (action.equals("REFRESH_DATA")) {
                try {
                    if (ut_dialog.dialogone != null) {
                        dialogShow = false;
                        ut_dialog.dialogone.dismiss();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                String FieldName = intent.getStringExtra("FieldName");
                String POSTURL = intent.getStringExtra("POSTURL");

                DataSyncBackground dataSyncBackground = new DataSyncBackground(MainActivity.this, FieldName, POSTURL, da_queryConfig, ut_common, formValues, fileHelper);
                dataSyncBackground.doSyncProcess();

            } else if (action.equals(Intent.ACTION_BATTERY_CHANGED)) {
                try {
                    int level = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, 0);

                    String query = "Update SystemList SET SystemValue='" + level + "' WHERE Code='BatteryLevel'";
                    da_dynamics.executeQuery(query);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    if (ut_dialog.dialogone != null) {
                        dialogShow = false;
                        ut_dialog.dialogone.dismiss();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }


                for (int i = 0; i < broadcast.size(); i++) {
                    if (broadcast.get(i).ActionName.equals(action)) {
                        if (action.equals("device.scanner.EVENT")) {
                            String decodeValue = "";
                            try {
                                int decodeBytesLength = intent.getIntExtra("EXTRA_EVENT_DECODE_LENGTH", 0);
                                byte[] decodeBytesValue = intent.getByteArrayExtra("EXTRA_EVENT_DECODE_VALUE");
                                decodeValue = new String(decodeBytesValue, 0, decodeBytesLength);

                                Log.d("Friend", decodeValue);

                                Toast.makeText(getApplicationContext(), decodeValue + "", Toast.LENGTH_SHORT).show();
                                fileHelper.fileWriter("BroadcastReceiver contents : " + decodeValue, writer);

                                formValues.put(SQL_Broadcast, decodeValue);

                                executeActionConfig("", AN_scannedBarcodeData, "");

                            } catch (Exception e) {
                                e.printStackTrace();
                                fileHelper.fileWriter("BroadcastReceiver Exception : " + e.getLocalizedMessage(), writer);

                            }
                        } else {

                            String actionValue = intent.getStringExtra(broadcast.get(i).ExtraString.trim());

                            if (actionValue.startsWith("{")) {
                                try {
                                    Toast.makeText(getApplicationContext(), actionValue + "", Toast.LENGTH_SHORT).show();
                                    fileHelper.fileWriter("BroadcastReceiver contents : " + actionValue, writer);

                                    JSONObject object = new JSONObject(actionValue);
                                    Iterator<String> iterator = object.keys();

                                    while (iterator.hasNext()) {
                                        String keyValue = iterator.next();
                                        formValues.put(keyValue.toUpperCase(), object.get(keyValue).toString());
                                    }

                                    System.out.println("formValues : " + formValues);

                                    executeActionConfig("", AN_scannedJsonBarcodeData, "");

                                } catch (JSONException e) {
                                    throw new RuntimeException(e);
                                }


                            } else if (actionValue.contains("_")) {

                                String[] tempval = actionValue.split("_");
                                for (int i2 = 0; i2 < tempval.length; i2++) {
                                    formValues.put(SQL_BroadScanCode + "_" + i2, tempval[i2]);
                                }

                                String contents = intent.getStringExtra(broadcast.get(i).ExtraString.trim());

                                Toast.makeText(getApplicationContext(), contents + "", Toast.LENGTH_SHORT).show();

                                fileHelper.fileWriter("BroadcastReceiver contents : " + contents, writer);

                                executeActionConfig("", AN_scannedBarcodeDataNew, "");
                            } else {

                                System.out.println(broadcast.get(i).ExtraString + " :: " + actionValue);
                                fileHelper.fileWriter(broadcast.get(i).ExtraString + " :: " + actionValue, writer);


                                String contents = intent.getStringExtra(broadcast.get(i).ExtraString.trim());

                                Toast.makeText(getApplicationContext(), contents + "", Toast.LENGTH_SHORT).show();

                                System.out.println("BroadcastReceiver contents : " + contents);
                                fileHelper.fileWriter("BroadcastReceiver contents : " + contents, writer);

                                formValues.put(SQL_Broadcast, contents);

                                executeActionConfig("", AN_scannedBarcodeData, "");
                            }
                        }
                    }
                }
            }

        }
    };


    private void downloadURL() {
        String appVersionCode = "AppVersion";

        DA_SystemList da_systemList = new DA_SystemList(this);
        BE_SystemList systemList = da_systemList.getSystemList(appVersionCode);
        if (!systemList.SystemValue.equals(systemVersionValue)) {
            String upgradeURLCode = "NewVersionURL";
            BE_SystemList newVersionURL = da_systemList.getSystemList(upgradeURLCode);
            String UpdateURL = newVersionURL.SystemValue;

            upgradeAppTask(UpdateURL);
        }

    }

    ProgressDialog pDialogDownload;

    private void progressState() {
        pDialogDownload = new ProgressDialog(this, R.style.MyCustomDialogStyle);
        pDialogDownload.setMessage("Updating your app Please wait...");
        pDialogDownload.setIndeterminate(true);
        pDialogDownload.setMax(100);
        pDialogDownload.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
        pDialogDownload.setCancelable(false);

    }

    private void upgradeAppTask(String upgradeURL) {
        verifyStoragePermissions(this);
        progressState();
        UpdateClass appInstaller = new UpdateClass(MainActivity.this);
        //  appInstaller.setContext(getApplicationContext());
        appInstaller.execute(upgradeURL);

        Log.d("New APP URL----------->", upgradeURL);
    }

    public void verifyStoragePermissions(MainActivity activity) {
        // Check if we have write permission
        int permission = ActivityCompat.checkSelfPermission(activity, Manifest.permission.WRITE_EXTERNAL_STORAGE);

        if (permission != PackageManager.PERMISSION_GRANTED) {
            // We don't have permission so prompt the user
            ActivityCompat.requestPermissions(
                    activity,
                    PERMISSIONS_STORAGE,
                    REQUEST_EXTERNAL_STORAGE
            );
        }
    }

    private static final int REQUEST_EXTERNAL_STORAGE = 1;

    private static String[] PERMISSIONS_STORAGE = {
            Manifest.permission.READ_EXTERNAL_STORAGE,
            Manifest.permission.WRITE_EXTERNAL_STORAGE
    };

    @SuppressLint("ResourceAsColor")
    @SuppressWarnings("unchecked")
    public void initActivity(LinearLayout formContent, String screen) {
        ut_view = new UT_View(this);
        ut_sp = new UT_SystemConfig(this);
        ut_common = new UT_Common(this);
        ut_dialog = new UT_AlertDialog(this);
        ut_dateTime = new UT_DateTime();
        ut_time = new UT_DateTime();
        ut_image = new UT_Image(this, ASSET_SIMG_FILES, fileHelper);

        da_queryConfig = new DA_QueryConfig(this);
        da_dynamics = new DA_Dynamics(this);
        da_dynamics_syscon = new DA_Dynamics_syscon(this);
        onListClick = null;
        onListLongClick = null;

        listPage = 0;
        allLoad = false;
        allLoadChild = false;

        readSettings();
        readConstants();


        Log.v("Res SyncURl++", ut_sp.getStringValue("writer"));

        ut_sp.setStringValue(UT_Constants.AN_PHOTORETAKEN, "0");

        int dashboardcell = (int) getResources().getDimension(R.dimen.dashboardcell);
        int dashboardIcon = (int) getResources().getDimension(R.dimen.dashboardImage);

        dashboardcell = (int) (getResources().getDimension(R.dimen.dashboardcell) / getResources().getDisplayMetrics().density);
        dashboardcell = dashboardcell * displayRatio;

        System.out.println("dashboardImage 1 : " + getResources().getDimension(R.dimen.dashboardImage));
        System.out.println("density : " + getResources().getDisplayMetrics().density);
        System.out.println("displayRatio : " + displayRatio);

        dashboardImage = (int) (190 / getResources().getDisplayMetrics().density);
        dashboardImage = dashboardImage * displayRatio;

        cellWidth = dashboardcell;
        cellHeight = dashboardcell;

        iconWidth = dashboardIcon;
        iconHeight = dashboardIcon;

        System.out.println("dashboardImage 2 : " + dashboardImage);

        iconWidth = dashboardImage;
        iconHeight = dashboardImage;


        DisplayMetrics displayMetrics = getResources().getDisplayMetrics();
        float dpHeight = displayMetrics.heightPixels / displayMetrics.density;
        float dpWidth = displayMetrics.widthPixels / displayMetrics.density;

        System.out.println("dpHeight : " + dpHeight);
        System.out.println("dpWidth : " + dpWidth);

        System.out.println("iconWidth 1 : " + iconWidth);
        System.out.println("iconHeight 1 : " + iconHeight);

        //{---TODO move this at application startup
        //read parsed parameters
        //TODO replace these!

        pageName = intent.getStringExtra(IN_PAGE_NAME);
        paramScreenName = intent.getStringExtra(IN_PARAM_SCREENS);
        parameters = (ArrayList<BE_Parameters>) intent.getSerializableExtra(IN_PARAMETERS);
        paramFormValues = (HashMap<String, String>) intent.getSerializableExtra(IN_PARAM_FORM);
        paramSelectedListValues = (HashMap<String, String>) intent.getSerializableExtra(IN_PARAM_LIST);
        System.out.println("paramSelectedListValues : " + paramSelectedListValues);
        finalselectvalues = (ArrayList<HashMap<String, String>>) intent.getSerializableExtra(IN_PARAM_LIST_FINAL);
        formValues = new HashMap<>();
        arrCountrefresh = new HashMap<Integer, Integer>();
        MapLatLongRtn = new ArrayList<BE_MapLatLong>();
        //   formValues.put("PASSWORD","1233");
        selectedListValues = new HashMap<>();
        mlistConfigs = new ArrayList<>();

        appVersionCheck();

        if (screen == null || screen.equals("")) {
            screen = DASHBOARD;   //Customers, CustomerInfo, Dashboard
        }
        //  screen = "Form-CuT";
        System.out.println("initActivity screen : " + screen);

        fileHelper.fileWriter("initActivity screen : " + screen, writer);

        if (pageName == null || pageName.equals("")) {
            pageName = MAIN_PAGE;  //MAIN
        }
        if (parameters == null) {
            parameters = new ArrayList<>();
        }
        if (paramFormValues == null) {
            paramFormValues = new HashMap<>();
        }
        if (paramSelectedListValues == null) {
            paramSelectedListValues = new HashMap<>();
        }
        if (language == null || language.equals("")) {
            language = "English";
        }

        accessFolder = false;

        readActionConfig(screen);
        readMenuConfig();
        readMessageConfig();
        initHeader();


        //Main Content goes here
        DA_FormConfig da_formConfig = new DA_FormConfig(this);
        formConfigs = da_formConfig.getFormConfigs(screen, language);
        printConfigs = da_formConfig.getPrintConfigs(screen, language);   // Used only for Print

        String name = screen;

        queryFormConfig = da_queryConfig.getQueryConfig(name + "_FORM");


        System.out.println("queryFormConfig : " + queryFormConfig);

        //List config
        da_listConfig = new DA_ListConfig(this);
        listConfigs = da_listConfig.getListConfigs(screen, language, screenWidth);
        printListConfig = da_listConfig.getPrintListConfigs(screen + "_ListView", language, screenWidth);

        // Search config
        DA_SearchConfig da_searchConfig = new DA_SearchConfig(this);
        searchConfigs = da_searchConfig.getSearchConfigs(name, language);
        if (!searchConfigs.isEmpty()) {
            serachViewflag = true;
        }

        // Work Flow
        try {
            DA_WorkFlowConfig da_WorkFlow = new DA_WorkFlowConfig(this);
            workFlowConfigs = da_WorkFlow.getWorkFlowConfig(name, ut_sp.getStringValue(SP_ACCESS_LEVEL));
        } catch (Exception e) {
            e.printStackTrace();
        }

        //GridFunctions
        da_gridFunctions = new DA_GridFunctions(this);
        gridFunctions = da_gridFunctions.getGridFunctions(name, ut_sp.getStringValue(SP_ACCESS_LEVEL), language);


        //Functions .....To find the DesignType for Listconfig
        da_Functions = new DA_Functions(this);
        Functions = da_Functions.getFunctions(name);
        if (hasWindowPreparingToOpen) {
            executeActionConfig("", AN_WINDOWPREPARINGTOOPEN, "");
        }

        if (hasWindowOpened) {
            executeActionConfig("", AN_WINDOWOPENED, "");
        }

        // Color config
        if (!listConfigs.isEmpty()) {
            DA_ColorConfig da_colorConfig = new DA_ColorConfig(this);
            colorConfigs = da_colorConfig.getColorConfigs(name);
        }

        firstLoad = true;
        // Get Current Date and Time
        final Calendar c = Calendar.getInstance();
        mYear = c.get(Calendar.YEAR);
        mMonth = c.get(Calendar.MONTH);
        mDay = c.get(Calendar.DAY_OF_MONTH);
        int monthInt = mMonth + 1;
        String monthConverted = "" + monthInt;
        if (monthInt < 10) {
            monthConverted = "0" + monthConverted;
        }

        String dayConverted = "" + mDay;
        if (mDay < 10) {
            dayConverted = "0" + dayConverted;
        }

        sDatepicker = mYear + "-" + monthConverted + "-" + dayConverted;
        mHour = c.get(Calendar.HOUR_OF_DAY);
        mMinute = c.get(Calendar.MINUTE);
        mSec = c.get(Calendar.SECOND);
        sTimepicker = mHour + ":" + mMinute + ":" + mSec;

        DA_System da_System = new DA_System(this);

        if (XML_SOLUTION_NAME.equals("WMS")) {
            system = da_System.getBESystems();
        } else {
            system = da_System.getBESystems2();
        }

        if (!system.isEmpty()) {
            DateFormmat = system.get(0).DateFormatString;
            TimeFormat = system.get(0).TimeFormatString;
            DateTimeFormat = system.get(0).DateTimeFormatString;
            QtyRoundingDigits = system.get(0).QtyRoundingDigits;
            PriceRoundingDigits = system.get(0).PriceRoundingDigits;
            AmountRoundingDigits = system.get(0).AmountRoundingDigits;
            MDTNO = system.get(0).PDAID;
            FixedLot = system.get(0).FixedLot;
            //    IMEIno = system.get(0).IMEINo;
            ut_sp.setStringValue(SQL_MDTNO, MDTNO);
            ut_sp.setStringValue(SP_IMEIno, MDTNO);
        }

        ut_sp.setStringValue(SP_sumCount, "0");


        multiLineIndex = false;

        for (BE_ListConfig listConfig : listConfigs) {
            if (listConfig.LineIndex.contains(".")) {
                multiLineIndex = true;
                break;
            }
        }

        if (customView == null) {
            customView = new CustomView(this, heightRatio, fontsize, screenWidth, typeFace, screen, fileHelper, writer);
        } else {
            customView.setScreen(screen);
        }

        if (screen.equals("Configuration")) {

            if (Build.VERSION.SDK_INT >= 31) {
                String[] permission = new String[2];
                permission[0] = Manifest.permission.BLUETOOTH_SCAN;
                permission[1] = Manifest.permission.BLUETOOTH_CONNECT;
                int blueToothPermission = ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN);

                if (blueToothPermission != PackageManager.PERMISSION_GRANTED) {
                    // We don't have permission so prompt the user
                    ActivityCompat.requestPermissions(
                            this, permission, REQUEST_BLUETOOTH);
                } else {
                    fileHelper.fileWriter("executeQuery Query : " + "delete from tbl_PrintBluetooth", writer);
                    da_dynamics.executeQuery("delete from tbl_PrintBluetooth");
                    broadcast = da_dynamics.getBroadcast();

                    BluetoothAdapter BA = BluetoothAdapter.getDefaultAdapter();
                    BA.startDiscovery();
                    IntentFilter filter = new IntentFilter();
                    if (broadcast.isEmpty()) {
                        filter.addAction(BluetoothDevice.ACTION_FOUND);
                    } else {
                        for (int i = 0; i < broadcast.size(); i++) {
                            filter.addAction(broadcast.get(i).ActionName);
                        }

                    }
//                    filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);
//                    filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
                    filter.setPriority(100);
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                        registerReceiver(broadcastReceiver, filter, Context.RECEIVER_NOT_EXPORTED);
                    } else {
                        registerReceiver(broadcastReceiver, filter);
                    }
                }
            } else {
                fileHelper.fileWriter("executeQuery Query : " + "delete from tbl_PrintBluetooth", writer);
                da_dynamics.executeQuery("delete from tbl_PrintBluetooth");
                broadcast = da_dynamics.getBroadcast();

                BluetoothAdapter BA = BluetoothAdapter.getDefaultAdapter();
                BA.startDiscovery();
                IntentFilter filter = new IntentFilter();
                if (broadcast.isEmpty()) {
                    filter.addAction(BluetoothDevice.ACTION_FOUND);

                } else {
                    for (int i = 0; i < broadcast.size(); i++) {
                        filter.addAction(broadcast.get(i).ActionName);
                    }

                }
                filter.setPriority(100);

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                    registerReceiver(broadcastReceiver, filter, Context.RECEIVER_NOT_EXPORTED);
                } else {
                    registerReceiver(broadcastReceiver, filter);
                }
            }
        } else {
            broadcast = da_dynamics.getBroadcast();

            IntentFilter filter = new IntentFilter();
            if (broadcast.isEmpty()) {
                filter.addAction(BluetoothDevice.ACTION_FOUND);
            } else {
                for (int i = 0; i < broadcast.size(); i++) {
                    filter.addAction(broadcast.get(i).ActionName);
                }
            }
//            filter.addAction(Intent.ACTION_BATTERY_CHANGED);
            filter.setPriority(100);

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                registerReceiver(broadcastReceiver, filter, Context.RECEIVER_NOT_EXPORTED);
            } else {
                registerReceiver(broadcastReceiver, filter);
            }
        }


        Dialog opendialog = new Dialog(MainActivity.this);
        opendialog.setContentView(R.layout.loading_dialog);
        opendialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        opendialog.setCancelable(true);
        opendialog.setCanceledOnTouchOutside(false);
        opendialog.getWindow().getAttributes().windowAnimations = R.style.animation;
        opendialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);
        opendialog.show();


        String finalScreen2 = screen;

        Disposable d = Single.timer((long) 200, TimeUnit.MILLISECONDS)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(ignored -> {
                    System.out.println("listConfigs main: " + listConfigs);

                    String finalScreen = finalScreen2;

                    if (!listConfigs.isEmpty()) {
                        if (finalScreen2.equals("Survey Summary") || finalScreen2.equals("Survey Summary_LIGHT")) {
                            surveycount = 0;
                            surveyValue = new HashMap<>();
                            surveySummary = new ArrayList<>();
                            surveyRadioGroup = new ArrayList<>();
                            surveylistconfig = new SurveyListconfigcustom(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper, surveyValue, surveySummary, surveyRadioGroup);
                            initSurvey("Survey Summary");

                        } else if (finalScreen2.equals("FORM-MDTLIST") || finalScreen2.equals("MDT") || finalScreen2.equals("FORM-MDTLIST_LIGHT") || finalScreen2.equals("MDT_LIGHT")) {
                            progressBar.setVisibility(View.VISIBLE);
                            String finalScreen1 = finalScreen2;
                            Disposable d2 = Single.timer((long) 3, TimeUnit.SECONDS)
                                    .subscribeOn(Schedulers.io())
                                    .observeOn(AndroidSchedulers.mainThread())
                                    .subscribe(ignored2 -> {
                                        if (!listConfigs.isEmpty()) {
                                            queryListConfig = da_queryConfig.getQueryConfig(finalScreen);
                                            listConfigQuery = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                                            fileHelper.fileWriter("ListConfig Query " + listConfigQuery, writer);
                                            Log.d("ListConfig Query main 1 ", listConfigQuery);

                                            initListView(finalScreen);
                                        }
                                    });
                            disposables.add(d2);

                        } else {

                            if (!finalScreen2.contains("Sales Summary") && !finalScreen2.contains("NewCustomer-View")) {
                                queryListConfig = da_queryConfig.getQueryConfig(finalScreen);
                                listConfigQuery = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                                fileHelper.fileWriter("listConfigQuery " + listConfigQuery, writer);
                                Log.d("ListConfig Query main 2 ", listConfigQuery);

                                if (!listConfigQuery.isEmpty()) {
                                    initListView(finalScreen);
                                }
                            }

                        }
                    }

                    if (!listConfigs.isEmpty()) {
                        initFormContent(formContent, formConfigs, queryFormConfig, true, finalScreen2);
                        initListConfigHeader(listConfigHeader, listConfigs, scrollView, listConfigView);
                        setToggleListener();
                    } else {
                        initFormContent(formContent, formConfigs, queryFormConfig, false, finalScreen2);
                        listConfigContainer.setVisibility(View.GONE);
                        toggleBtn.setVisibility(View.GONE);
                    }

                    Disposable d2 = Single.timer((long) 500, TimeUnit.MILLISECONDS)
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe(ignored2 -> {
                                try {
                                    if (opendialog.isShowing()) {
                                        opendialog.dismiss();
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                            });

                    disposables.add(d2);


                });

        disposables.add(d);


        String goodQty = da_dynamics.getGoodQty();
        System.out.println("goodQty : " + goodQty);


        if (screen.equals("Payment Summary") || screen.equals("Payment Summary_LIGHT") || screen.equals("Def_Summary") || screen.equals("Def_Summary_LIGHT")) {
            executeActionConfig("", AN_HIDINGUI, "");
        }

        System.out.println("Startlocationstream : " + Startlocationstream);
        if (Startlocationstream) {
            distancelocationCallback = new LocationCallback() {
                @Override
                public void onLocationResult(@NonNull LocationResult locationResult) {
                    for (Location location : locationResult.getLocations()) {
                        updateDistanceTolist(location);
                    }
                }
            };
        }

        try {
            Disposable da = Single.timer((long) 1, TimeUnit.SECONDS)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(ignored -> {
                        if (IntentParamRoot != null) {
                            if (IntentParamRoot.equalsIgnoreCase("ALARM")) {
                                finish();
                            }
                        }
                    });

            disposables.add(da);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public void initSurvey(String screen) {

        DA_Survey da_survey = new DA_Survey(this);
        queryListConfig = da_queryConfig.getQueryConfig(screen);
        listConfigQuery = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

        ArrayList<BE_SurveyConfig> surveyFormID = da_survey.getSurveyConfigs(listConfigQuery.replace("Order by FormId", "AND FormId = " + surveycount + " "));

        Log.d("Survey surveyFormID", surveyFormID.size() + "");
        Log.d("Survey surveycount", surveycount + "");
        Log.d("Survey listConfigQuery", listConfigQuery + "");

        if (surveyFormID.isEmpty()) {
            fileHelper.fileWriter("Survey ListConfig Query : " + listConfigQuery, writer);
            Log.d("Survey ListConfig Query", listConfigQuery);

            listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);
            surveylistconfig.SurveyListconfigSumary(screen, surveycount, customView, scrollView, surveyConfigs, listConfigValues, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding);
            if (finishSurvey) {
                summeryfinishAlert();
            } else {
                finishSurvey = true;
            }

        } else if (surveycount >= 0) {
//            listConfigQuery = listConfigQuery + ",Xpos";
            listConfigQuery = listConfigQuery.replace("Order by FormId", "AND FormId = " + surveycount + " ");
            surveyConfigs = da_survey.getSurveyConfigs(listConfigQuery);

            Log.d("c", screen);
            surveyConfigs2 = da_survey.getSurveyConfigs2(surveyConfigs.get(0).ThemeName);
            fileHelper.fileWriter("Survey ListConfig Query : " + listConfigQuery, writer);

            Log.d("Survey ListConfig Query", listConfigQuery);
            Log.d("surveyConfigs", "" + surveyConfigs);

            ArrayList<BE_SurveyConfig> surveyConfigArrayList = new ArrayList<>();

            for (int i = 0; i < surveyConfigs.size(); i++) {

                if (surveyConfigs.get(i).PanelName.isEmpty()) {

                    surveyConfigArrayList.add(surveyConfigs.get(i));
                    String controlName = surveyConfigs.get(i).ControlName;

                    for (int a = 0; a < surveyConfigs.size(); a++) {
                        if (surveyConfigs.get(a).PanelName.equals(controlName)) {
                            surveyConfigArrayList.add(surveyConfigs.get(a));
                        }
                    }
                }
            }

            listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);
            surveylistconfig.SurveyListconfigcustoms(screen, surveycount, customView, scrollView, surveyConfigArrayList, listConfigValues, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding, surveyConfigs2, heightRatio);

        }

        qrScanner.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });


    }

    private void summeryfinishAlert() {

        Dialog dialog = new Dialog(this);
        dialog.setContentView(R.layout.dialog_two_buttons);
        dialog.setCancelable(true);
        dialog.setCanceledOnTouchOutside(false);
        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));


        TextView title = dialog.findViewById(R.id.dialog_two_buttons_title);
        TextView text = dialog.findViewById(R.id.dialog_two_buttons_text);
        MaterialButton dialog_two_buttons_positive = dialog.findViewById(R.id.dialog_two_buttons_positive);
        MaterialButton dialog_two_buttons_negative = dialog.findViewById(R.id.dialog_two_buttons_negative);

        title.setText("Survey Summary");
        text.setText("Do you want to save?");
        dialog_two_buttons_positive.setText("YES");
        dialog_two_buttons_negative.setText("NO");

        dialog_two_buttons_positive.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                surveylistconfig.uploadData(MainActivity.this);
                finishSurvey = false;
                dialog.dismiss();
                finish();
            }
        });
        dialog_two_buttons_negative.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });
        dialog.show();
    }

    private void readConstants() {
        //   listLimit = LIST_LIMIT;
        toggleHeight = (100 * displayRatio);
        footerHeight = (48 * displayRatio);
    }

    @Override
    protected void onStart() {
        super.onStart();
        System.out.println("START SCREEN NAME : " + screen);

    }

    private void readSettings() {
        screenHeight = ut_sp.getIntValue(SP_CONTENT_HEIGHT);
        screenWidth = ut_sp.getIntValue(SP_CONTENT_WIDTH);

        displayRatio = ut_sp.getIntValue(SP_DISPLAY_RATIO);
        textRatio = ut_sp.getIntValue(SP_TEXT_RATIO);
        heightRatio = ut_sp.getFloatValue(SP_SCREEN_HEIGHT_RATIO);
        widthRatio = ut_sp.getFloatValue(SP_SCREEN_WIDTH_RATIO);


        contentPadding = ut_sp.getIntValue(SP_CONTENT_PADDING);
        textPadding = ut_sp.getIntValue(SP_TEXT_PADDING);
        formLineHeight = ut_sp.getIntValue(SP_FORM_LINE_HEIGHT);
        layoutLineHeight = ut_sp.getIntValue(SP_LAYOUT_LINE_HEIGHT);
        language = ut_sp.getStringValue(SP_LANGUAGE);
        fontsize = ut_sp.getStringValue("SYSTEM.FONTRATIO");
//        System.out.println("fontsize : "+fontsize);
        //fontsize = "0.255";
    }

    private void readMenuConfig() {
        menuonListItemclick.clear();
        menuFooterIcons.clear();
        mainMenuvalue.clear();

        String name = screen;


        DA_MenuConfig da_menuConfig = new DA_MenuConfig(this);
        menuConfigs = da_menuConfig.getMenuconfig(name, language, ut_sp.getStringValue(SP_ACCESS_LEVEL));

        if (!menuConfigs.isEmpty()) {
            for (int i = 0; i < menuConfigs.size(); i++) {

                if (menuConfigs.get(i).Popup == 1) {
                    menuonListItemclick.add(menuConfigs.get(i).MenuDisplayText);
                }

                if (menuConfigs.get(i).IsIcon == 1) {
                    menuFooterIcons.add(menuConfigs.get(i).IconImage);
                    menuFooterIcons_DisplayText.add(menuConfigs.get(i).MenuDisplayText);
                    mainMenuCode.add(menuConfigs.get(i).MenuCode);
                }

                if (menuConfigs.get(i).Popup == 0 && menuConfigs.get(i).IsIcon == 0) {
                    mainMenuvalue.add(menuConfigs.get(i).MenuDisplayText);
                }

            }

            if (!mainMenuvalue.isEmpty()) {
                MainmenuEnable = true;
                invalidateOptionsMenu();
            }


            if (!menuFooterIcons.isEmpty()) {
                fabMenu.setVisibility(View.VISIBLE);
                MainMenuconfig mainMenu = new MainMenuconfig();
                mainMenu.getMenuFooterIcon(MainActivity.this, fabAction, menuFooterIcons, menuFooterIcons_DisplayText, mainMenuCode, fileHelper);

                fabMenu.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        if (fabExpanded) {
                            closeSubMenusFab();
                        } else {
                            openSubMenusFab();
                        }
                    }
                });
                //Only main FAB is visible in the beginning
                closeSubMenusFab();

                footerContent.setVisibility(View.GONE);
                screenHeight = screenHeight + footerHeight;
            }

        } else {
            fabMenu.setVisibility(View.GONE);
            footerContent.setVisibility(View.GONE);
        }

    }

    //closes FAB submenus
    public void closeSubMenusFab() {
        EnableLL(formContent);
        EnableLL(listConfigView);
        formContent.setAlpha(1.0f);
        listConfigView.setAlpha(1.0f);

        fabMenu.setVisibility(View.VISIBLE);
        fabAction.setVisibility(View.INVISIBLE);
        fabMenu.setImageResource(android.R.drawable.ic_input_add);
        fabExpanded = false;
    }

    //Opens FAB submenus
    public void openSubMenusFab() {
        disableLL(formContent);
        disableLL(listConfigView);
        formContent.setAlpha(0.5f);
        listConfigView.setAlpha(0.5f);

        fabMenu.setVisibility(View.VISIBLE);
        fabAction.setVisibility(View.VISIBLE);
        //Change settings icon to 'X' icon
        fabMenu.setImageResource(R.drawable.ic_close_black_24dp);
        fabExpanded = true;
    }

    private void disableLL(ViewGroup layout) {
        layout.setEnabled(false);


        for (int i = 0; i < layout.getChildCount(); i++) {
            View child = layout.getChildAt(i);
            if (child instanceof ViewGroup) {
                disableLL((ViewGroup) child);
            } else {
                child.setEnabled(false);
            }
        }
    }

    private void EnableLL(ViewGroup layout) {
        layout.setEnabled(true);

        for (int i = 0; i < layout.getChildCount(); i++) {
            View child = layout.getChildAt(i);
            if (child instanceof ViewGroup) {
                EnableLL((ViewGroup) child);
            } else {
                child.setEnabled(true);
            }
        }
    }

    private void readActionConfig(String screen) {

        String name = screen;

        DA_ActionConfig da_actionConfig = new DA_ActionConfig(this);
        actionConfigs = da_actionConfig.getActionConfigs(name, ut_sp.getStringValue(SP_ACCESS_LEVEL));
        actionConfigQueries = da_queryConfig.getActionConfigQueries(name, ut_sp.getStringValue(SP_ACCESS_LEVEL));

        hasRowItemClicked = false;
        hasFormRowItemClicked = false;
        hasRowItemLongPress = false;
        hasWindowActivated = false;


        for (BE_ActionConfig config : actionConfigs) {
//            Log.d("config.ActionName", config.ActionName);
            if (config.ActionName.equalsIgnoreCase(AN_ROWITEMCLICKED)) {
                hasRowItemClicked = true;
            } else if (config.ActionName.equalsIgnoreCase(AN_FORMROWITEMCLICKED)) {
                hasFormRowItemClicked = true;
            } else if (config.ActionName.equalsIgnoreCase(AN_ROWITEMDOUBLECLICKED)) {
                hasRowItemDoubleClicked = true;
            } else if (config.ActionName.equalsIgnoreCase(AN_ROWITEMLONGPRESS)) {
                hasRowItemLongPress = true;
            } else if (config.ActionName.equalsIgnoreCase(AN_WINDOWACTIVATED)) {
                hasWindowActivated = true;
            } else if (config.ActionName.equalsIgnoreCase(AN_WINDOWPREPARINGTOOPEN)) {
                hasWindowPreparingToOpen = true;
            } else if (config.ActionName.equals(AN_WINDOWOPENED)) {
                hasWindowOpened = true;
            }

        }


    }

    private void readMessageConfig() {
        String name = screen;

        DA_MessageConfig da_messageConfig = new DA_MessageConfig(this);
        messageConfigs = da_messageConfig.getMessageConfigs(name, language);


        SharedPreferences sharedPreferences = getApplicationContext().getSharedPreferences("MESSAGECONFIG", Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sharedPreferences.edit();

        Gson gson = new Gson();
        String json = gson.toJson(messageConfigs);

        editor.putString("MESSAGECONFIG", json);
        editor.commit();
        editor.apply();

    }

    private void DownloadTransConfig(String screenName) {
        da_transConfig = new DA_DownloadTransconfig(this);
        transconfig = da_transConfig.getTransconfig(screenName);
    }

    public void fn_permission() {
        if ((ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED)) {

            if ((ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this, Manifest.permission.ACCESS_FINE_LOCATION))) {

            } else {
                ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION

                        },
                        REQUEST_PERMISSIONS);

            }
        } else {
            boolean_permission = true;
        }
    }

    public void initUI(LinearLayout formContent, String screen) {

        formScrollView = (NestedScrollView) findViewById(R.id.formScrollView);

        formScrollView.setOnScrollChangeListener((NestedScrollView.OnScrollChangeListener) (v, scrollX, scrollY, oldScrollX, oldScrollY) -> {
            if (scrollY > oldScrollY && fabMenu.isShown()) {
                hideViews();
            } else {
                //fabMenu.show();
                showViews();
            }
        });

        listConfigContainer = (HorizontalScrollView) findViewById(R.id.listConfigContainer);
        headerTitle = (TextView) findViewById(R.id.headerTitle);

        ll_menuConfig = (LinearLayout) findViewById(R.id.ll_menuConfig);
        footerContent = (LinearLayout) findViewById(R.id.footerContent);


        toggleBtn = (ToggleButton) findViewById(R.id.toggleBtn);
        scFilterLayout = (ChipGroup) findViewById(R.id.scFilterLayout);
        mainContent = (LinearLayout) findViewById(R.id.mainContent);
        customScreen = (LinearLayout) findViewById(R.id.customScreen);

        fabMenu = (FloatingActionButton) findViewById(R.id.fabMenu);
        fabAction = (LinearLayout) findViewById(R.id.fabAction);


        String limitValue = da_deviceSystemList.getDeviceSystemValue("select SystemValue from DeviceSystemList where Code = 'PaginationLimit'");
        if (limitValue == null || limitValue.isEmpty()) {
            limitValue = da_systemList.getSystemValue("select SystemValue from SystemList where Code = 'PaginationLimit'");
        }
        if (limitValue != null) {
            if (limitValue.isEmpty()) {
                listLimit = 12;
                listLimitChild = 12;
            } else {
                listLimit = parseInt(limitValue);
                listLimitChild = parseInt(limitValue);
            }
        } else {
            listLimit = 12;
            listLimitChild = 12;
        }

    }


    private void setToggleListener() {
        final LinearLayout ll_Form_Toggle = (LinearLayout) findViewById(R.id.ll_Form_Toggle);
        toggleBtn.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                HorizontalScrollView listConfigContainer = (HorizontalScrollView) findViewById(R.id.listConfigContainer);
                if (screen.equalsIgnoreCase("Form-AddItem")) {
                }
                if (isChecked) {
                    listConfigContainer.setVisibility(View.GONE);
                    ll_Form_Toggle.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));
                    formScrollView.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, (int) (screenHeight - (toggleHeight / displayRatio))));
                } else {

                    listConfigContainer.setVisibility(View.VISIBLE);
                    formScrollView.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, proportionHeight));
                    ll_Form_Toggle.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                }
            }
        });
    }


    private void initHeader() {

        header = ut_sp.getStringValue(SP_APP_NAME);
        if (header.equals("")) {

            DA_SystemList da_systemList = new DA_SystemList(this);
            BE_SystemList systemList = da_systemList.getSystemList(APP_NAME);
            ut_sp.setStringValue(SP_APP_NAME, systemList.SystemValue);
            header = systemList.SystemValue;
        }


        //TODO assign button_red search, next, save
    }


    public void doBackButton(View view, String back) {
        if (view != null) {
            if (screen.equals("Survey Summary") && surveySummary.contains(view.getTag().toString())) {
                String pos = "";
                for (int i = 0; i < surveySummary.size(); i++) {
                    if (surveySummary.get(i).getQuestion().equals(view.getTag().toString())) {
                        surveycount -= surveycount - i;
                    }
                }
                formIDfs = true;
                formID = surveycount + "";
                initSurvey(screen);
            }

        } else if (screen.equals("Survey Summary") && surveycount != 0) {
            finishSurvey = false;
            surveycount -= 1;
            formIDfs = true;
            formID = surveycount + "";
            initSurvey(screen);
        } else if (screen.contains("FORM-LOGIN")) {
            finishAffinity();
        } else {
            if (calendarEvent) {
                calendarEvent = false;
                dailyCalendarLayout.setVisibility(View.GONE);
                monthlyCalendar.setVisibility(View.VISIBLE);
                createCalendarView2();
            } else {

                if (accessFolder) {
                    String[] temp = pageName.split("-");
                    pageName = "";
                    for (int i = 0; i < temp.length - 1; i++) {
                        pageName += temp[i];
                    }

                    Log.d("PREV PAGE NAME", pageName);

                    if (!pageName.contains("-")) {
                        accessFolder = false;
                    }
                    bCancel = false;
                    if (!bCancel) {
                        bCancel = true;
                        executeActionConfig("", AN_initBackButtonClick, "");
                        Log.v("Res bcancel 2", "" + bCancel);
                    }
                    refreshDashBoard();

                } else {
                    bCancel = false;
                    if (!bCancel && back.equalsIgnoreCase("BACK")) {
                        bCancel = false;
                        executeActionConfig("", AN_initBackButtonClick, "");
                        Log.v("Res bcancel 1", "" + bCancel);
                    } else {
                        bCancel = true;
                        executeActionConfig("", AN_initBackButtonClick, "");
                        Log.v("Res bcancel 3", "" + bCancel);
                    }
                }
            }
        }
    }

    public void doNextButton(View view) {

        executeActionConfig("", AN_INITNEXTBUTTONCLICK, "");

    }

    @Override
    public boolean onSupportNavigateUp() {
        return super.onSupportNavigateUp();


    }

    @SuppressLint("MissingSuperCall")
    @Override
    public void onBackPressed() {
//        super.onBackPressed();
        System.out.println("onBackPressed Called ");
        doBackButton(null, "BACK");
    }


    @Override
    public void onResume() {
        super.onResume();


        int currentOrientation = getResources().getConfiguration().orientation;
        openstatus = false;

        if (currentOrientation != lastOrientation) {
            lastOrientation = currentOrientation;
        }


        if (isUserTimedOut) {
            //show TimerOut dialog
            // showTimedOutWindow("Time Out!", this);
        } else {
            ((TimeOutApp) getApplication()).onUserInteracted();
        }

        if (!hasStack(screen).contains(screen)) {
            finish();
            overridePendingTransition(0, 0);
        }

        if (ut_sp == null) {
            ut_sp = new UT_SystemConfig(this);
        }

        if (ut_sp.getStringValue(UT_Constants.AN_PHOTORETAKEN).equals("0")) {
            listPage = 0;
        }


        allLoad = false;
        allLoadChild = false;
        if (firstLoad) {
            firstLoad = false;
        } else {
            if (hasWindowActivated) {
                Log.d("onResume", "window activated called");
                finalselectvalues = new ArrayList<HashMap<String, String>>();
                finalselectvalues2 = new ArrayList<HashMap<String, String>>();

                if (!previousScreenName.toUpperCase().equals("PriceSurvey".toUpperCase())) {
                    String ssName = ut_sp.getStringValue(SP_BACK_SCREENNAME);

                    String[] namelist = ssName.split(",");
                    boolean back = false;
                    for (String s : namelist) {
                        if (screen.equalsIgnoreCase(s.trim())) {
                            back = true;
                            break;
                        }
                    }

                    if (!ssName.isEmpty()) {
                        if (!back) {

                            broadcast = da_dynamics.getBroadcast();
                            if (!broadcast.isEmpty()) {
                                IntentFilter filter = new IntentFilter();
                                for (int i = 0; i < broadcast.size(); i++) {
                                    filter.addAction(broadcast.get(i).ActionName);
                                }
                                filter.setPriority(100);

                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                                    registerReceiver(broadcastReceiver, filter, Context.RECEIVER_NOT_EXPORTED);
                                } else {
                                    registerReceiver(broadcastReceiver, filter);
                                }

                            }
                            System.out.println("screen : " + screen);
                            ut_sp.setStringValue(IN_SCREEN_NAME, screen);
                            executeActionConfig("", AN_WINDOWACTIVATED, "");
                        }
                    } else {

                        broadcast = da_dynamics.getBroadcast();
                        if (!broadcast.isEmpty()) {
                            IntentFilter filter = new IntentFilter();
                            for (int i = 0; i < broadcast.size(); i++) {
                                filter.addAction(broadcast.get(i).ActionName);
                            }
                            filter.setPriority(100);

                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                                registerReceiver(broadcastReceiver, filter, Context.RECEIVER_NOT_EXPORTED);
                            } else {
                                registerReceiver(broadcastReceiver, filter);
                            }

                        }

                        System.out.println("screen : " + screen);
                        ut_sp.setStringValue(IN_SCREEN_NAME, screen);
                        ut_sp.setStringValue(SP_BACK_SCREENNAME, "");
                        executeActionConfig("", AN_WINDOWACTIVATED, "");
                    }
                }

            }
        }
        allowClick = true;
        actionPerformed = false;


        if (mPrintService != null) {
            // Only if the state is STATE_NONE, do we know that we haven't started already
            if (mPrintService.getState() == BluetoothPrintService.STATE_NONE) {
                // Start the Bluetooth print services
                mPrintService.start();
            }
        }

        if (SolutionName.equals("SALES")) {
            if (nextDisable) {
                item_next.setVisible(true);
            }
        }

        try {
            if (banner) {
                viewpageHandler.postDelayed(viewpageRunnable, 10000);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);
        } else {
            if (Startlocationstream) {
                distancefusedLocationClient.requestLocationUpdates(distancelocationRequest, distancelocationCallback, Looper.getMainLooper());
            }
        }

    }


    private void showFloatingView() {
        startService(new Intent(getApplicationContext(), FloatingViewService.class));
    }


    private boolean checkPermissions() {
        return ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED;
    }


    @SuppressLint("NewApi")
    private void initFormContent(LinearLayout
                                         formContent, ArrayList<BE_FormConfig> formConfigs, BE_QueryConfig queryFormConfig,
                                 boolean isWithListConfig, String screen) {


        if (formContent != null) {
            formContent.removeAllViews();
        }

        System.out.println("queryFormConfig :: " + queryFormConfig);

        String formQuery = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
        fileHelper.fileWriter("FormConfig Query : " + formQuery, writer);

        Log.d("FormConfig Query", formQuery);

        formValues = new HashMap<>();
        formSpinners = new HashMap<>();
        if (!formQuery.isEmpty()) {
            formValues = da_dynamics.getFormConfigValues(formQuery);
            System.out.println("formValues :: " + formValues);
        }

        /*
            If there is ListConfig,
            up to 60% of content area is reserved for FormConfig,
            otherwise all the content area is reserved for FormConfig
         */

        if (isWithListConfig) {
            int formContentHeight = 0;

            proportionHeight = (int) (MAX_FORM_HEIGHT_PROPORTION * screenHeight - toggleHeight);
            String prevDisplayNo = "";

            for (BE_FormConfig config : formConfigs) {
                String[] currentDisplayNo = config.DisplayNo.split("[.]"); //DisplayNo Example: 1, 2, 3.1, 3.2, 3.3, 4.1, 4.2, 5
                if (prevDisplayNo.isEmpty() || !prevDisplayNo.equals(currentDisplayNo[0])) {
                    prevDisplayNo = currentDisplayNo[0];
                    formContentHeight += Math.max(config.HeaderHeight, config.ValueHeight) * heightRatio;
                }

                if (config.DisplayNo.contains(".")) {
                    multiDisplayNo = true;
                }
            }
            formScrollView.setScrollBarFadeDuration(0);

            if (formContentHeight > proportionHeight) {
                formScrollView.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, proportionHeight));
            } else {
                toggleBtn.setVisibility(View.GONE);
            }

        } else {
            for (BE_FormConfig config : formConfigs) {
                if (config.DisplayNo.contains(".")) {
                    multiDisplayNo = true;
                    break;
                }
            }
        }
        System.out.println("Formconfig  Started ----  ");
        banner = false;
        if (screen.equalsIgnoreCase("Replenishment-RAD")) {
            NextmenuDisable = false;
            saveEnable = true;
            invalidateOptionsMenu();
            reimageupload = false;
            screenNameText.setText("Replenishment");
            mainContent.setVisibility(View.GONE);
            customScreen.setVisibility(View.VISIBLE);
            customScreen(screen, formContent, formValues);
        } else {
            customScreen.setVisibility(View.GONE);
            mainContent.setVisibility(View.VISIBLE);
            if (multiDisplayNo) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
                    initFormContentMultiDisplayNo(formContent, formConfigs, formValues, screen);
                }
            } else {
                initFormContentLinear(formContent, formConfigs, formValues, screen);
            }
        }

        executeActionConfig("", AN_FORMIMAGEUPDATE, "");

    }

    private void customScreen(String screen, LinearLayout formContent, HashMap<String, String> formValues) {

        customImageOne = findViewById(R.id.customImageOne);
        cbuttonone = findViewById(R.id.cbuttonone);
        customImageTwo = findViewById(R.id.customImageTwo);
        cbuttonTwo = findViewById(R.id.cbuttonTwo);
        customImageThree = findViewById(R.id.customImageThree);
        cbuttonThree = findViewById(R.id.cbuttonThree);
        customImageFour = findViewById(R.id.customImageFour);
        cbuttonFour = findViewById(R.id.cbuttonFour);

        formValues.put("ImgId".toUpperCase(), "1");

        String query = "select ImageName as filename, 'BEFORE_1' as Location from ReplenishmentImages where " +
                "location ='BEFORE_1' and Custno = (select SystemValue from Systemlist where code ='CustomerID')" +
                " UNION select ImageName as filename, 'BEFORE_2' as Location  from ReplenishmentImages where " +
                "location ='BEFORE_2' and Custno = (select SystemValue from Systemlist where code ='CustomerID')" +
                " UNION select ImageName as filename, 'AFTER_1' as Location  from ReplenishmentImages where" +
                " location ='AFTER_1' and Custno = (select SystemValue from Systemlist where code ='CustomerID')" +
                " UNION select ImageName as filename, 'AFTER_2' as Location  from ReplenishmentImages where " +
                "location ='AFTER_2' and Custno = (select SystemValue from Systemlist where code ='CustomerID') " +
                "and date(ResultDate)=date('now','Localtime')";

        ArrayList<ReplanModel> forms = da_dynamics.getFormConfigValuesRe(query);


        if (forms.size() > 0) {
            for (int i = 0; i < forms.size(); i++) {

                try {
                    if (forms.get(i).getLocation().equalsIgnoreCase("BEFORE_1")) {
                        imageNameone = forms.get(i).getFilename();
                        SalesDirectory1 = new File(fileHelper.getSalesDirectoryPath() + "/Photo/" + forms.get(i).getFilename());
                        bitmapone = BitmapFactory.decodeFile(String.valueOf(SalesDirectory1));

                        if (bitmapone == null) {
                            SalesDirectory1 = new File(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + forms.get(i).getFilename());
                            bitmapone = BitmapFactory.decodeFile(String.valueOf(SalesDirectory1));
                            if (bitmapone == null) {
                                SalesDirectory1 = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + forms.get(i).getFilename());
                                bitmapone = BitmapFactory.decodeFile(String.valueOf(SalesDirectory1));
                            }
                        }

                        before1 = true;
                        reimageupload = true;
                        customImageOne.setImageBitmap(bitmapone);
                    } else if (forms.get(i).getLocation().equalsIgnoreCase("BEFORE_2")) {
                        imageNametwo = forms.get(i).getFilename();

                        SalesDirectory2 = new File(fileHelper.getSalesDirectoryPath() + "/Photo/" + forms.get(i).getFilename());
                        bitmaptwo = BitmapFactory.decodeFile(String.valueOf(SalesDirectory2));

                        if (bitmaptwo == null) {
                            SalesDirectory2 = new File(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + forms.get(i).getFilename());
                            bitmaptwo = BitmapFactory.decodeFile(String.valueOf(SalesDirectory2));
                            if (bitmaptwo == null) {
                                SalesDirectory2 = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + forms.get(i).getFilename());
                                bitmaptwo = BitmapFactory.decodeFile(String.valueOf(SalesDirectory2));
                            }
                        }

                        before2 = true;
                        reimageupload = true;
                        customImageTwo.setImageBitmap(bitmaptwo);

                    } else if (forms.get(i).getLocation().equalsIgnoreCase("AFTER_1")) {
                        imageNamethree = forms.get(i).getFilename();

                        SalesDirectory3 = new File(fileHelper.getSalesDirectoryPath() + "/Photo/" + forms.get(i).getFilename());

                        bitmapthree = BitmapFactory.decodeFile(String.valueOf(SalesDirectory3));
                        if (bitmapthree == null) {
                            SalesDirectory3 = new File(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + forms.get(i).getFilename());
                            bitmapthree = BitmapFactory.decodeFile(String.valueOf(SalesDirectory3));
                            if (bitmapthree == null) {
                                SalesDirectory3 = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + forms.get(i).getFilename());
                                bitmapthree = BitmapFactory.decodeFile(String.valueOf(SalesDirectory3));
                            }
                        }
                        after1 = true;
                        reimageupload = true;
                        customImageThree.setImageBitmap(bitmapthree);
                    } else if (forms.get(i).getLocation().equalsIgnoreCase("AFTER_2")) {
                        imageNamefour = forms.get(i).getFilename();

                        SalesDirectory4 = new File(fileHelper.getSalesDirectoryPath() + "/Photo/" + forms.get(i).getFilename());

                        bitmapfour = BitmapFactory.decodeFile(String.valueOf(SalesDirectory4));
                        if (bitmapfour == null) {
                            SalesDirectory4 = new File(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + forms.get(i).getFilename());
                            bitmapfour = BitmapFactory.decodeFile(String.valueOf(SalesDirectory4));
                            if (bitmapfour == null) {
                                SalesDirectory4 = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + forms.get(i).getFilename());
                                bitmapfour = BitmapFactory.decodeFile(String.valueOf(SalesDirectory4));
                            }

                        }

                        after2 = true;
                        reimageupload = true;
                        customImageFour.setImageBitmap(bitmapfour);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        customImageOne.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (before1) {
                    replenishimagedialog(bitmapone, "BEFORE_1", SalesDirectory1);
                } else {
                    formValues.put("Location".toUpperCase(), "BEFORE_1");

                    HashMap<String, String> rtn = new HashMap<>();
                    String screenSignature = screen + "_MultiPhoto_SAVEPHOTO";
                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                    String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                    System.out.println("NameQuery : " + query);
//                    fileHelper.fileWriter("getFormConfigValues Query : " + query, writer);
                    rtn = da_dynamics.getFormConfigValues(query);
                    if (!rtn.isEmpty()) {
                        formCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                        formValues.put("IMAGEONE", formCameraFilename);
                    }

                    photosavepath = "PHOTO";
                    startCamera("IMAGEONE", formCameraFilename);

                }
            }
        });

        customImageTwo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (before2) {
                    replenishimagedialog(bitmaptwo, "BEFORE_2", SalesDirectory2);
                } else {
                    formValues.put("Location".toUpperCase(), "BEFORE_2");

                    HashMap<String, String> rtn = new HashMap<>();
                    String screenSignature = screen + "_MultiPhoto_SAVEPHOTO";
                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                    String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                    System.out.println("NameQuery : " + query);
//                    fileHelper.fileWriter("getFormConfigValues Query : " + query, writer);
                    rtn = da_dynamics.getFormConfigValues(query);
                    if (rtn.size() > 0) {
                        formCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                        formValues.put("IMAGETWO", formCameraFilename);
                    }

                    photosavepath = "PHOTO";
                    startCamera("IMAGETWO", formCameraFilename);
                }
            }
        });

        customImageThree.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (after1) {
                    replenishimagedialog(bitmapthree, "AFTER_1", SalesDirectory3);
                } else {
                    formValues.put("Location".toUpperCase(), "AFTER_1");

                    HashMap<String, String> rtn = new HashMap<>();
                    String screenSignature = screen + "_MultiPhoto_SAVEPHOTO";
                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                    String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                    System.out.println("NameQuery : " + query);
//                    fileHelper.fileWriter("getFormConfigValues Query : " + query, writer);
                    rtn = da_dynamics.getFormConfigValues(query);
                    if (rtn.size() > 0) {
                        formCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                        formValues.put("IMAGETHREE", formCameraFilename);
                    }

                    photosavepath = "PHOTO";
                    startCamera("IMAGETHREE", formCameraFilename);
                }
            }
        });
        customImageFour.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (after2) {
                    replenishimagedialog(bitmapfour, "AFTER_2", SalesDirectory4);
                } else {
                    formValues.put("Location".toUpperCase(), "AFTER_2");

                    HashMap<String, String> rtn = new HashMap<>();
                    String screenSignature = screen + "_MultiPhoto_SAVEPHOTO";
                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                    String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                    System.out.println("NameQuery : " + query);
//                    fileHelper.fileWriter("getFormConfigValues Query : " + query, writer);
                    rtn = da_dynamics.getFormConfigValues(query);
                    if (rtn.size() > 0) {
                        formCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                        formValues.put("IMAGEFOUR", formCameraFilename);
                    }

                    photosavepath = "PHOTO";
                    startCamera("IMAGEFOUR", formCameraFilename);
                }
            }
        });


    }

    public void replenishimagedialog(Bitmap bitmapImage, String root, File filepath) {
        ut_dialog.ShowPopup(MainActivity.this, new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (root.equals("BEFORE_1")) {
                    formValues.put("Location".toUpperCase(), "BEFORE_1");

                    HashMap<String, String> rtn = new HashMap<>();
                    String screenSignature = screen + "_MultiPhoto_SAVEPHOTO";
                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                    String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                    System.out.println("NameQuery : " + query);
                    fileHelper.fileWriter("NameQuery : " + query, writer);
                    rtn = da_dynamics.getFormConfigValues(query);
                    if (rtn.size() > 0) {
                        formCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                        formValues.put("IMAGEONE", formCameraFilename);
                    }

                    photosavepath = "PHOTO";
                    startCamera("IMAGEONE", formCameraFilename);
                } else if (root.equals("BEFORE_2")) {
                    formValues.put("Location".toUpperCase(), "BEFORE_2");

                    HashMap<String, String> rtn = new HashMap<>();
                    String screenSignature = screen + "_MultiPhoto_SAVEPHOTO";
                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                    String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                    System.out.println("NameQuery : " + query);
//                    fileHelper.fileWriter("NameQuery Query : " + query, writer);
                    rtn = da_dynamics.getFormConfigValues(query);
                    if (rtn.size() > 0) {
                        formCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                        formValues.put("IMAGETWO", formCameraFilename);
                    }

                    photosavepath = "PHOTO";
                    startCamera("IMAGETWO", formCameraFilename);
                } else if (root.equals("AFTER_1")) {
                    formValues.put("Location".toUpperCase(), "AFTER_1");

                    HashMap<String, String> rtn = new HashMap<>();
                    String screenSignature = screen + "_MultiPhoto_SAVEPHOTO";
                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                    String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                    System.out.println("NameQuery : " + query);
//                    fileHelper.fileWriter("NameQuery Query : " + query, writer);
                    rtn = da_dynamics.getFormConfigValues(query);
                    if (rtn.size() > 0) {
                        formCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                        formValues.put("IMAGETHREE", formCameraFilename);
                    }

                    photosavepath = "PHOTO";
                    startCamera("IMAGETHREE", formCameraFilename);
                } else if (root.equals("AFTER_2")) {
                    formValues.put("Location".toUpperCase(), "AFTER_2");

                    HashMap<String, String> rtn = new HashMap<>();
                    String screenSignature = screen + "_MultiPhoto_SAVEPHOTO";
                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                    String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                    System.out.println("NameQuery : " + query);
//                    fileHelper.fileWriter("NameQuery Query : " + query, writer);
                    rtn = da_dynamics.getFormConfigValues(query);
                    if (rtn.size() > 0) {
                        formCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                        formValues.put("IMAGEFOUR", formCameraFilename);
                    }

                    photosavepath = "PHOTO";
                    startCamera("IMAGEFOUR", formCameraFilename);
                }

                ut_dialog.popupWindow.dismiss();

            }
        }, new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (root.equals("BEFORE_1")) {
                    bitmapone = null;
                    before1 = false;
                    String query = "Delete from ReplenishmentImages where ImageName='" + imageNameone + "'";
                    da_dynamics.executeQuery(query);
                    customImageOne.setImageDrawable(getApplicationContext().getResources().getDrawable(R.drawable.upload_photo));
                } else if (root.equals("BEFORE_2")) {
                    bitmaptwo = null;
                    before2 = false;
                    String query = "Delete from ReplenishmentImages where ImageName='" + imageNametwo + "'";
                    da_dynamics.executeQuery(query);
                    customImageTwo.setImageDrawable(getApplicationContext().getResources().getDrawable(R.drawable.upload_photo));
                } else if (root.equals("AFTER_1")) {
                    bitmapthree = null;
                    after1 = false;
                    String query = "Delete from ReplenishmentImages where ImageName='" + imageNamethree + "'";
                    da_dynamics.executeQuery(query);
                    customImageThree.setImageDrawable(getApplicationContext().getResources().getDrawable(R.drawable.upload_photo));
                } else if (root.equals("AFTER_2")) {
                    bitmapfour = null;
                    after2 = false;
                    String query = "Delete from ReplenishmentImages where ImageName='" + imageNamefour + "'";
                    da_dynamics.executeQuery(query);
                    customImageFour.setImageDrawable(getApplicationContext().getResources().getDrawable(R.drawable.upload_photo));
                }
                if (filepath != null) {
                    if (filepath.exists()) {
                        filepath.delete();
                    }
                }
                ut_dialog.popupWindow.dismiss();

            }
        }, new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ut_dialog.popupWindow.dismiss();
            }
        }, bitmapImage);

    }


    public int DesigchangeIdentity = 0;

    private void initFormContentLinear(LinearLayout formContent, ArrayList<BE_FormConfig> formConfigs, HashMap<String, String> formValues, String screen) {

        for (BE_FormConfig config : formConfigs) {

            System.out.println("FieldControl : " + config.FieldControl);

            if (!config.FieldControl.equalsIgnoreCase(FC_TAB)) {
                tabload = false;
            }

            if (config.FieldControl.equalsIgnoreCase(FC_BACKGROUND)) {
                if (config.HBackColor == -1.0) {
                    DesigchangeIdentity = 1;
                } else {
                    DesigchangeIdentity = 0;
                }
                mainContent.setBackgroundColor(Color.parseColor(ut_common.translateColor(config.HBackColor)));

            } else if (config.FieldControl.equalsIgnoreCase(FC_BACKGROUNDIMAGE)) {
                if (config.DefaultValue.contains(".simg") || config.DefaultValue.contains(".png") || config.DefaultValue.contains(".jpg") || config.DefaultValue.contains(".jpeg")) {

                    File SalesDirectory = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/Images/" + config.DefaultValue);
                    Bitmap bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory));
                    BitmapDrawable background = new BitmapDrawable(getResources(), bitmap);
                    mainContent.setBackground(background);

                }
            } else if (config.FieldControl.equalsIgnoreCase(FC_LABEL)) {
                createFormContentLabel(formContent, config, formValues.get(config.FieldName.toUpperCase()));

            } else if (config.FieldControl.equalsIgnoreCase(FC_VERTICALLINE)) {
                createFormContentLine(formContent, config);

            } else if (config.FieldControl.equalsIgnoreCase(FC_BUTTON)) {
                createFormContentButton(formContent, config, formValues.get(config.FieldName.toUpperCase()));

            } else if (config.FieldControl.equalsIgnoreCase(FC_GRIDBUTTON)) {
                createFormContentGButton(MainActivity.this, formContent, config, formValues.get(config.FieldName.toUpperCase()));

            } else if (config.FieldControl.equalsIgnoreCase(FC_LISTBUTTON)) {
                createFormContentLButton(MainActivity.this, formContent, config, formValues.get(config.FieldName.toUpperCase()));

            } else if (config.FieldControl.equalsIgnoreCase(FC_OPTION)) {
                createFormContentOption(formContent, config, formValues.get(config.FieldName.toUpperCase()));

            } else if (config.FieldControl.equalsIgnoreCase(FC_OPTIONGROUP)) {
                createFormContentOption(formContent, config, formValues.get(config.FieldName.toUpperCase()));

            } else if (config.FieldControl.equalsIgnoreCase(FC_DISABLEDOPTION)) {
                createFormContentOption(formContent, config, formValues.get(config.FieldName.toUpperCase()));

            } else if (config.FieldControl.equalsIgnoreCase(FC_PREVIEW)) {
                createFormContentPreview(formContent, config, formValues.get(config.FieldName.toUpperCase()));

            } else if (config.FieldControl.equalsIgnoreCase(FC_IMAGEWITHPREVIEW)) {
                createFormContentImage(formContent, config, formValues.get(config.FieldName.toUpperCase()));

            } else if (config.FieldControl.equalsIgnoreCase(FC_SIGNATURE) || config.FieldControl.equalsIgnoreCase(FC_SIGN) || config.FieldControl.equalsIgnoreCase(FC_PAINT)) {
                createFormContentSignature(formContent, config);

            } else if (config.FieldControl.equalsIgnoreCase(FC_LINE)) {
                createFormContentLine(formContent, config);

            } else if (config.FieldControl.equalsIgnoreCase(FC_COMBO_BOX)) {
                createFormContentComboBox(formContent, config, screen, formValues.get(config.FieldName.toUpperCase()));

            } else if (config.FieldControl.equalsIgnoreCase(FC_MULTICOMBOBOX)) {

                createFormContentMultiComboBox(formContent, config, screen, formValues.get(config.FieldName.toUpperCase()));

            } else if (config.FieldControl.equalsIgnoreCase(FC_IMAGECOMBOBOX)) {
                createFormContentImageComboBox(formContent, config, screen, formValues.get(config.FieldName.toUpperCase()));

            } else if (config.FieldControl.equalsIgnoreCase(FC_TEXTAREA)) {
                customView.createFormContentTextBoxArea(FC_TEXTAREA, formContent, config, formValues.get(config.FieldName.toUpperCase()), new CustomView.Action() {
                    @Override
                    public void execute(String value, String s) {
                        formValues.put(config.FieldName.toUpperCase(), value);
                        System.out.println("formValues : " + formValues);
                        executeActionConfig(config.FieldName, AN_FORMTEXTFIELDCHANGE, "");
                    }
                }, new CustomView.ActionLostFocus() {
                    @Override
                    public void executeLostFocus(String value) {
                        executeActionConfig(config.FieldName, AN_FORMTEXTFIELDLOSTFOCUS, "");
                    }
                });
            } else if (config.FieldControl.equalsIgnoreCase(FC_IMAGE) || config.FieldControl.equalsIgnoreCase(FC_B64IMAGE) || config.FieldControl.equalsIgnoreCase(FC_INTENTVIEW)) {

                createFormContentImage(formContent, config, formValues.get(config.FieldName.toUpperCase()));

            } else if (config.FieldControl.equalsIgnoreCase(FC_DASHBOARD)) {
                createDashBoards(config);

            } else if (config.FieldControl.equalsIgnoreCase(FC_TEXT_BOX)) {
                if (config.ValueHeight > 0 || config.HeaderHeight > 0) {
                    customView.createFormContentTextBox(FC_TEXT_BOX, formContent, config, formValues.get(config.FieldName.toUpperCase()), new CustomView.Action() {
                        @Override
                        public void execute(String value, String s) {
                            formValues.put(config.FieldName.toUpperCase(), value);
                            executeActionConfig(config.FieldName, AN_FORMTEXTFIELDCHANGE, "");
                        }
                    }, new CustomView.ActionLostFocus() {
                        @Override
                        public void executeLostFocus(String value) {
                            Toast.makeText(MainActivity.this, value + " :: ", Toast.LENGTH_SHORT).show();
                            executeActionConfig(config.FieldName, AN_FORMTEXTFIELDLOSTFOCUS, "");
                        }
                    });
                }
            } else if (config.FieldControl.equalsIgnoreCase(FC_LOGINTEXTBOX)) {
                if (config.ValueHeight > 0 || config.HeaderHeight > 0) {
                    customView.createFormContentTextBox(FC_LOGINTEXTBOX, formContent, config, formValues.get(config.FieldName.toUpperCase()), new CustomView.Action() {
                        @Override
                        public void execute(String value, String s) {
                            formValues.put(config.FieldName.toUpperCase(), value);
                            executeActionConfig(config.FieldName, AN_FORMTEXTFIELDCHANGE, "");
                        }
                    }, new CustomView.ActionLostFocus() {
                        @Override
                        public void executeLostFocus(String value) {
                            Toast.makeText(MainActivity.this, value + " :: ", Toast.LENGTH_SHORT).show();
                            executeActionConfig(config.FieldName, AN_FORMTEXTFIELDLOSTFOCUS, "");
                        }
                    });
                }
            } else if (config.FieldControl.equalsIgnoreCase(FC_AUTOCOMPLETE)) {
                createFormContentAutocomplete(formContent, config, formValues.get(config.FieldName.toUpperCase()));

            } else if (config.FieldControl.equalsIgnoreCase(FC_PASSWORD)) {
                customView.createFormContentPassword(formContent, config, formValues.get(config.FieldName.toUpperCase()), new CustomView.Action() {
                    @Override
                    public void execute(String value, String s) {
                        formValues.put(config.FieldName.toUpperCase(), value);
//                        executeActionConfig(config.FieldName, AN_FORMTEXTFIELDLOSTFOCUS, "");
                        executeActionConfig(config.FieldName, AN_FORMTEXTFIELDCHANGE, "");

                    }
                }, new CustomView.ActionLostFocus() {
                    @Override
                    public void executeLostFocus(String value) {
                        executeActionConfig(config.FieldName, AN_FORMGOBUTTONCLICKED, "");

                    }
                });

            } else if (config.FieldControl.equalsIgnoreCase(FC_TAKEPHOTO)) {
                createFormContentCamera(formContent, config);

            } else if (config.FieldControl.equalsIgnoreCase(FC_MULTIPLEPHOTO)) {
                createFormContentMultipleCamera(formContent, config);

            } else if (config.FieldControl.equalsIgnoreCase(FC_MULTIPLEPHOTOGALLERY)) {
                createFormContentGallery(formContent, config);

            } else if (config.FieldControl.equalsIgnoreCase(FC_MULTIPLEPHOTOWITHPREVIEW)) {
                createFormContentMultipleCamera(formContent, config);

            } else if (config.FieldControl.equalsIgnoreCase(FC_RATING)) {
                createFormContentRating(formContent, config);

            } else if (config.FieldControl.equalsIgnoreCase(FC_DATEPICKER)) {

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
                    Calendar calendar = Calendar.getInstance();
                    int mYear = calendar.get(Calendar.YEAR);
                    int mMonth = calendar.get(Calendar.MONTH);
                    int mDay = calendar.get(Calendar.DAY_OF_MONTH);
                    calendar.set(mYear, mMonth, mDay);

                    String value = formValues.get(config.FieldName.toUpperCase());

                    if (config.DataMemberType.toString().equalsIgnoreCase("String") || config.DataMemberType.toString().equalsIgnoreCase("DATETIME")) {


                        SimpleDateFormat format = new SimpleDateFormat(system.get(0).DateTimeFormatString);

                        if (value == null || value.isEmpty()) {
                            value = format.format(calendar.getTime());
                            formValues.put(config.FieldName.toUpperCase(), value);
                        } else {
                            String inputPattern = system.get(0).DateTimeFormatView;
                            String outputPattern = system.get(0).DateTimeFormatString;

                            SimpleDateFormat inputFormat = new SimpleDateFormat(inputPattern);
                            SimpleDateFormat outputFormat = new SimpleDateFormat(outputPattern);

                            Date date = null;

                            try {
                                date = inputFormat.parse(value);
                                value = outputFormat.format(date);
                            } catch (ParseException e) {
                                e.printStackTrace();
                            }
                            formValues.put(config.FieldName.toUpperCase(), value);
                        }
                    } else if (config.DataMemberType.toString().equalsIgnoreCase("DATE")) {

                        try {

                            SimpleDateFormat formatter = new SimpleDateFormat(system.get(0).DateFormatString);

                            if (value == null || value.isEmpty()) {
                                value = formatter.format(Date.parse(String.valueOf(calendar.getTime())));
                            } else {
                                String inputPattern = system.get(0).DateFormatView;
                                String outputPattern = system.get(0).DateFormatString;

                                SimpleDateFormat inputFormat = new SimpleDateFormat(inputPattern);
                                SimpleDateFormat outputFormat = new SimpleDateFormat(outputPattern);

                                Date date = null;

                                try {
                                    date = inputFormat.parse(value);
                                    value = outputFormat.format(date);
                                } catch (ParseException e) {
                                    e.printStackTrace();
                                }
                            }
                            formValues.put(config.FieldName.toUpperCase(), value);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else if (config.DataMemberType.toString().equalsIgnoreCase("TIME")) {
                        SimpleDateFormat formatter = new SimpleDateFormat(system.get(0).TimeFormatString);

                        if (value == null || value.isEmpty()) {
                            String dateString = formatter.format(Date.parse(String.valueOf(calendar.getTime())));
                            formValues.put(config.FieldName.toUpperCase(), dateString);
                        } else {
                            String inputPattern = system.get(0).TimeFormatView;
                            String outputPattern = system.get(0).TimeFormatString;

                            SimpleDateFormat inputFormat = new SimpleDateFormat(inputPattern);
                            SimpleDateFormat outputFormat = new SimpleDateFormat(outputPattern);

                            Date date = null;

                            try {
                                date = inputFormat.parse(value);
                                value = outputFormat.format(date);
                            } catch (ParseException e) {
                                e.printStackTrace();
                            }
                            formValues.put(config.FieldName.toUpperCase(), value);
                        }

                    }

                    customView.createFormContentDatepicker(screen, formContent, config, formValues.get(config.FieldName.toUpperCase()), system, new CustomView.Action() {
                        @Override
                        public void execute(String value, String Fieldname) {
                            formValues.put(config.FieldName.toUpperCase(), value);
                            executeActionConfig(Fieldname, AN_DATEPICKERCLICKED, "");
                        }
                    });
                }

            } else if (config.FieldControl.equalsIgnoreCase(FC_TIMEPICKER)) {
                customView.createFormContentTimepicker(formContent, config, formValues.get(config.FieldName.toUpperCase()), system, new CustomView.Action() {
                    @Override
                    public void execute(String value, String Fieldname) {
                        formValues.put(config.FieldName.toUpperCase(), value);
                        executeActionConfig(Fieldname, AN_TIMEPICKERCLICKED, "");
                    }
                });

            } else if (config.FieldControl.equalsIgnoreCase(FC_LISTVIEW)) {
                listviewFieldName = config.FieldName;
                listInsideForm = true;
                be_formConfig = config;
                createFormContentListView(formContent, config, screen);

            } else if (config.FieldControl.equalsIgnoreCase(FC_EXPANDABLELISTVIEW)) {
                createFormContentExpandableListView(formContent, config);

            } else if (config.FieldControl.equalsIgnoreCase(FC_EXPANDABLELISTEDITABLE)) {
                listInsideForm = true;
                createFormContentExpandableListViewNew(formContent, config);

            } else if (config.FieldControl.equalsIgnoreCase(FC_CHART)) {

                createFormContentChart(screen, formContent, config);

            } else if (config.FieldControl.equalsIgnoreCase(FC_WIDGET)) {
                if (screen.contains("Main")) {
                    if (mainDashboardActivated.equals("MainWidget")) {
                        createFormContentWidget(screen, formContent, config, "MainWidget");
                    } else {
                        createFormContentWidget(screen, formContent, config, "MainWidget_ACTIVATED");
                    }
                } else {
                    createFormContentWidgetNew(screen, formContent, config, "");
                }

            } else if (config.FieldControl.equalsIgnoreCase(FC_CONTAINER)) {
                createFormContainer(formContent, config, screen, formValues);
            } else if (config.FieldControl.equalsIgnoreCase(FC_FORMVIEW)) {
                if (screen.contains("Main")) {
                    if (mainDashboardActivated.equals("MainWidget")) {
                        createFormContentFormView(screen, formContent, config, "MainWidget");
                    } else {
                        createFormContentFormView(screen, formContent, config, "MainWidget_ACTIVATED");
                    }
                } else {
                    createFormContentFormView(screen, formContent, config, "");
                }
            } else if (config.FieldControl.equalsIgnoreCase(FC_CARDVIEW)) {
                createFormContentCardview(formContent, config);
            } else if (config.FieldControl.equalsIgnoreCase(FC_NUMERICUPDOWN)) {
//                createFormContentNumericUpDown(formContent, config);
                createFormContentNumericUpDownNew(formContent, config);
            } else if (config.FieldControl.equalsIgnoreCase(FC_SEARCH)) {
                SearchmenuEnable = true;
                invalidateOptionsMenu();
                createFormContentSearchView(formContent, config, formValues.get(config.FieldName.toUpperCase()));
            } else if (config.FieldControl.equalsIgnoreCase(FC_WEBVIEW)) {
                createFormContentWebview(formContent, config, formValues.get(config.FieldName.toUpperCase()));
            } else if (config.FieldControl.equalsIgnoreCase(FC_STATICVIEWS)) {
                createFormStaticViews(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_MULTIPLEIMAGERATING)) {
                createFormMultipleImageRating(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_PROGRESSBAR)) {
                createFormProgressBar(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_MULTILINE)) {
                createFormMultiLine(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_BUTTONGROUP)) {
                createFormContentButtonGroup(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_MULTIPLEBUTTON)) {
                createFormContentButtonList(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_SWITCH)) {
                createFormContentSwitch(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_MULTIOPTIONLIST) || config.FieldControl.equalsIgnoreCase(FC_COMBOGROUP)) {
                createFormMultiOptionList(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_COVERFLOW)) {
                createFormContentCoverFlow(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_TAB)) {
                createFormContentTabLayout(formContent, config, screen, formConfigs);
            } else if (config.FieldControl.equalsIgnoreCase(FC_CIRCULARVIEWPAREINDICATOR)) {
                createFormContentViewPager(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_ROUTEMAP)) {
                createMapView(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_FORMMAP)) {
                createMapViewSingle(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_MAPPOLYLINE)) {
                createMapPolyView(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_IMAGEWIDGET)) {
                createImageWidget(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_SEEKBAR)) {
                seekBar(formContent, config);
            } else if (config.FieldControl.equalsIgnoreCase(FC_LOGINDATETIME)) {
                createLoginDateTime(formContent, config);
            } else if (config.FieldControl.equalsIgnoreCase(FC_TIMER)) {
                createTimer(formContent, config);
            } else if (config.FieldControl.equalsIgnoreCase(FC_CALENDAR)) {
                Event.eventsList = new ArrayList<>();
                createCalendarView();
            } else if (config.FieldControl.equalsIgnoreCase(FC_STATUSBAR)) {
                listBottomvalue.setVisibility(View.VISIBLE);
                createlistbottomvalue(listBottomvalue, config, formValues.get(config.FieldName.toUpperCase()));
            } else if (config.FieldControl.equalsIgnoreCase(FC_GROUPCHECKBOX)) {
                createGroupCheckBox(formContent, config);
            } else if (config.FieldControl.equalsIgnoreCase(FC_ATTACHFILE)) {
                createFormContentAttachFile(formContent, config);
            } else if (config.FieldControl.equalsIgnoreCase(FC_PAYNOWQR)) {
                createPaynowQR(formContent, config);
            } else if (config.FieldControl.equalsIgnoreCase(FC_BANNER)) {
                createFormContentBanner(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_LABELWITHBG)) {
                createFormLabelWithBg(formContent, config, screen, formValues.get(config.FieldName.toUpperCase()));
            } else if (config.FieldControl.equalsIgnoreCase(FC_TITLE)) {
                createFormTitle(formContent, config, screen, screennametypeface);
            } else if (config.FieldControl.equalsIgnoreCase(FC_BLANK)) {
                createBlank(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_FLOATINGACTIONBUTTON)) {
                createFC_FLOATINGACTIONBUTTON(formContent, config, screen);
            } else if (config.FieldControl.equalsIgnoreCase(FC_PROMTPAYQR)) {
                createPromtPayQR(formContent, config);
            }

        }
        if (titleVisible) {
            screenNameText.setVisibility(View.GONE);
            titleVisible = false;
        } else {
            screenNameText.setVisibility(View.GONE);
        }

        System.out.println("Init FormConfig  Finish ----  ");

        executeActionConfig("", AN_FORMCONFIGEND, "");

    }

    private void createFC_FLOATINGACTIONBUTTON(LinearLayout formContent, BE_FormConfig config, String screen) {
        fabBtn.setVisibility(View.VISIBLE);
        Bitmap bitmap = null;
        if (config.DefaultValue != null && !config.DefaultValue.isEmpty()) {
            if (config.DefaultValue.contains(".simg")) {

                File SalesDirectory = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + config.DefaultValue);
                bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory));
            }

            if (config.DefaultValue.contains(".png") || config.DefaultValue.contains(".jpg") || config.DefaultValue.contains(".jpeg")) {
                File SalesDirectory = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + config.DefaultValue);
                bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory));
            }

            if (bitmap != null) {
                fabBtn.setImageBitmap(bitmap);
            }

        }

        fabBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                executeActionConfig(config.FieldName, AN_FloatingActionButtonClicked, "");
            }
        });

    }

    public void createBlank(LinearLayout formContent, BE_FormConfig config, String screen) {

        int width = (int) (config.HeaderWidth * screenWidth) / 100 + (int) (config.ValueWidth * screenWidth) / 100;

        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.VERTICAL);
        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
        content.setLayoutParams(layoutParams);
        content.setTag(config.FieldName.toUpperCase());

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        TextView label = ut_view.generateBlank(contentHeight, width,
                config.FieldName);

//        content.setBackgroundColor(getResources().getColor(R.color.colorGreen));
//        label.setBackgroundColor(getResources().getColor(R.color.textColor));

        content.addView(label);
        formContent.addView(content);

    }

    public void createPromtPayQR(LinearLayout formContent, BE_FormConfig config) {
        try {
            String UENCODE = da_dynamics.getDeviceSystemValue("select SystemValue from DeviceSystemList where Code = 'UENCODE'");
            if (UENCODE == null || UENCODE.isEmpty()) {
                UENCODE = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'UENCODE'");
            }
            System.out.println("UENCODE : " + UENCODE);

            String QRCODE = da_dynamics.getDeviceSystemValue("select SystemValue from DeviceSystemList where Code = 'QRCode'");
            if (QRCODE == null || QRCODE.isEmpty()) {
                QRCODE = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'QRCode'");
            }

            System.out.println("QRCODE : " + QRCODE);

            int width = (int) Math.round(config.ValueWidth * (screenWidth / 100.0));
            int contentHeight = (int) config.ValueHeight;
            contentHeight = (int) Math.round(contentHeight * heightRatio);

            LinearLayout layout = new LinearLayout(this);
            layout.setLayoutParams(
                    new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,
                            LinearLayout.LayoutParams.WRAP_CONTENT));

            if (config.VAlignment == AL_CENTER) {
                layout.setGravity(Gravity.CENTER);
            } else if (config.VAlignment == AL_LEFT) {
                layout.setGravity(Gravity.LEFT);
            } else if (config.VAlignment == AL_RIGHT) {
                layout.setGravity(Gravity.RIGHT);
            }

            layout.setOrientation(LinearLayout.VERTICAL);
            layout.setBackgroundColor(Color.TRANSPARENT);
            layout.setTag(config.FieldName.toUpperCase());


            ImageView imageView = new ImageView(this);
            imageView.setLayoutParams(new LinearLayout.LayoutParams(width, contentHeight));
            imageView.setTag(config.FieldName.toUpperCase());

            String amout = formValues.get(config.DefaultValue.toUpperCase());
            if (amout == null || amout.isEmpty()) {
                amout = "0";
            }

//        renderQR(UENCODE, amout, "", imageView, width, contentHeight);

            Bitmap qrBMP = QRCode.from(QRCODE)
                    .to(ImageType.PNG)
                    .withSize(width, contentHeight)
                    .bitmap();
            imageView.setImageBitmap(qrBMP);

            layout.addView(imageView);
            formContent.addView(layout);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private void renderQR(String acc_id, String amount, String remark, ImageView imageView, int width, int contentHeight) {
        String pp_acc_id = "";
        String pp_amount = "";
        String pp_chksum = "";

        // process acc_id
        if (acc_id.length() == 15) { // truemoney e-wallet
            pp_acc_id = "0315" + acc_id;
        } else if (acc_id.length() == 13) { // card-id
            pp_acc_id = "0213" + acc_id;
        } else if (acc_id.length() == 10) { // tel-no
            pp_acc_id = "01130066" + acc_id.substring(1);
        } else { // invalid acc_id
            imageView.setImageDrawable(null);
            return;
        }

        // process amount
        if (!amount.isEmpty()) {
            pp_amount = String.format("54%02d%s", amount.length(), amount);
        }

        // build pp string
        String field_29 = "0016A000000677010111" + pp_acc_id;
        String pp_str = "000201010211"
                + "29" + field_29.length() + field_29
                + "5303764"
                + pp_amount
                + "5802TH"
                + "6304";

        // process checksum
        pp_chksum = CRC16.checksum(pp_str);
        pp_str += pp_chksum;


        // render qr bitmap
        Bitmap qrBMP = QRCode.from(pp_str)
                .to(ImageType.PNG)
                .withSize(width, contentHeight)
                .bitmap();

        // if remark, paint into bitmap
        if (!remark.isEmpty()) {
            qrBMP = drawTextToBitmap(this, qrBMP, remark);
        }

        // render bitmap
        imageView.setImageBitmap(qrBMP);
    }

    public Bitmap drawTextToBitmap(Context gContext, Bitmap bitmap, String gText) {
        Resources resources = gContext.getResources();
        float scale = resources.getDisplayMetrics().density;
        Bitmap.Config bitmapConfig =
                bitmap.getConfig();
        if (bitmapConfig == null) {
            bitmapConfig = Bitmap.Config.ARGB_8888;
        }
        bitmap = bitmap.copy(bitmapConfig, true);

        Canvas canvas = new Canvas(bitmap);
        Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
        paint.setColor(Color.rgb(61, 61, 61));
        paint.setTextSize((int) (14 * scale));

        // draw text to the Canvas center
        Rect bounds = new Rect();
        paint.getTextBounds(gText, 0, gText.length(), bounds);
        int x = 0; //(bitmap.getWidth() - bounds.width())/2;
        int y = 45; //(bitmap.getHeight() + bounds.height())/2;

        canvas.drawText(gText, x, y, paint);

        return bitmap;
    }

    public void createPaynowQR(LinearLayout formContent, BE_FormConfig config) {

        int width = (int) Math.round(config.ValueWidth * (screenWidth / 100.0));
        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        LinearLayout layout = new LinearLayout(this);
        layout.setLayoutParams(
                new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,
                        LinearLayout.LayoutParams.WRAP_CONTENT));

        if (config.VAlignment == AL_CENTER) {
            layout.setGravity(Gravity.CENTER);
        } else if (config.VAlignment == AL_LEFT) {
            layout.setGravity(Gravity.LEFT);
        } else if (config.VAlignment == AL_RIGHT) {
            layout.setGravity(Gravity.RIGHT);
        }
        layout.setOrientation(LinearLayout.VERTICAL);
        layout.setBackgroundColor(Color.TRANSPARENT);
        layout.setPadding(0, 0, 10, 0);
        layout.setTag(config.FieldName.toUpperCase());


        WebView webView = new WebView(this);
        webView.setLayoutParams(new LinearLayout.LayoutParams(width, contentHeight));

        int height = contentHeight - 10;

//        webView.setBackgroundColor(Color.TRANSPARENT);
        webView.getSettings().setJavaScriptEnabled(true);
        webView.getSettings().setLoadWithOverviewMode(true);
        webView.getSettings().setUseWideViewPort(true);
        webView.getSettings().setAllowFileAccess(true);
        webView.setTag(config.FieldName.toUpperCase());

        String UENCODE = da_dynamics.getDeviceSystemValue("select SystemValue from  DeviceSystemList where Code = 'UENCODE'");
        String REFNO = da_dynamics.getDeviceSystemValue("select SystemValue from  SystemList where Code = 'PAYMENT'");
        if (REFNO != null) {
            if (REFNO.isEmpty()) {
                REFNO = "''";
            }
        } else {
            REFNO = "''";
        }

        System.out.println("UENCODE : " + UENCODE);
        System.out.println("formvalues : " + formValues);
        if (UENCODE != null) {
            if (!UENCODE.isEmpty()) {
                String data = "<!DOCTYPE html>\n" +
                        "<html lang=\"en\">\n" +
                        "\n" +
                        "<head>\n" +
                        "  <meta charset=\"UTF-8\">\n" +
                        "  <title>Document</title>\n" +
                        "  <meta name=\"viewport\" content=\"width=device-width\">\n" +
                        "</head>\n" +
                        "\n" +
                        "<body onload=\"qrcode(" + formValues.get(config.DefaultValue.toUpperCase()) + ",'" + UENCODE + "','" + REFNO + "')\">\n" +
                        "\n" +
                        "    \n" +
                        "  <div id=\"qrcode\"></div>\n" +
                        "  <script src=\"paynow.js\"></script>\n" +
                        "  <script src=\"qrcode.min.js\"></script>\n" +
                        "  <script>\n" +
                        "\n" +
                        "    function qrcode(amount,uen,refNo){\n" +
                        "        const opts = {\n" +
                        "      uen: uen,//'+6512312312',\n" +
                        "      editable: 0,\n" +
                        "      expiry: '20241231',\n" +
                        "      amount: amount,//1,\n" +
                        "      refNumber: refNo//'ABC123'\n" +
                        "    }\n" +
                        "    const qrstr = generatePayNowStr(opts);\n" +
                        "var qrcode = new QRCode(document.getElementById(\"qrcode\"), {\n" +
                        "text: qrstr,\n" +
                        "width:" + width + ",\n" +
                        "height: " + height + ",\n" +
                        "colorDark : \"#A72585\",\n" +
                        "colorLight : \"#ffffff\",\n" +
                        "correctLevel : QRCode.CorrectLevel.H\n" +
                        "});" +
                        "    }\n" +
                        "    \n" +
                        "  </script>\n" +
                        "</body>\n" +
                        "</html>";
                System.out.println("DATA : " + data);
                webView.loadDataWithBaseURL("file:///android_asset/PayNowQR/paynow.js", data, "text/html", "UTF-8", null);
                layout.addView(webView);
                formContent.addView(layout);
            } else {
                System.out.println("UENCODE is Empty");
            }
        } else {
            System.out.println("UENCODE is Empty");
        }

    }

    public void createGroupCheckBox(LinearLayout formContent, BE_FormConfig config) {

        LinearLayout linearLayout = new LinearLayout(MainActivity.this);
        linearLayout.setOrientation(LinearLayout.VERTICAL);

    }

    public void createlistbottomvalue(LinearLayout listBottomvalue, BE_FormConfig config, String s) {

        String backColor = ut_common.translateColor(config.VBackColor);

        listBottomvalue.setBackgroundColor(Color.parseColor(backColor));

//        listBottomvalue.setBackgroundColor(getResources().getColor(R.color.colorWhite));
        listBottomvalue.setPadding(10, 10, 10, 10);

        TextView textView = new TextView(this);
        textView.setTextColor(getResources().getColor(R.color.colorBlack));
        textView.setPadding(textPadding, textPadding, textPadding, textPadding);
        int contentHeight = config.ValueHeight;
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        int widthPercentage = config.ValueWidth;
        double widthPerPercent = (screenWidth / 100.0);
        int width = (int) Math.round(widthPercentage * widthPerPercent);

        textView.setLayoutParams(new LinearLayout.LayoutParams(width, LinearLayout.LayoutParams.WRAP_CONTENT));
        textView.setTextSize(config.VFontSize);
        textView.setBackgroundColor(Color.parseColor(ut_common.translateColor(config.VBackColor)));


//        String value = config.NewText + " : " + s;
        String value = s;

        if (config.DataMemberType.equals("CURRENCY")) {
            NumberFormat CurrencyFormat = new DecimalFormat("###,###,##0.00");

            DA_System da_system = new DA_System(getApplicationContext());
            String currencySymbol = da_system.getCurrency();

            if (s != null) {
                if (s.isEmpty()) {
                    s = currencySymbol + " 0.00";
                } else {
                    s = CurrencyFormat.format(Double.parseDouble(s));
                    s = currencySymbol + " " + s;
                }
            } else {
                s = currencySymbol + " 0.00";
            }
//            value = config.NewText + " : " + s;
            value = s;
        }
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            textView.setText(Html.fromHtml(value, Html.FROM_HTML_MODE_COMPACT));
        } else {
            textView.setText(Html.fromHtml(value));
        }


        if (config.VAlignment == 0) {
            textView.setGravity(Gravity.CENTER);
        } else if (config.VAlignment == 1) {
            textView.setGravity(Gravity.RIGHT);
        } else if (config.VAlignment == 2) {
            textView.setGravity(Gravity.LEFT);
        }


        textView.setTag(config.FieldName.toUpperCase());

        listBottomvalue.addView(textView);

    }

    public void createCalendarView() {

        loadevent();

        selectedDate = LocalDate.now();

        LocalDate date = LocalDate.now();
        ArrayList<Event> events = Event.eventsForDate(date);

        mainContent.setVisibility(View.VISIBLE);

        calendarLayout.setVisibility(View.VISIBLE);
        monthlyCalendar = findViewById(R.id.monthlyCalendar);
        dailyCalendarLayout = findViewById(R.id.dailyCalendarLayout);

//        if (events.isEmpty()) {

        monthYearTV.setText(monthYearFromDate(selectedDate));
        daysInMonth = daysInMonthArray();

        calendarAdapter = new CalendarAdapter(daysInMonth, MainActivity.this);
        RecyclerView.LayoutManager layoutManager = new GridLayoutManager(getApplicationContext(), 7);
        calendarRecyclerView.setLayoutManager(layoutManager);
        calendarRecyclerView.setAdapter(calendarAdapter);
        calendarAdapter.setOnClickListener(new CalendarAdapter.OnClickListener() {
            @Override
            public void onClick(int position, LocalDate date) {
                Calendar c = Calendar.getInstance();
                SimpleDateFormat date2 = new SimpleDateFormat("yyyy-MM-dd");

                int dateDifference = (int) getDateDiff(new SimpleDateFormat("yyyy-MM-dd"), date + "", date2.format(c.getTime()) + "");

                if (!String.valueOf(dateDifference).contains("-")) {

                    Event.eventsList = new ArrayList<>();
                    selectedDate = date;
                    monthlyCalendar.setVisibility(View.GONE);
                    dailyCalendarLayout.setVisibility(View.VISIBLE);
                    formValues.put("DATE", CalendarUtils.formattedDate(date));
                    eventLayout(monthlyCalendar, dailyCalendarLayout);
                }
            }
        });


//        } else {
//
//            Calendar c = Calendar.getInstance();
//            SimpleDateFormat date2 = new SimpleDateFormat("yyyy-MM-dd");
//            int dateDifference = (int) getDateDiff(new SimpleDateFormat("yyyy-MM-dd"), date + "", date2.format(c.getTime()) + "");
//
//            if (!String.valueOf(dateDifference).contains("-")) {
//
//                Event.eventsList = new ArrayList<>();
//                selectedDate = date;
//                monthlyCalendar.setVisibility(View.GONE);
//                dailyCalendarLayout.setVisibility(View.VISIBLE);
//                formValues.put("DATE", CalendarUtils.formattedDate(date));
//                eventLayout(monthlyCalendar, dailyCalendarLayout);
//            }
//
//        }

        datebackBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (selectedDate.getMonthValue() != LocalDate.now().getMonthValue()) {
                    selectedDate = selectedDate.minusMonths(1);
                    monthYearTV.setText(monthYearFromDate(selectedDate));
                    daysInMonth = daysInMonthArray();
                    CalendarAdapter calendarAdapter = new CalendarAdapter(daysInMonth, MainActivity.this);
                    RecyclerView.LayoutManager layoutManager = new GridLayoutManager(getApplicationContext(), 7);
                    calendarRecyclerView.setLayoutManager(layoutManager);
                    calendarRecyclerView.setAdapter(calendarAdapter);

                    calendarAdapter.setOnClickListener(new CalendarAdapter.OnClickListener() {
                        @Override
                        public void onClick(int position, LocalDate date) {
                            Event.eventsList = new ArrayList<>();
                            selectedDate = date;
                            monthlyCalendar.setVisibility(View.GONE);
                            dailyCalendarLayout.setVisibility(View.VISIBLE);
                            formValues.put("DATE", CalendarUtils.formattedDate(date));
                            eventLayout(monthlyCalendar, dailyCalendarLayout);
                        }
                    });
                } else if ((selectedDate.getMonthValue() == LocalDate.now().getMonthValue()) && (selectedDate.getYear() != LocalDate.now().getYear())) {
                    selectedDate = selectedDate.minusMonths(1);
                    monthYearTV.setText(monthYearFromDate(selectedDate));
                    daysInMonth = daysInMonthArray();
                    CalendarAdapter calendarAdapter = new CalendarAdapter(daysInMonth, MainActivity.this);
                    RecyclerView.LayoutManager layoutManager = new GridLayoutManager(getApplicationContext(), 7);
                    calendarRecyclerView.setLayoutManager(layoutManager);
                    calendarRecyclerView.setAdapter(calendarAdapter);

                    calendarAdapter.setOnClickListener(new CalendarAdapter.OnClickListener() {
                        @Override
                        public void onClick(int position, LocalDate date) {
                            Event.eventsList = new ArrayList<>();
                            selectedDate = date;
                            monthlyCalendar.setVisibility(View.GONE);
                            dailyCalendarLayout.setVisibility(View.VISIBLE);
                            formValues.put("DATE", CalendarUtils.formattedDate(date));
                            eventLayout(monthlyCalendar, dailyCalendarLayout);
                        }
                    });
                }
            }
        });

        datenextBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectedDate = selectedDate.plusMonths(1);
                monthYearTV.setText(monthYearFromDate(selectedDate));
                daysInMonth = daysInMonthArray();
                CalendarAdapter calendarAdapter = new CalendarAdapter(daysInMonth, MainActivity.this);
                RecyclerView.LayoutManager layoutManager = new GridLayoutManager(getApplicationContext(), 7);
                calendarRecyclerView.setLayoutManager(layoutManager);
                calendarRecyclerView.setAdapter(calendarAdapter);

                calendarAdapter.setOnClickListener(new CalendarAdapter.OnClickListener() {
                    @Override
                    public void onClick(int position, LocalDate date) {
                        Event.eventsList = new ArrayList<>();
                        selectedDate = date;
                        monthlyCalendar.setVisibility(View.GONE);
                        dailyCalendarLayout.setVisibility(View.VISIBLE);
                        formValues.put("DATE", CalendarUtils.formattedDate(date));
                        eventLayout(monthlyCalendar, dailyCalendarLayout);
                    }
                });
            }
        });

    }

    private void createCalendarView2() {
        loadevent();

        selectedDate = LocalDate.now();

        mainContent.setVisibility(View.VISIBLE);
        calendarLayout.setVisibility(View.VISIBLE);
        monthlyCalendar = findViewById(R.id.monthlyCalendar);
        dailyCalendarLayout = findViewById(R.id.dailyCalendarLayout);

        monthYearTV.setText(monthYearFromDate(selectedDate));
        daysInMonth = daysInMonthArray();

        calendarAdapter = new CalendarAdapter(daysInMonth, MainActivity.this);
        RecyclerView.LayoutManager layoutManager = new GridLayoutManager(getApplicationContext(), 7);
        calendarRecyclerView.setLayoutManager(layoutManager);
        calendarRecyclerView.setAdapter(calendarAdapter);
        calendarAdapter.setOnClickListener(new CalendarAdapter.OnClickListener() {
            @Override
            public void onClick(int position, LocalDate date) {

                Calendar c = Calendar.getInstance();
                SimpleDateFormat date2 = new SimpleDateFormat("yyyy-MM-dd");

                int dateDifference = (int) getDateDiff(new SimpleDateFormat("yyyy-MM-dd"), date + "", date2.format(c.getTime()) + "");

                if (!String.valueOf(dateDifference).contains("-")) {

                    Event.eventsList = new ArrayList<>();
                    selectedDate = date;
                    monthlyCalendar.setVisibility(View.GONE);
                    dailyCalendarLayout.setVisibility(View.VISIBLE);
                    formValues.put("DATE", CalendarUtils.formattedDate(date));
                    eventLayout(monthlyCalendar, dailyCalendarLayout);
                }
            }
        });


        datebackBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (selectedDate.getMonthValue() != LocalDate.now().getMonthValue()) {
                    selectedDate = selectedDate.minusMonths(1);
                    monthYearTV.setText(monthYearFromDate(selectedDate));
                    daysInMonth = daysInMonthArray();
                    CalendarAdapter calendarAdapter = new CalendarAdapter(daysInMonth, MainActivity.this);
                    RecyclerView.LayoutManager layoutManager = new GridLayoutManager(getApplicationContext(), 7);
                    calendarRecyclerView.setLayoutManager(layoutManager);
                    calendarRecyclerView.setAdapter(calendarAdapter);

                    calendarAdapter.setOnClickListener(new CalendarAdapter.OnClickListener() {
                        @Override
                        public void onClick(int position, LocalDate date) {
                            Event.eventsList = new ArrayList<>();
                            selectedDate = date;
                            monthlyCalendar.setVisibility(View.GONE);
                            dailyCalendarLayout.setVisibility(View.VISIBLE);
                            formValues.put("DATE", CalendarUtils.formattedDate(date));
                            eventLayout(monthlyCalendar, dailyCalendarLayout);
                        }
                    });
                }
            }
        });

        datenextBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectedDate = selectedDate.plusMonths(1);
                monthYearTV.setText(monthYearFromDate(selectedDate));
                daysInMonth = daysInMonthArray();
                CalendarAdapter calendarAdapter = new CalendarAdapter(daysInMonth, MainActivity.this);
                RecyclerView.LayoutManager layoutManager = new GridLayoutManager(getApplicationContext(), 7);
                calendarRecyclerView.setLayoutManager(layoutManager);
                calendarRecyclerView.setAdapter(calendarAdapter);

                calendarAdapter.setOnClickListener(new CalendarAdapter.OnClickListener() {
                    @Override
                    public void onClick(int position, LocalDate date) {
                        Event.eventsList = new ArrayList<>();
                        selectedDate = date;
                        monthlyCalendar.setVisibility(View.GONE);
                        dailyCalendarLayout.setVisibility(View.VISIBLE);
                        formValues.put("DATE", CalendarUtils.formattedDate(date));
                        eventLayout(monthlyCalendar, dailyCalendarLayout);
                    }
                });
            }
        });

    }

    private void eventLayout(LinearLayout monthlyCalendar, LinearLayout dailyCalendarLayout) {

        String appview = "0";
        appview = da_systemList.getSystemValue("select SystemValue from SystemList where Code='Appointment'");

        calendarEvent = true;
        loadevent();
        ImageButton dailyBack = findViewById(R.id.dailyBack);
        TextView monthDayText = findViewById(R.id.monthDayText);
        TextView dayOfWeekTV = findViewById(R.id.dayOfWeekTV);
        ListView hourListView = findViewById(R.id.hourListView);

        monthDayText.setText(CalendarUtils.monthDayFromDate(selectedDate));
        String dayOfWeek = selectedDate.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.getDefault());
        dayOfWeekTV.setText(dayOfWeek);


        hourAdapter = new HourAdapter(MainActivity.this, hourEventList());
        hourListView.setAdapter(hourAdapter);
        String finalAppview = appview;


        hourAdapter.setOnClickListener(new HourAdapter.OnClickListener() {
            @Override
            public void onClick(int position, LocalTime time, ArrayList<Event> events) {
                Calendar c = Calendar.getInstance();
                SimpleDateFormat sdf = new SimpleDateFormat("HH");
                SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd");
                int strDate = parseInt(sdf.format(c.getTime()));

                int dateDifference = (int) getDateDiff(new SimpleDateFormat("yyyy-MM-dd"), selectedDate + "", date.format(c.getTime()) + "");

                if (finalAppview != null) {

                    if (finalAppview.equals("1")) {

//                        System.out.println("position : " + position);

                        if (!events.isEmpty()) {
                            if (position == 3) {
                                openContentDialogList(monthlyCalendar,
                                        dailyCalendarLayout, events);
                            } else {
                                if (events.size() > position) {
                                    selectedListValues.put("CustNo".toUpperCase(), events.get(position).getCustNo());
                                    System.out.println("selectedListValues : " + selectedListValues);
                                    executeActionConfig("Appointment", AN_CalendarRowClick, "");
                                }
                            }
                        }
                    } else {
                        if (!String.valueOf(dateDifference).contains("-")) {

                            if (dateDifference == 0 && strDate <= time.getHour()) {
                                if (!events.isEmpty()) {
                                    openContentDialogwithoutEntry(monthlyCalendar,
                                            dailyCalendarLayout, events);
                                }
                            } else if (dateDifference == 0 && strDate >= time.getHour()) {
                                if (!events.isEmpty()) {
                                    openContentDialogwithoutEntry(monthlyCalendar,
                                            dailyCalendarLayout, events);
                                }
                            } else if (dateDifference != 0) {
                                formValues.put("TIME", CalendarUtils.formattedTime(time));
                                openContentDialog(monthlyCalendar,
                                        dailyCalendarLayout, events);
                            }

                        } else {
                            if (!events.isEmpty()) {
                                openContentDialogwithoutEntry(monthlyCalendar,
                                        dailyCalendarLayout, events);
                            }
                        }
                    }

                } else {
                    if (!String.valueOf(dateDifference).contains("-")) {

                        if (dateDifference == 0 && strDate <= time.getHour()) {
                            if (!events.isEmpty()) {
                                openContentDialogwithoutEntry(monthlyCalendar,
                                        dailyCalendarLayout, events);
                            }
                        } else if (dateDifference == 0 && strDate >= time.getHour()) {
                            if (!events.isEmpty()) {
                                openContentDialogwithoutEntry(monthlyCalendar,
                                        dailyCalendarLayout, events);
                            }
                        } else if (dateDifference != 0) {
                            formValues.put("TIME", CalendarUtils.formattedTime(time));
                            openContentDialog(monthlyCalendar,
                                    dailyCalendarLayout, events);
                        }

                    } else {
                        if (!events.isEmpty()) {
                            openContentDialogwithoutEntry(monthlyCalendar,
                                    dailyCalendarLayout, events);
                        }
                    }
                }
            }
        });

        dailyBack.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                calendarEvent = false;
                dailyCalendarLayout.setVisibility(View.GONE);
                monthlyCalendar.setVisibility(View.VISIBLE);
                createCalendarView2();
            }
        });
        hourListView.setSmoothScrollbarEnabled(true);
        hourListView.setSelection(9);
        hourListView.smoothScrollToPosition(9);

    }

    public static long getDateDiff(SimpleDateFormat format, String oldDate, String newDate) {
        try {
            return TimeUnit.DAYS.convert(format.parse(oldDate).getTime() - format.parse(newDate).getTime(), TimeUnit.MILLISECONDS);
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }

    private void loadevent() {
        String appview = "1";
        appview = da_systemList.getSystemValue("select SystemValue from SystemList where Code='Appointment'");

        if (appview != null) {
            if (appview.equals("1")) {
                ArrayList<Event> events = da_dynamics.getCalendarEvent();

                for (int i = 0; i < events.size(); i++) {
                    Event newEvent = new Event(events.get(i).getName(), events.get(i).getDate(),
                            events.get(i).getTime(), events.get(i).getUploaded(), events.get(i).getCustNo(),
                            events.get(i).getTransNo(), events.get(i).getAgentId(), events.get(i).getActive());
                    if (Event.eventsList.isEmpty()) {
                        if (!Event.eventsList.contains(newEvent)) {
                            Event.eventsList.add(newEvent);
                        }
                    } else {
                        Event.eventsList.add(newEvent);
                    }
                }
            } else {

                String custNo = da_systemList.getSystemValue("select SystemValue from SystemList where Code='CustomerID'");

                ArrayList<Event> events = da_dynamics.getCalendarEventwithCust(custNo);

                for (int i = 0; i < events.size(); i++) {
                    Event newEvent = new Event(events.get(i).getName(), events.get(i).getDate(),
                            events.get(i).getTime(), events.get(i).getUploaded(), events.get(i).getCustNo(),
                            events.get(i).getTransNo(), events.get(i).getAgentId(), events.get(i).getActive());
                    if (Event.eventsList.isEmpty()) {
                        if (!Event.eventsList.contains(newEvent)) {
                            Event.eventsList.add(newEvent);
                        }
                    } else {
                        Event.eventsList.add(newEvent);
                    }
                }

            }
        } else {

            ArrayList<Event> events = da_dynamics.getCalendarEvent();

            for (int i = 0; i < events.size(); i++) {
                Event newEvent = new Event(events.get(i).getName(), events.get(i).getDate(),
                        events.get(i).getTime(), events.get(i).getUploaded(), events.get(i).getCustNo(),
                        events.get(i).getTransNo(), events.get(i).getAgentId(), events.get(i).getActive());
                if (Event.eventsList.isEmpty()) {
                    if (!Event.eventsList.contains(newEvent)) {
                        Event.eventsList.add(newEvent);
                    }
                } else {
                    Event.eventsList.add(newEvent);
                }
            }
        }

    }

    private void openContentDialog(LinearLayout monthlyCalendar, LinearLayout dailyCalendarLayout, ArrayList<Event> events) {

        Dialog builder = new Dialog(this);
        builder.requestWindowFeature(Window.FEATURE_NO_TITLE);
        builder.setCancelable(true);
        builder.setContentView(R.layout.event_dialog);
        builder.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        builder.getWindow().setLayout(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);

        EditText editText = builder.findViewById(R.id.editText);
        MaterialButton submitBTN = builder.findViewById(R.id.submitBTN);
        RecyclerView recycle = builder.findViewById(R.id.recycle);


        LinearLayoutManager layoutManager = new LinearLayoutManager(getApplicationContext());
        recycle.setLayoutManager(layoutManager);


        EventAdapter adapter = new EventAdapter(MainActivity.this, events, "1");
        recycle.setAdapter(adapter);
        adapter.setOnClickListener(new EventAdapter.OnClickListener() {
            @Override
            public void onClick(int position, Event event) {
                formValues.put("Date", event.getDate().toString());
                formValues.put("Time", event.getTime().toString());
                formValues.put("EVENT", event.getName().toString());
                executeActionConfig("Event", AN_EVENTDELETEBUTTONCLICK, "");
                events.remove(position);
                loadevent();
                adapter.notifyDataSetChanged();
            }
        }, new EventAdapter.OnClickListenerTwo() {
            @Override
            public void onClick2(int position, Event event) {

            }
        });


        editText.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                editText.setError(null);
            }
        });

        submitBTN.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (editText.getText().toString().trim().isEmpty()) {
                    editText.setError("should enter");
                } else {
                    Event.eventsList = new ArrayList<>();
                    formValues.put("EVENT", editText.getText().toString().trim());
                    executeActionConfig("AddEventButton", AN_FORMBUTTONCLICKED, "");
                    builder.dismiss();
                    eventLayout(monthlyCalendar,
                            dailyCalendarLayout);
                }
            }
        });


        builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
            @Override
            public void onDismiss(DialogInterface dialog) {
                hourAdapter.notifyDataSetChanged();
            }
        });

        builder.show();

    }

    private void openContentDialogwithoutEntry(LinearLayout monthlyCalendar, LinearLayout dailyCalendarLayout, ArrayList<Event> events) {

        Dialog builder = new Dialog(this);
        builder.requestWindowFeature(Window.FEATURE_NO_TITLE);
        builder.setCancelable(true);
        builder.setContentView(R.layout.event_dialog_withoutentry);
        builder.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        builder.getWindow().setLayout(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);

        RecyclerView recycle = builder.findViewById(R.id.recycle);

        LinearLayoutManager layoutManager = new LinearLayoutManager(getApplicationContext());
        recycle.setLayoutManager(layoutManager);

        EventAdapter adapter = new EventAdapter(MainActivity.this, events, "0");
        recycle.setAdapter(adapter);
        adapter.setOnClickListener(new EventAdapter.OnClickListener() {
            @Override
            public void onClick(int position, Event event) {
                formValues.put("Date", event.getDate().toString());
                formValues.put("Time", event.getTime().toString());
                formValues.put("EVENT", event.getName().toString());
                executeActionConfig("Event", AN_EVENTDELETEBUTTONCLICK, "");

            }
        }, new EventAdapter.OnClickListenerTwo() {
            @Override
            public void onClick2(int position, Event event) {

            }
        });
        builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
            @Override
            public void onDismiss(DialogInterface dialog) {
                hourAdapter.notifyDataSetChanged();
            }
        });


        builder.show();

    }

    private void openContentDialogList(LinearLayout monthlyCalendar, LinearLayout dailyCalendarLayout, ArrayList<Event> events) {

        Dialog builder = new Dialog(this);
        builder.requestWindowFeature(Window.FEATURE_NO_TITLE);
        builder.setCancelable(true);
        builder.setContentView(R.layout.event_dialog_withoutentry);
        builder.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        builder.getWindow().setLayout(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);

        RecyclerView recycle = builder.findViewById(R.id.recycle);

        LinearLayoutManager layoutManager = new LinearLayoutManager(getApplicationContext());
        recycle.setLayoutManager(layoutManager);

        EventAdapter adapter = new EventAdapter(MainActivity.this, events, "0");
        recycle.setAdapter(adapter);
        adapter.setOnClickListener(new EventAdapter.OnClickListener() {
            @Override
            public void onClick(int position, Event event) {

            }
        }, new EventAdapter.OnClickListenerTwo() {
            @Override
            public void onClick2(int position, Event event) {
                selectedListValues.put("CustNo".toUpperCase(), event.getCustNo());
                System.out.println("selectedListValues : " + selectedListValues);
                executeActionConfig("Appointment", AN_CalendarRowClick, "");
            }
        });
        builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
            @Override
            public void onDismiss(DialogInterface dialog) {
                hourAdapter.notifyDataSetChanged();
            }
        });


        builder.show();

    }

    private ArrayList<HourEvent> hourEventList() {
        ArrayList<HourEvent> list = new ArrayList<>();

        for (int hour = 0; hour < 24; hour++) {
            LocalTime time = LocalTime.of(hour, 0);
            ArrayList<Event> events = Event.eventsForDateAndTime(selectedDate, time);
            HourEvent hourEvent = new HourEvent(time, events);
            list.add(hourEvent);
        }

        return list;
    }

    public void createImageWidget(LinearLayout formContent, BE_FormConfig config, String screen) {
        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.VERTICAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));

        int Width = (int) (config.HeaderWidth * screenWidth) / 100 + (int) (config.ValueWidth * screenWidth) / 100;

        LinearLayout content2 = new LinearLayout(this);
        content2.setOrientation(LinearLayout.VERTICAL);
        content2.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));
        content2.setTag(config.FieldName.toUpperCase());

        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screen + "_FORM_" + config.FieldControl + "_" + config.FieldName);
        int count = 0;
        Log.d("ImageWidget Query : ", queryConfig.QueryText);
        fileHelper.fileWriter("ImageWidget query : " + queryConfig.QueryText, writer);
        ArrayList<BE_QueryConfigIMAGEWIDGET> imageconfig = da_dynamics.getQueryConfigIMAGEWIDGET(queryConfig.QueryText);


        int ValueWidth = (int) (config.ValueWidth * screenWidth) / 100;

        RecyclerView recyclerView = new RecyclerView(this);
        recyclerView.setLayoutParams(new LinearLayout.LayoutParams(ValueWidth, LinearLayout.LayoutParams.WRAP_CONTENT));

        System.out.println("ImageWidget count :: " + imageconfig.get(0).widgetWidth);

        int a = parseInt(imageconfig.get(0).widgetWidth);
        int b = 100 / a;

        count = b;

//        GridLayoutManager layoutManager = new GridLayoutManager(getApplicationContext(), 6,LinearLayoutManager.HORIZONTAL,false);
        GridLayoutManager layoutManager = new GridLayoutManager(getApplicationContext(), 2);
        recyclerView.setLayoutManager(layoutManager);

        ImageWidgetAdapter adapter = new ImageWidgetAdapter(MainActivity.this, imageconfig, fileHelper);
        recyclerView.setAdapter(adapter);

        content2.addView(recyclerView);

        if (config.VAlignment == 0) {
            content2.setGravity(Gravity.CENTER);
        } else if (config.VAlignment == 1) {
            content2.setGravity(Gravity.END);
        } else if (config.VAlignment == 2) {
            content2.setGravity(Gravity.START);
        }


        content.addView(content2);
        formContent.addView(content);

    }

    ImageView FormcameraImageview;

    public void createFormContentCamera(LinearLayout formContent, BE_FormConfig config) {
        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        //content.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        if (config.HeaderWidth > 0) {
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;
            TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);

            content.addView(label);
        }
        if (config.ValueWidth > 0) {

            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.VFontSize * size;

            File SalesDirectory = new File(fileHelper.getSalesDirectoryPath() + "/Photo/" + formValues.get(config.FieldName.toUpperCase()));
            Bitmap bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory));

            if (config.FieldName.equalsIgnoreCase("PlanogramNew")) {
                masterImageName = formValues.get(config.FieldName.toUpperCase());
            }

            System.out.println("masterImageName : " + masterImageName);

            if (bitmap != null) {
                if (config.FieldName.equalsIgnoreCase("PlanogramNew")) {
                    masterImage = SalesDirectory;
                }
                System.out.println("masterImage : " + masterImage);

            } else {
                File SalesDirectory2 = new File(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + formValues.get(config.FieldName.toUpperCase()));
                Bitmap bitmap2 = BitmapFactory.decodeFile(String.valueOf(SalesDirectory2));
                if (bitmap2 != null) {
                    if (config.FieldName.equalsIgnoreCase("PlanogramNew")) {
                        masterImage = SalesDirectory2;
                    }
                    System.out.println("masterImage : " + masterImage);

                } else {
                    File SalesDirectory3 = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + formValues.get(config.FieldName.toUpperCase()));
                    Bitmap bitmap3 = BitmapFactory.decodeFile(String.valueOf(SalesDirectory3));
                    if (bitmap3 != null) {
                        if (config.FieldName.equalsIgnoreCase("PlanogramNew")) {
                            masterImage = SalesDirectory3;
                        }
                        System.out.println("masterImage : " + masterImage);

                    }
                }
            }


            FormcameraImageview = ut_view.generateTextForCamera(textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.VBackColor), ut_common.translateColor(config.VForeColor),
                    textsize, config.VFontStyle, config.VAlignment, config.ShowBorder, config.DataMemberType, config.FieldName, formValues.get(config.FieldName.toUpperCase()), config.DefaultValue, screen, fileHelper);


            FormcameraImageview.setOnClickListener(onCameraTakePhotoClickListener(formValues.get(config.FieldName.toUpperCase())));
            content.addView(FormcameraImageview);
        }
        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }
        ViewGroup.MarginLayoutParams marginParams = (ViewGroup.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;
        formContent.addView(content);
    }

    public void createFormContentAttachFile(LinearLayout formContent, BE_FormConfig config) {

        fileNameList = new ArrayList<>();
        String queryScreenName = screen + "_" + config.FieldControl + "_" + config.FieldName;
        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(queryScreenName);
        String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
        fileNameList = da_dynamics.showFormFielfdexecuteQuery(query);


        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);


        int widthPercentage = config.ValueWidth;
        double widthPerPercent = (screenWidth / 100.0);

        int width = (int) Math.round(widthPercentage * widthPerPercent);

        int paddingDp2 = 5;
        float density = getResources().getDisplayMetrics().density;
        int padding = (int) (paddingDp2 * density);

        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.VERTICAL);
        content.setBackgroundColor(getResources().getColor(R.color.colorPrimary));
        content.setPadding(padding, padding, padding, padding);
        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));

        if (config.HeaderWidth > 0) {
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;
            TextView label = ut_view.generateFormTextView(textPadding, config.HeaderHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);

            content.addView(label);
        }


        if (config.ValueWidth > 0) {
            LinearLayout content2 = new LinearLayout(this);
            content2.setOrientation(LinearLayout.HORIZONTAL);
            content2.setGravity(Gravity.CENTER_VERTICAL);
            content2.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, contentHeight));
            content2.setBackground(getResources().getDrawable(R.drawable.box_back_withcorner_light));

            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.VFontSize * size;


            ImageView imageView = ut_view.generateAttachView(textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.VBackColor), ut_common.translateColor(config.VForeColor),
                    textsize, config.VFontStyle, config.VAlignment, config.ShowBorder, config.DataMemberType, config.FieldName, formValues.get(config.FieldName.toUpperCase()), config.DefaultValue, screen, fileHelper);

            content2.addView(imageView);

            String foreColor = ut_common.translateColor(config.VForeColor);


            attachRecyclerView = new RecyclerView(this);
            attachRecyclerView.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            attachRecyclerView.setForegroundGravity(Gravity.CENTER_VERTICAL);


            LinearLayoutManager layoutManager = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);
            attachRecyclerView.setLayoutManager(layoutManager);


            fileAdapter = new AttachFileAdapter(MainActivity.this, textsize, fileNameList, config.FieldName, config.DefaultValue);
            attachRecyclerView.setAdapter(fileAdapter);
            fileAdapter.setOnItemClickListener(new AttachFileAdapter.OnItemClickListener() {
                @Override
                public void onItemClick(View view, String fileName, int position, String fieldName) {
                    fileNameList.remove(fileName);
                    formValues.put(fieldName.toUpperCase(), fileName);
                    executeActionConfig(fieldName, AN_FILEATTACHDELETE, "");
                    fileAdapter.notifyDataSetChanged();
                }
            });

            content2.addView(attachRecyclerView);
            ViewGroup.MarginLayoutParams marginParamss = (ViewGroup.MarginLayoutParams) content2.getLayoutParams();
            marginParamss.leftMargin = 25;
            marginParamss.rightMargin = 25;
            content.addView(content2);

            imageView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    getFilefromDevice(config.FieldName);
                }
            });


        }


        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }

        ViewGroup.MarginLayoutParams marginParams = (ViewGroup.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;
        formContent.addView(content);
    }

    public void createFormContentGallery(LinearLayout formContent, BE_FormConfig config) {

        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        if (config.HeaderWidth > 0) {
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;
            TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);

            content.addView(label);
        }

        if (config.ValueWidth > 0) {

            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.VFontSize * size;
            int width = (int) (config.ValueWidth * (screenWidth / 100.0));
            File fileDirectory = new File(fileHelper.getSalesDirectoryPath() + "DisplayImages/Images/Items/");
            if (fileDirectory.exists()) {
                File[] dirFiles = fileDirectory.listFiles();

                if (dirFiles.length != 0) {
                    mGetUploadImage = new ArrayList<>();
                    UploadImage uploadImage = null;
                    //  if (formValues != null) {
                    for (int i = 0; i < dirFiles.length; i++) {

                        String fileOutput = dirFiles[i].toString().substring(dirFiles[i].toString().lastIndexOf("/") + 1);
                        if (fileOutput.endsWith(".simg") || fileOutput.endsWith(".jpg") || fileOutput.endsWith(".jpeg") || fileOutput.endsWith(".png")) {
                            String pic = dirFiles[i].toString();//get path of your image
                            Bitmap bitmap = BitmapFactory.decodeFile(pic);
                            if (bitmap != null) {
                                uploadImage = new UploadImage();
                                uploadImage.setImage(bitmap);
                                uploadImage.setName(fileOutput);
                            }
                            mGetUploadImage.add(uploadImage);
                        }
                    }
                    ViewPager viewPager = new ViewPager(MainActivity.this);
                    viewPager.setLayoutParams(new LinearLayout.LayoutParams(width, contentHeight));
                    //  ViewpageAdapter adapterView = new ViewpageAdapter(this, mGetUploadImage);
                    //  viewPager.setAdapter(adapterView);
                    content.addView(viewPager);
                }
            }

        }
        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }
        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;
        formContent.addView(content);


    }

    public void createFormContentMultipleCamera(LinearLayout formContent, BE_FormConfig config) {

        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        if (config.HeaderWidth > 0) {
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;
            TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);

            content.addView(label);
        }

        if (config.ValueWidth > 0) {

            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.VFontSize * size;

            LinearLayout value = ut_view.generateFormMultiphotoCamera(MainActivity.this, textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.VBackColor), ut_common.translateColor(config.VForeColor),
                    textsize, config.VFontStyle, config.DefaultValue, config.VAlignment, config.ShowBorder, config.DataMemberType, config.FieldName, screen, config,
                    ut_common, formValues, selectedListValues, paramFormValues, paramSelectedListValues, system, da_queryConfig, da_dynamics, fileHelper);
            content.addView(value);
        }
        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }
        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;
        formContent.addView(content);

    }

    public void createFormContentSignature(LinearLayout formContent, BE_FormConfig config) {

        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.VERTICAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);
        //

        if (config.HeaderWidth > 0) {
            TextView label = ut_view.generateFormTextView(textPadding, config.HeaderHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, config.HFontSize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);
            content.addView(label);
        }

        if (config.ValueWidth > 0) {

            if (formValues.get(config.FieldName.toUpperCase()) != null) {
                signfilename = formValues.get(config.FieldName.toUpperCase());
            } else {

                formValues.put(config.FieldName.toUpperCase(), "0");

                HashMap<String, String> rtn = new HashMap<>();
                String screenSignature = screen + "_" + config.FieldName + "_SAVESIGN";

                BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                if (!query.equals("")) {
                    fileHelper.fileWriter("Signature Name Query : " + query, writer);
                    Log.d("Signature Name Query", query);
                    rtn = da_dynamics.getFormConfigValues(query);
                    if (!rtn.isEmpty()) {
                        signfilename = rtn.get(rtn.keySet().toArray()[0]);
                        formValues.put(config.FieldName.toUpperCase(), signfilename);
                    }

                }

            }

            signDone = false;

            LinearLayout layout = new LinearLayout(this);
            layout.setBackground(getResources().getDrawable(R.drawable.chart_back));
            layout.setPadding(5, 5, 5, 5);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            params.setMargins(0, 0, 0, 2);
            layout.setLayoutParams(params);


            SignaturePad value = ut_view.generateSignature(screen, textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.VBackColor), ut_common.translateColor(config.VForeColor),
                    config.VFontSize, config.VFontStyle, config.VAlignment, config.ShowBorder, config.DataMemberType, formValues, config.FieldName, fileHelper, config.DefaultValue, signfilename);

            layout.addView(value);
            content.addView(layout);
        }


        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }
        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;
        formContent.addView(content);

    }

    public void createFormContentPreview(LinearLayout formContent, BE_FormConfig config, String valueText) {

        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);
        if (config.HeaderWidth > 0) {
            TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, config.HFontSize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);
            content.addView(label);
        }

        if (config.ValueWidth > 0) {
            int width = (int) (config.HeaderWidth * (screenWidth / 100.0)) + (int) (config.ValueWidth * (screenWidth / 100.0));
            //  int width = (int) Math.round(config.ValueWidth * (screenWidth / 100.0));
            WebView value = ut_view.generateWebview(textPadding, width, contentHeight, config.VAlignment, config.VBackColor, config.FieldName, config.VForeColor, config.VFontSize, valueText);
            content.addView(value);

            Bitmap bitmap = null;
            value.setOnClickListener(new OnImageClickListener(config, bitmap));
        }

        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }

        if (config.FieldControl.equals(FC_IMAGEWITHPREVIEW)) {


        } else {

        }
        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;
        formContent.addView(content);
    }

    public void createFormContentImage(LinearLayout formContent, BE_FormConfig config, String valueText) {

        Bitmap bitmap = null;
        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.VERTICAL);
//        int contendwidth = (int) Math.round(config.HeaderWidth * (screenWidth / 100.0)) + (int) Math.round(config.ValueWidth * (screenWidth / 100.0));
        int contendwidth = (int) Math.round(config.ValueWidth * (screenWidth / 100.0));
        content.setLayoutParams(new LinearLayout.LayoutParams(contendwidth, LinearLayout.LayoutParams.WRAP_CONTENT));
//        content.setBackgroundColor(getResources().getColor(R.color.spinner_hint_text_color));

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);
        if (config.HeaderWidth > 0 && !config.NewText.isEmpty()) {
            TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, config.HFontSize, config.HFontStyle, config.HAlignment, 0, config.FieldName, typeFace, config.DataMemberType, config.ValueWidth);
            content.addView(label);
        }

        if (config.ValueWidth > 0) {

            if (config.FieldControl.equalsIgnoreCase(FC_IMAGE) || config.FieldControl.equalsIgnoreCase(FC_IMAGEWITHPREVIEW)) {
                if (config.DefaultValue != null) {
                    if (config.DefaultValue.contains("PHOTO/")) {
                        String sImageName = config.DefaultValue.substring(config.DefaultValue.indexOf("/") + 1);
                        sImageName.trim();
                        File SalesDirectory = new File(fileHelper.getSalesDirectoryPath());
                        // Create imageDir
                        File mypath = new File(SalesDirectory, sImageName);
                        bitmap = null;
                        try {
                            bitmap = BitmapFactory.decodeStream(new FileInputStream(mypath));
                            if (config.FieldName.equalsIgnoreCase("PlanogramNew")) {
                                masterImage = SalesDirectory;
                            }

                        } catch (FileNotFoundException e) {
                            e.printStackTrace();
                        }

                    }

                    if (config.DefaultValue.contains(".simg")) {

                        File SalesDirectory = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + config.DefaultValue);
                        bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory));
                    }
                    if (config.DefaultValue.contains(".png") || config.DefaultValue.contains(".jpg") || config.DefaultValue.contains(".jpeg")) {
                        File SalesDirectory = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + config.DefaultValue);
                        bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory));
                    }


                }
            } else if (config.FieldControl.equalsIgnoreCase(FC_B64IMAGE)) {
                if (config.DefaultValue != null) {
                    try {
                        System.out.println("B64IMAGE : " + config.DefaultValue);
                        byte[] imageBytes = Base64.decode(config.DefaultValue, Base64.DEFAULT);
                        InputStream in = new ByteArrayInputStream(imageBytes);
                        bitmap = BitmapFactory.decodeStream(in);
                        System.out.println("B64IMAGE bitmap : " + bitmap);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            } else if (config.FieldControl.equalsIgnoreCase(FC_INTENTVIEW)) {
                if (config.DefaultValue.contains(".simg")) {
                    File SalesDirectory = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/Images/" + config.DefaultValue);
                    bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory));
                }
            }

            String imageNAme = formValues.get(config.FieldName.toUpperCase());
            System.out.println("IMageName : " + imageNAme);
            if (config.FieldName.equalsIgnoreCase("PlanogramNew")) {
                masterImageName = formValues.get(config.FieldName.toUpperCase());
            }

            if (imageNAme != null) {
                if (!imageNAme.isEmpty()) {
                    if (imageNAme.contains(".simg")) {
                        try {
                            File SalesDirectory = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + imageNAme);
                            bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory));
                            if (config.FieldName.equalsIgnoreCase("PlanogramNew")) {
                                masterImage = SalesDirectory;
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                            File SalesDirectory = new File(fileHelper.getSalesDirectoryPath() + "/Photo/" + imageNAme);
                            bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory));
                            if (config.FieldName.equalsIgnoreCase("PlanogramNew")) {
                                masterImage = SalesDirectory;
                            }

                        }
                    }
                    if (imageNAme.toUpperCase().contains(".png".toUpperCase()) || imageNAme.toUpperCase().contains(".jpg".toUpperCase()) || imageNAme.toUpperCase().contains(".jpeg".toUpperCase())) {
                        try {
                            if (config.DataMemberType.equals("DISPLAYIMAGES")) {
                                File SalesDirectory = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + imageNAme);
                                bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory));
                                if (config.FieldName.equalsIgnoreCase("PlanogramNew")) {
                                    masterImage = SalesDirectory;
                                }

                            } else {
                                File SalesDirectory = new File(fileHelper.getSalesDirectoryPath() + "/Photo/" + imageNAme);
                                bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory));
                                if (config.FieldName.equalsIgnoreCase("PlanogramNew")) {
                                    masterImage = SalesDirectory;
                                }
                                if (bitmap == null) {
                                    File SalesDirectory2 = new File(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + imageNAme);
                                    bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory2));
                                    if (config.FieldName.equalsIgnoreCase("PlanogramNew")) {
                                        masterImage = SalesDirectory2;
                                    }

                                    if (bitmap == null) {
                                        File SalesDirectory3 = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + imageNAme);
                                        bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory3));
                                        if (config.FieldName.equalsIgnoreCase("PlanogramNew")) {
                                            masterImage = SalesDirectory3;
                                        }
                                    }

                                }

                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }


            int width = (int) Math.round(config.ValueWidth * (screenWidth / 100.0));
            LinearLayout value = ut_view.generateImage(config.FieldName, width, contentHeight, config.VAlignment, bitmap, config.FieldControl);

            if (config.VAlignment == 0) {
                content.setGravity(Gravity.CENTER);
            } else if (config.VAlignment == 1) {
                content.setGravity(Gravity.END);
            } else if (config.VAlignment == 2) {
                content.setGravity(Gravity.START);
            }

            content.addView(value);

            if (config.FieldControl.equalsIgnoreCase(FC_IMAGE) || config.FieldControl.equalsIgnoreCase(FC_IMAGEWITHPREVIEW) || config.FieldControl.equalsIgnoreCase(FC_B64IMAGE)) {
                value.setOnClickListener(new OnImageClickListener(config, bitmap));

            } else if (config.FieldControl.equalsIgnoreCase(FC_INTENTVIEW)) {
                value.setOnClickListener(new OnclickImageView(this, bitmap, FC_INTENTVIEW, config.DefaultValue));

            }

        }


        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }

        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;
        formContent.addView(content);
    }

    LinearLayout formRow;

    private void initFormContentMultiDisplayNo(LinearLayout
                                                       formContent, ArrayList<BE_FormConfig> formConfigs, HashMap<String, String> formValues, String
                                                       screen) {
        String prevDisplayNo = "";
        String prevFieldName = "";

        if (formContent != null) {
            formContent.removeAllViews();
        }

        for (BE_FormConfig config : formConfigs) {

            System.out.println("FieldControl : " + config.FieldControl);


            if (config.FieldControl.equalsIgnoreCase(FC_BACKGROUND)) {
                if (config.HBackColor == -1.0) {
                    DesigchangeIdentity = 1;
                } else {
                    DesigchangeIdentity = 0;
                }
                mainContent = (LinearLayout) findViewById(R.id.mainContent);
                mainContent.setBackgroundColor(Color.parseColor(ut_common.translateColor(config.HBackColor)));

            } else if (config.FieldControl.equalsIgnoreCase(FC_BACKGROUNDIMAGE)) {
                if (config.DefaultValue.contains(".simg") || config.DefaultValue.contains(".png") || config.DefaultValue.contains(".jpg") || config.DefaultValue.contains(".jpeg")) {

                    File SalesDirectory = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/Images/" + config.DefaultValue);
                    Bitmap bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory));
                    BitmapDrawable background = new BitmapDrawable(getResources(), bitmap);
                    mainContent.setBackground(background);

                }
            } else if (config.FieldControl.equalsIgnoreCase(FC_DASHBOARD)) {
                createDashBoards(config);

            } else if (config.FieldControl.equalsIgnoreCase("GRIDVIEW")) {


            } else if (config.FieldControl.equalsIgnoreCase(FC_IMAGEWIDGET)) {
                createImageWidget(formContent, config, screen);
            } else {

                String[] currentDisplayNo = config.DisplayNo.split("[.]");

                System.out.println("currentDisplayNo : " + currentDisplayNo[0]);
                System.out.println("currentDisplayNo : " + config.DisplayNo);
                System.out.println("prevDisplayNo : " + prevDisplayNo);

                if (prevDisplayNo.isEmpty() || !prevDisplayNo.equals(currentDisplayNo[0])) {
                    prevDisplayNo = currentDisplayNo[0];


//                    LinearLayout content = new LinearLayout(this);
//                    content.setOrientation(LinearLayout.VERTICAL);
//                    content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));
//                    content.setGravity(Gravity.CENTER);

                    formRow = new LinearLayout(this);
                    formRow.setOrientation(LinearLayout.HORIZONTAL);
                    formRow.setGravity(Gravity.CENTER_VERTICAL);
                    formRow.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));

                    for (BE_FormConfig configChild : formConfigs) {
                        String[] checkDisplayNo = configChild.DisplayNo.split("[.]");


                        if (!configChild.FieldControl.equalsIgnoreCase(FC_TAB)) {
                            tabload = false;
                        }


                        if (checkDisplayNo[0].equals(prevDisplayNo)) {
                            if (prevFieldName.equalsIgnoreCase(configChild.FieldName)) {
                                continue;
                            }

                            if (configChild.FieldControl.equalsIgnoreCase(FC_LABEL)) {
                                createFormContentLabel(formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()));

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_LINE) || configChild.FieldControl.equalsIgnoreCase(FC_VERTICALLINE)) {
                                createFormContentLine(formRow, configChild);

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_BUTTON)) {
                                createFormContentButton(formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()));

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_OPTION)) {
                                createFormContentOption(formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()));

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_OPTIONGROUP)) {
                                createFormContentOption(formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()));

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_DISABLEDOPTION)) {
                                createFormContentOption(formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()));

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_PREVIEW)) {
                                createFormContentPreview(formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()));

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_IMAGEWITHPREVIEW)) {
                                createFormContentImage(formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()));

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_SIGNATURE) ||
                                    configChild.FieldControl.equalsIgnoreCase(FC_SIGN) ||
                                    configChild.FieldControl.equalsIgnoreCase(FC_PAINT)) {
                                createFormContentSignature(formRow, configChild);

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_IMAGE) || configChild.FieldControl.equalsIgnoreCase(FC_B64IMAGE) || configChild.FieldControl.equalsIgnoreCase(FC_INTENTVIEW)) {
                                createFormContentImage(formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()));

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_COMBO_BOX)) {
                                createFormContentComboBox(formRow, configChild, screen, formValues.get(configChild.FieldName.toUpperCase()));

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_MULTICOMBOBOX)) {

                                createFormContentMultiComboBox(formRow, configChild, screen, formValues.get(configChild.FieldName.toUpperCase()));

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_IMAGECOMBOBOX)) {
                                createFormContentImageComboBox(formRow, configChild, screen, formValues.get(configChild.FieldName.toUpperCase()));

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_TEXTAREA)) {
                                customView.createFormContentTextBoxArea(FC_TEXTAREA, formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()), new CustomView.Action() {
                                    @Override
                                    public void execute(String value, String FieldName) {
                                        formValues.put(FieldName.toUpperCase(), value);
                                        executeActionConfig(FieldName, AN_FORMTEXTFIELDCHANGE, "");
                                    }
                                }, new CustomView.ActionLostFocus() {
                                    @Override
                                    public void executeLostFocus(String value) {
                                        executeActionConfig(config.FieldName, AN_FORMTEXTFIELDLOSTFOCUS, "");
                                    }
                                });
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_TEXT_BOX)) {
                                if (configChild.ValueHeight > 0 || configChild.HeaderHeight > 0) {
                                    customView.createFormContentTextBox(FC_TEXT_BOX, formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()), new CustomView.Action() {
                                        @Override
                                        public void execute(String value, String FieldName) {
                                            formValues.put(FieldName.toUpperCase(), value);
                                            executeActionConfig(FieldName, AN_FORMTEXTFIELDCHANGE, "");
                                        }
                                    }, new CustomView.ActionLostFocus() {
                                        @Override
                                        public void executeLostFocus(String value) {
                                            executeActionConfig(config.FieldName, AN_FORMTEXTFIELDLOSTFOCUS, "");
                                        }
                                    });
                                }
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_LOGINTEXTBOX)) {
                                if (configChild.ValueHeight > 0 || configChild.HeaderHeight > 0) {
                                    customView.createFormContentTextBox(FC_LOGINTEXTBOX, formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()), new CustomView.Action() {
                                        @Override
                                        public void execute(String value, String FieldName) {
                                            formValues.put(FieldName.toUpperCase(), value);
                                            executeActionConfig(FieldName, AN_FORMTEXTFIELDCHANGE, "");
                                        }
                                    }, new CustomView.ActionLostFocus() {
                                        @Override
                                        public void executeLostFocus(String value) {
                                            executeActionConfig(config.FieldName, AN_FORMTEXTFIELDLOSTFOCUS, "");
                                        }
                                    });
                                }
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_PASSWORD)) {
                                customView.createFormContentPassword(formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()), new CustomView.Action() {
                                    @Override
                                    public void execute(String value, String FieldName) {
                                        formValues.put(FieldName.toUpperCase(), value);
                                        executeActionConfig(FieldName, AN_FORMTEXTFIELDCHANGE, "");
                                    }
                                }, new CustomView.ActionLostFocus() {
                                    @Override
                                    public void executeLostFocus(String value) {
                                        executeActionConfig(configChild.FieldName, AN_FORMGOBUTTONCLICKED, "");
                                    }
                                });


                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_DATEPICKER)) {

                                Calendar calendar = Calendar.getInstance();
                                int mYear = calendar.get(Calendar.YEAR);
                                int mMonth = calendar.get(Calendar.MONTH);
                                int mDay = calendar.get(Calendar.DAY_OF_MONTH);
                                calendar.set(mYear, mMonth, mDay);

                                String value = formValues.get(configChild.FieldName.toUpperCase());
                                System.out.println("Date Value : " + value);

                                if (configChild.DataMemberType.toString().equalsIgnoreCase("String") || configChild.DataMemberType.toString().equalsIgnoreCase("DATETIME")) {
                                    SimpleDateFormat format = new SimpleDateFormat(system.get(0).DateTimeFormatString);
                                    if (value == null || value.isEmpty()) {
                                        value = format.format(Date.parse(String.valueOf(calendar.getTime())));
                                        formValues.put(configChild.FieldName.toUpperCase(), value);
                                    } else {
                                        String inputPattern = system.get(0).DateTimeFormatView;
                                        String outputPattern = system.get(0).DateTimeFormatString;

                                        SimpleDateFormat inputFormat = new SimpleDateFormat(inputPattern);
                                        SimpleDateFormat outputFormat = new SimpleDateFormat(outputPattern);

                                        Date date = null;

                                        try {
                                            date = inputFormat.parse(value);
                                            value = outputFormat.format(date);
                                        } catch (ParseException e) {
                                            e.printStackTrace();
                                        }
                                        formValues.put(configChild.FieldName.toUpperCase(), value);
                                    }
                                } else if (configChild.DataMemberType.toString().equalsIgnoreCase("DATE")) {
                                    try {
                                        SimpleDateFormat format = new SimpleDateFormat(system.get(0).DateFormatString);
                                        if (value == null || value.isEmpty()) {
                                            value = format.format(Date.parse(String.valueOf(calendar.getTime())));
                                            formValues.put(config.FieldName.toUpperCase(), value);
                                        } else {
                                            String inputPattern = system.get(0).DateFormatView;
                                            String outputPattern = system.get(0).DateFormatString;

                                            SimpleDateFormat inputFormat = new SimpleDateFormat(inputPattern);
                                            SimpleDateFormat outputFormat = new SimpleDateFormat(outputPattern);

                                            Date date = null;

                                            try {
                                                date = inputFormat.parse(value);
                                                value = outputFormat.format(date);
                                            } catch (ParseException e) {
                                                e.printStackTrace();
                                            }
                                            formValues.put(config.FieldName.toUpperCase(), value);
                                        }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }

                                } else if (configChild.DataMemberType.toString().equalsIgnoreCase("TIME")) {
                                    SimpleDateFormat format = new SimpleDateFormat(system.get(0).TimeFormatString);
                                    if (value == null || value.isEmpty()) {
                                        String dateString = format.format(Date.parse(String.valueOf(calendar.getTime())));
                                        formValues.put(configChild.FieldName.toUpperCase(), dateString);
                                    } else {
                                        String inputPattern = system.get(0).TimeFormatView;
                                        String outputPattern = system.get(0).TimeFormatString;

                                        SimpleDateFormat inputFormat = new SimpleDateFormat(inputPattern);
                                        SimpleDateFormat outputFormat = new SimpleDateFormat(outputPattern);

                                        Date date = null;

                                        try {
                                            date = inputFormat.parse(value);
                                            value = outputFormat.format(date);
                                        } catch (ParseException e) {
                                            e.printStackTrace();
                                        }
                                        formValues.put(configChild.FieldName.toUpperCase(), value);
                                    }
                                }
                                customView.createFormContentDatepicker(screen, formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()), system, new CustomView.Action() {
                                    @Override
                                    public void execute(String value, String Fieldname) {
                                        formValues.put(Fieldname.toString().toUpperCase(), value.toString());
                                        executeActionConfig(Fieldname.toString(), AN_DATEPICKERCLICKED, "");
                                    }
                                });

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_TIMEPICKER)) {
                                customView.createFormContentTimepicker(formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()), system, new CustomView.Action() {
                                    @Override
                                    public void execute(String value, String Fieldname) {
                                        formValues.put(Fieldname.toString().toUpperCase(), value.toString());
                                        executeActionConfig(Fieldname.toString(), AN_DATEPICKERCLICKED, "");
                                    }
                                });
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_AUTOCOMPLETE)) {
                                createFormContentAutocomplete(formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()));

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_TAKEPHOTO)) {
                                createFormContentCamera(formRow, configChild);

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_RATING)) {
                                createFormContentRating(formRow, configChild);

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_CHART)) {
                                createFormContentChart(screen, formRow, configChild);

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_WIDGET)) {

                                if (screen.contains("Main")) {
                                    if (mainDashboardActivated.equals("MainWidget")) {
                                        createFormContentWidget(screen, formRow, configChild, "MainWidget");
                                    } else {
                                        createFormContentWidget(screen, formRow, configChild, "MainWidget_ACTIVATED");
                                    }
                                } else {
                                    createFormContentWidgetNew(screen, formRow, configChild, "");
                                }

                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_CONTAINER)) {
                                createFormContainer(formRow, configChild, screen, formValues);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_FORMVIEW)) {
                                if (screen.contains("Main")) {
                                    if (mainDashboardActivated.equals("MainWidget")) {
                                        createFormContentFormView(screen, formRow, configChild, "MainWidget");
                                    } else {
                                        createFormContentFormView(screen, formRow, configChild, "MainWidget_ACTIVATED");
                                    }
                                } else {
                                    createFormContentFormView(screen, formRow, configChild, "");
                                }
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_CARDVIEW)) {
                                createFormContentCardview(formRow, configChild);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_NUMERICUPDOWN)) {
//                                createFormContentNumericUpDown(formRow, configChild);
                                createFormContentNumericUpDownNew(formRow, configChild);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_MULTIPLEPHOTO)) {
                                createFormContentMultipleCamera(formRow, configChild);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_MULTIPLEPHOTOGALLERY)) {
                                createFormContentGallery(formRow, configChild);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_MULTIPLEPHOTOWITHPREVIEW)) {
                                createFormContentMultipleCamera(formRow, configChild);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_SEARCH)) {
                                SearchmenuEnable = true;
                                invalidateOptionsMenu();
                                createFormContentSearchView(formRow, configChild, formValues.get(configChild.FieldName.toUpperCase()));
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_LISTVIEW)) {
                                listInsideForm = true;
                                be_formConfig = configChild;
                                listviewFieldName = configChild.FieldName;
                                createFormContentListView(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_EXPANDABLELISTVIEW)) {
                                createFormContentExpandableListView(formRow, configChild);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_EXPANDABLELISTEDITABLE)) {
                                listInsideForm = true;
                                createFormContentExpandableListViewNew(formRow, configChild);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_WEBVIEW)) {
                                createFormContentWebview(formRow, configChild, formValues.get(config.FieldName.toUpperCase()));
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_SWITCH)) {
                                createFormContentSwitch(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_STATICVIEWS)) {
                                createFormStaticViews(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_MULTIPLEIMAGERATING)) {
                                createFormMultipleImageRating(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_PROGRESSBAR)) {
                                createFormProgressBar(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_MULTILINE)) {
                                createFormMultiLine(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_BUTTONGROUP)) {
                                createFormContentButtonGroup(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_MULTIPLEBUTTON)) {
                                createFormContentButtonList(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_MULTIOPTIONLIST) || configChild.FieldControl.equalsIgnoreCase(FC_COMBOGROUP)) {
                                createFormMultiOptionList(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_COVERFLOW)) {
                                createFormContentCoverFlow(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_TAB)) {
                                createFormContentTabLayout(formRow, configChild, screen, formConfigs);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_CIRCULARVIEWPAREINDICATOR)) {
                                createFormContentViewPager(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_ROUTEMAP)) {
                                createMapView(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_FORMMAP)) {
                                createMapViewSingle(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_MAPPOLYLINE)) {
                                createMapPolyView(formContent, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_SEEKBAR)) {
                                seekBar(formRow, configChild);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_LOGINDATETIME)) {
                                createLoginDateTime(formRow, configChild);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_TIMER)) {
                                createTimer(formRow, configChild);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_CALENDAR)) {
                                Event.eventsList = new ArrayList<>();
                                createCalendarView();
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_STATUSBAR)) {
                                listBottomvalue.setVisibility(View.VISIBLE);
                                createlistbottomvalue(listBottomvalue, configChild, formValues.get(configChild.FieldName.toUpperCase()));
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_ATTACHFILE)) {
                                createFormContentAttachFile(formRow, configChild);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_PAYNOWQR)) {
                                createPaynowQR(formRow, configChild);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_BANNER)) {
                                createFormContentBanner(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_LABELWITHBG)) {
                                createFormLabelWithBg(formRow, configChild, screen, formValues.get(configChild.FieldName.toUpperCase()));
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_TITLE)) {
                                createFormTitle(formRow, configChild, screen, screennametypeface);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_BLANK)) {
                                createBlank(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_FLOATINGACTIONBUTTON)) {
                                createFC_FLOATINGACTIONBUTTON(formRow, configChild, screen);
                            } else if (configChild.FieldControl.equalsIgnoreCase(FC_PROMTPAYQR)) {
                                createPromtPayQR(formRow, configChild);
                            }


                            if (!configChild.DisplayNo.contains(".")) {
                                prevDisplayNo = ""; //reset display no, in case same display no is maintained
                                prevFieldName = config.FieldName;
                                break;
                            }

                        }
                    }
//                    content.addView(formRow);
                    formContent.addView(formRow);
                    System.out.println("MultiFormConfig  Finish: ");

                }

            }

        }
        executeActionConfig("", AN_FORMCONFIGEND, "");

    }

    private void createFormContainer(LinearLayout formContent, BE_FormConfig config, String screen, HashMap<String, String> formValues) {

        boolean multiDisplayNo = false;
        HashMap<String, String> formviewValues = formValues;

        String screenName = screen + FC_FORM + FC_CONTAINER + "_" + config.FieldName;

        System.out.println("Container screenName : " + screenName);

        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenName);

        DA_FormConfig da_formConfig = new DA_FormConfig(this);
        ArrayList<BE_FormConfig> formviewFormConfigs = da_formConfig.getFormConfigs(screenName, language);

        for (BE_FormConfig configs : formviewFormConfigs) {
            if (configs.DisplayNo.contains(".")) {
                multiDisplayNo = true;
                break;
            }
        }

        String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits,
                PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

        if (query != null && !query.isEmpty()) {
            formviewValues = new HashMap<String, String>();
            Log.d("FormContainer Query", query);
            formviewValues = da_dynamics.getFormConfigValuesContainer(query);
        }

        System.out.println("formviewValues : " + formviewValues);


        int width = (int) Math.round(config.ValueWidth * (screenWidth / 100.0));

        LinearLayout widgetcontent = new LinearLayout(this);
        widgetcontent.setOrientation(LinearLayout.VERTICAL);
        widgetcontent.setLayoutParams(new LinearLayout.LayoutParams(width, ViewGroup.LayoutParams.WRAP_CONTENT));
        widgetcontent.setTag(config.FieldName.toUpperCase());

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        if (config.HeaderWidth > 0) {
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;

            TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);

            widgetcontent.addView(label);
        }

        if (config.ValueWidth > 0) {

            if (multiDisplayNo) {
                initFormContentMultiDisplayNo(widgetcontent, formviewFormConfigs, formviewValues, screen);
            } else {
                initFormContentLinear(widgetcontent, formviewFormConfigs, formviewValues, screen);
            }

        }


        formContent.addView(widgetcontent);

    }

    public void createFormContentExpandableListViewNew(LinearLayout formRow, BE_FormConfig config) {

        formListScreenName = screen + FC_FORM + FC_EXPANDABLELISTEDITABLE + "_" + config.FieldName;

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        LinearLayout llParentLayout = new LinearLayout(this);
        llParentLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        llParentLayout.setOrientation(LinearLayout.VERTICAL);
        llParentLayout.setTag(config.FieldName.toUpperCase().toString());

        createContainerEXPANDABLE(formListScreenName, formRow, llParentLayout, config, "");
    }

    public void createFormLabelWithBg(LinearLayout formContent, BE_FormConfig config, String screen, String valueText) {

        LinearLayout layout = new LinearLayout(this);

        int contentwidth = (int) (config.HeaderWidth * screenWidth) / 100 + (int) (config.ValueWidth * screenWidth) / 100;

        layout.setOrientation(LinearLayout.HORIZONTAL);
        layout.setPadding(15, 15, 15, 15);
        layout.setBackground(getResources().getDrawable(R.drawable.label_back));
        layout.setLayoutParams(new LinearLayout.LayoutParams(contentwidth, ViewGroup.LayoutParams.WRAP_CONTENT));

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        float size = Float.parseFloat(String.valueOf(fontsize));
        float textsize = config.HFontSize * size;

        if (valueText == null) {
            valueText = config.NewText;
        }

        TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                ut_common.translateColor(config.VBackColor), ut_common.translateColor(config.VForeColor),
                valueText, textsize, config.HFontStyle, config.HAlignment, 0, config.FieldName, typeFace, config.DataMemberType, config.ValueWidth);


        //gravity
        if (config.VAlignment == AL_CENTER) {
            label.setGravity(Gravity.CENTER_HORIZONTAL);
        } else if (config.VAlignment == AL_RIGHT) {
            label.setGravity(Gravity.END);
        } else if (config.VAlignment == AL_LEFT) {
            label.setGravity(Gravity.START);
        } else if (config.VAlignment == AL_TOP) {
            label.setGravity(Gravity.TOP);
        }


        layout.addView(label);

        label.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                executeActionConfig(config.FieldName, AN_FORMLABELCLICKED, "");
            }
        });
        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) layout.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;
        formContent.addView(layout);

    }

    public void createFormTitle(LinearLayout formContent, BE_FormConfig config, String screen, Typeface screennametypeface) {

        titleVisible = true;
        int contentHeight = (int) Math.round(config.ValueHeight * heightRatio);

        float size = Float.parseFloat(String.valueOf(fontsize));
        float textsize = config.VFontSize * size;
//        float textsize = config.HFontSize * size;

        String text = formValues.get(config.FieldName.toUpperCase());
        ImageView titleImage = findViewById(R.id.titleImage);

        int iConWidth = (int) (7 * (screenWidth / 100));

        titleImage = new ImageView(this);
        titleImage.setLayoutParams(new LinearLayout.LayoutParams(iConWidth, contentHeight));


        if (text == null || text.isEmpty()) {
            text = config.NewText;
        }

        Bitmap bitmap = null;

        if (config.DefaultValue.contains(".simg")) {

            File SalesDirectory = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + config.DefaultValue);
            bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory));
        }
        if (config.DefaultValue.contains(".png") || config.DefaultValue.contains(".jpg") || config.DefaultValue.contains(".jpeg")) {
            File SalesDirectory = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + config.DefaultValue);
            bitmap = BitmapFactory.decodeFile(String.valueOf(SalesDirectory));
        }

        titleLayout.setVisibility(View.VISIBLE);
        screenNameText.setVisibility(View.GONE);

        try {
            titleLayout.removeAllViews();
        } catch (Exception e) {
            e.printStackTrace();
        }


        if (config.DefaultValue != null && !config.DefaultValue.isEmpty()) {
            if (bitmap != null) {
                titleImage.setImageBitmap(bitmap);
            } else {
                titleImage.setImageDrawable(getDrawable(R.drawable.ic_help));
            }
        } else {
            titleImage.setVisibility(View.GONE);
        }

        int paddingDp = config.HeaderWidth;
        float density = getResources().getDisplayMetrics().density;
        int paddingstart = (int) (paddingDp * density);

        paddingstart = (int) (paddingDp * (screenWidth / 100.0));

        TextView textV = new TextView(this);
        textV.setLayoutParams(new LinearLayout.LayoutParams(paddingstart, contentHeight));
        titleLayout.addView(textV);

        TextView textView = new TextView(this);
        textView.setLayoutParams(new LinearLayout.LayoutParams(0, contentHeight, 1));
        textView.setText(Html.fromHtml(text));
        textView.setTextSize(textsize);
//        titleLayout.setPadding(paddingstart, 0, 0, 0);
        textView.setElevation(5);
        textView.setTypeface(Typeface.DEFAULT_BOLD);
        textView.setTextColor(getResources().getColor(R.color.colorButton));
        textView.setGravity(Gravity.CENTER_VERTICAL);

        titleLayout.addView(textView);

        boolean show = false;

        for (BE_ActionConfig actionConfig : actionConfigs) {
            if (actionConfig.ActionName.equalsIgnoreCase("titleButtonClicked")) {
                show = true;
            }
        }


        titleImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                executeActionConfig(config.FieldName, AN_titleButtonClicked, "");
            }
        });


        titleLayout.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View v) {
                Toast.makeText(getApplicationContext(), screen, Toast.LENGTH_LONG).show();
                return false;
            }
        });

        if (show) {
            titleLayout.addView(titleImage);
        }


        //gravity
        if (config.VAlignment == AL_CENTER) {
            screenNameText.setGravity(Gravity.CENTER_HORIZONTAL);
        } else if (config.VAlignment == AL_RIGHT) {
            screenNameText.setGravity(Gravity.END);
        } else if (config.VAlignment == AL_LEFT) {
            screenNameText.setGravity(Gravity.START);
        } else if (config.VAlignment == AL_TOP) {
            screenNameText.setGravity(Gravity.TOP);
        }

    }


    public void createTimer(LinearLayout formContent, BE_FormConfig config) {

        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.VERTICAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));
        content.setPadding(10, 10, 10, 10);
        content.setGravity(Gravity.CENTER);

        timeTextview = new TextView(this);
        timeTextview.setTextSize(80);
        timeTextview.setGravity(Gravity.CENTER_HORIZONTAL);
        timeTextview.setTextColor(getResources().getColor(R.color.colorWhite));

        int a = parseInt(config.DefaultValue);
        int b = 1000 * a;
        countDownTimer = new CountDownTimer(b, 1000) {
            public void onTick(long millisUntilFinished) {

                NumberFormat f = new DecimalFormat("000");
                long sec = (millisUntilFinished / 1000);
                timeTextview.setText(f.format(sec));

            }

            public void onFinish() {
                timeTextview.setText("000");
                countDownTimer.cancel();
                executeActionConfig("", AN_timerEnd, "");
            }

        }.start();

        content.addView(timeTextview);

        formContent.addView(content);

    }

    public void createLoginDateTime(LinearLayout formContent, BE_FormConfig config) {
        final Handler handler = new Handler();
        final Handler handler2 = new Handler();
        final Handler handler3 = new Handler();
        final int delay = 1000;

        int width = (int) (config.HeaderWidth * (screenWidth / 100.0)) + (int) (config.ValueWidth * (screenWidth / 100.0));
        int contentheight = (int) (config.ValueHeight * heightRatio);


        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(width, contentheight));
        content.setGravity(Gravity.CENTER);

        LinearLayout content2 = new LinearLayout(this);
        content2.setOrientation(LinearLayout.HORIZONTAL);
        content2.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        content2.setGravity(Gravity.CENTER);

        Typeface typeface = Typeface.createFromAsset(getAssets(), "fonts/" + config.VFont);

        float fSize = config.VFontSize * Float.parseFloat(fontsize);

        TextView timeTextview = new TextView(this);
        timeTextview.setTextSize(fSize);
        timeTextview.setTextColor(Color.parseColor(ut_common.translateColor(config.VForeColor)));
        timeTextview.setTypeface(typeface);

        handler.postDelayed(new Runnable() {
            public void run() {
//                DateFormat df = new SimpleDateFormat("hh:mm a");
                DateFormat df = new SimpleDateFormat("hh:mm a");
                String date = df.format(Calendar.getInstance().getTime());
                timeTextview.setText(date.toUpperCase() + "  ");
                handler.postDelayed(this, delay);
            }
        }, delay);
        content2.addView(timeTextview);


//        TextView timeType = new TextView(this);
//        timeType.setTextSize(fSize);
//        timeType.setTextColor(Color.parseColor(ut_common.translateColor(config.VForeColor)));
//        timeType.setTypeface(typeface);
//
//        handler2.postDelayed(new Runnable() {
//            public void run() {
//                DateFormat df2 = new SimpleDateFormat("a");
//                String date2 = df2.format(Calendar.getInstance().getTime());
//                timeType.setText(date2.toUpperCase() + "  ");
//                handler2.postDelayed(this, delay);
//            }
//        }, delay);
//
//        content2.addView(timeType);

        content2.addView(ut_view.generateLineVertical(FC_LINE, 7, ut_common.translateColor(config.HForeColor), config));


        TextView dateTextView = new TextView(this);
        dateTextView.setTextSize(fSize);
        dateTextView.setGravity(Gravity.CENTER);
        dateTextView.setTextColor(Color.parseColor(ut_common.translateColor(config.VForeColor)));
        Typeface typeface2 = Typeface.createFromAsset(getAssets(), "fonts/" + config.VFont);
        dateTextView.setTypeface(typeface2);

        handler3.postDelayed(new Runnable() {
            public void run() {
                DateFormat df3 = new SimpleDateFormat("EEE, d MMM yyyy");
                String date3 = df3.format(Calendar.getInstance().getTime());
                dateTextView.setText("  " + date3);
                handler3.postDelayed(this, delay);
            }
        }, delay);
        content2.addView(dateTextView);
        content.addView(content2);
        formContent.addView(content);

    }

    public void createFormContentCoverFlow(LinearLayout formContent, BE_FormConfig config, String values) {

        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        if (config.HeaderWidth > 0) {
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;
            TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);

            content.addView(label);
        }

        if (config.ValueWidth > 0) {

            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.VFontSize * size;
            int width = (int) (config.ValueWidth * (screenWidth / 100.0));
            File fileDirectory = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/Images/coverflow/");
            if (fileDirectory.exists()) {
                File[] dirFiles = fileDirectory.listFiles();

                System.out.println("dirFiles.length : " + dirFiles.length);
                if (dirFiles.length != 0) {
                    mGetUploadImage = new ArrayList<>();
                    UploadImage uploadImage = null;
                    for (int i = 0; i < dirFiles.length; i++) {

                        String fileOutput = dirFiles[i].toString().substring(dirFiles[i].toString().lastIndexOf("/") + 1);
                        if (fileOutput.endsWith(".png") || fileOutput.endsWith(".jpg") || fileOutput.endsWith(".jpeg")) {
                            String pic = dirFiles[i].toString();//get path of your image
                            Bitmap bitmap = BitmapFactory.decodeFile(pic);
                            System.out.println("bitmap : " + bitmap);

                            if (bitmap != null) {
                                uploadImage = new UploadImage();
                                uploadImage.setImage(bitmap);
                                uploadImage.setName(fileOutput);
                            }
                            mGetUploadImage.add(uploadImage);
                        }

                    }
                    System.out.println("mGetUploadImage : " + mGetUploadImage);

                    HorizontalScrollView horizontalscrollview = new HorizontalScrollView(this);
                    horizontalscrollview.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));

                    LinearLayout linearLayout = new LinearLayout(this);
                    linearLayout.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));

                    for (int i = 0; i < mGetUploadImage.size(); i++) {
                        ImageView image = new ImageView(this);
                        image.setAdjustViewBounds(true);
                        image.setLayoutParams(new LinearLayout.LayoutParams(150, 150));
                        image.setTag(config.FieldName.toUpperCase());
                        image.setScaleType(ImageView.ScaleType.FIT_XY);
                        image.setImageBitmap(mGetUploadImage.get(i).getImage());
                        linearLayout.addView(image);
                    }
                    horizontalscrollview.addView(linearLayout);

                }
            }

        }
        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }
        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;
        formContent.addView(content);


    }


    @SuppressLint("ResourceType")
    public void createFormContentSwitch(LinearLayout formContent, BE_FormConfig config, String value) {

        int width2 = (int) Math.round(config.HeaderWidth * (screenWidth / 100.0)) + (int) Math.round(config.ValueWidth * (screenWidth / 100.0));

        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(width2, LinearLayout.LayoutParams.WRAP_CONTENT));

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        if (config.HeaderWidth > 0) {
            Float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;

            TextView label = ut_view.generateFormTextViewSwitch(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);

            content.addView(label);
        }

        if (config.ValueWidth > 0) {
            int width = (int) Math.round(config.ValueWidth * (screenWidth / 100.0));
            Switch sb = new Switch(this);

            sb.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            sb.setTextOff("OFF");
            sb.setSwitchMinWidth(56);
            sb.setChecked(value.equals("1"));
            //gravity
            if (config.VAlignment == AL_CENTER) {
                sb.setGravity(Gravity.CENTER);

            } else if (config.VAlignment == AL_RIGHT) {
                sb.setGravity(Gravity.CENTER_VERTICAL | Gravity.RIGHT);

            } else if (config.VAlignment == AL_LEFT) {
                sb.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);

            } else if (config.VAlignment == AL_TOP) {
                sb.setGravity(Gravity.TOP);
            }
            content.addView(sb);
            sb.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if (isChecked) {
                        // The switch enabled
                        formValues.put(config.FieldName.toUpperCase(), "1");
                        executeActionConfig(config.FieldName, AN_FORMSWITCHON, "");

                        sb.getTrackDrawable().setColorFilter(ContextCompat.getColor(MainActivity.this, R.color.colorGreen), PorterDuff.Mode.SRC_IN);
                        sb.getThumbDrawable().setColorFilter(ContextCompat.getColor(MainActivity.this, R.color.colorGreen), PorterDuff.Mode.SRC_IN);
                    } else {
                        // The switch disabled
                        formValues.put(config.FieldName.toUpperCase(), "0");
                        executeActionConfig(config.FieldName, AN_FORMSWITCHOFF, "");

                        sb.getTrackDrawable().setColorFilter(ContextCompat.getColor(MainActivity.this, R.color.colorPrimary), PorterDuff.Mode.SRC_IN);
                        sb.getThumbDrawable().setColorFilter(ContextCompat.getColor(MainActivity.this, R.color.colorPrimary), PorterDuff.Mode.SRC_IN);
                    }

                }
            });
        }

        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }
        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;

        formContent.addView(content);
    }

    // images array
    int[] images = {R.drawable.ic_profile, R.drawable.bgimg, R.drawable.arrow_down};
    public TabLayout tabLayout;

    private void createFormContentTabLayout(LinearLayout formContent, BE_FormConfig config, String screen, ArrayList<BE_FormConfig> formConfigs) {

        if (!tabload) {
            int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
            contentHeight = (int) Math.round(contentHeight * heightRatio);
            int width = (int) (config.ValueWidth * (screenWidth / 100.0));

            LinearLayout ll_tablayout = new LinearLayout(this);
            ll_tablayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, contentHeight));

            int paddingDp = 15;
            float density = getResources().getDisplayMetrics().density;
            int paddingPixel = (int) (paddingDp * density);

            LayoutInflater inflater = getLayoutInflater();
            View myLayout = inflater.inflate(R.layout.tabview_layout, ll_tablayout, true);
            tabLayout = myLayout.findViewById(R.id.tablayout);
            tabLayout.setVisibility(View.GONE);

            fragmentContainer = myLayout.findViewById(R.id.fragmentContainer);

            tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);
            tabLayout.setTabMode(TabLayout.MODE_FIXED);


            float size = Float.parseFloat(String.valueOf(fontsize));

            tabNameList = new ArrayList<String>();
            tabFragmentList = new ArrayList<TabFragmet>();
            for (int a = 0; a < formConfigs.size(); a++) {
                if (formConfigs.get(a).FieldControl.equals(FC_TAB)) {

                    String tabName = formConfigs.get(a).DefaultValue;
                    BE_QueryConfig queryConfig2 = da_queryConfig.getQueryConfig(formConfigs.get(a).DefaultValue);

                    if (!queryConfig2.QueryText.isEmpty()) {
                        String query = ut_common.getQuery(queryConfig2, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        tabName = da_dynamics.getDeviceSystemValue(query);
                    }

                    String screenName = screen + "_FORM_" + formConfigs.get(a).FieldControl.toUpperCase() + "_" + formConfigs.get(a).FieldName;

                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenName);
                    String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                    tabLayout.addTab(tabLayout.newTab().setText(tabName));
                    tabNameList.add(screenName);
                    tabFragmentList.add(new TabFragmet(MainActivity.this, screenName, selectedListValues, actionConfigs, formValues, paramFormValues, paramSelectedListValues, paramScreenName));
                    tabload = true;

                }
            }

            if (tabFragmentList.size() == 1) {
                tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);
                tabLayout.setTabMode(TabLayout.MODE_FIXED);
                tabLayout.setBackground(null);
            }

            if (tabload) {

                progresslayout.setVisibility(View.VISIBLE);

                getSupportFragmentManager().beginTransaction()
                        .replace(R.id.fragmentContainer, tabFragmentList.get(0))
                        .commit();


                tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
                    @Override
                    public void onTabSelected(TabLayout.Tab tab) {

                        getSupportFragmentManager().beginTransaction()
                                .replace(R.id.fragmentContainer, tabFragmentList.get(tab.getPosition()))
                                .attach(tabFragmentList.get(tab.getPosition()))
                                .commit();


                        tabLayout.setVisibility(View.GONE);
                    }

                    @Override
                    public void onTabUnselected(TabLayout.Tab tab) {
                        fragmentContainer.removeAllViews();
                        progresslayout.setVisibility(View.VISIBLE);
                    }

                    @Override
                    public void onTabReselected(TabLayout.Tab tab) {

                    }
                });
            }

            formContent.addView(ll_tablayout);
        }

    }

    public void jumpToPage() {
        viewPager.setCurrentItem(viewPager.getCurrentItem() + 1, true);
    }

    public void createFormContentViewPager(LinearLayout formContent, BE_FormConfig config, String screen) {
        BE_QueryConfig queryConfig;

        String screenName = screen + FC_FORM + config.FieldName;
        String screenName2 = screen + FC_FORM + FC_CIRCULARVIEWPAREINDICATOR + "_" + config.FieldName;

        queryConfig = da_queryConfig.getQueryConfig(screenName);
        if (queryConfig == null) {
            queryConfig = da_queryConfig.getQueryConfig(screenName2);
        }

        String query1 = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
        fileHelper.fileWriter("Presentation Query : " + query1, writer);
        Log.d("Presentation Query : ", query1);
        PresentationRtn = da_dynamics.PresentationexecuteQuery(query1);
        System.out.println("Presentation :: " + PresentationRtn);

        int contentHeight = Math.max(config.ValueWidth, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        float fontsizee = 22 * Float.parseFloat(fontsize);

        int paddingDp3 = 8;
        int paddingDp = 12;
        float density3 = getResources().getDisplayMetrics().density;
        int paddingPixel3 = (int) (paddingDp3 * density3);
        int paddingPixel = (int) (paddingDp * density3);

        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.VERTICAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));

        LinearLayout layout = new LinearLayout(this);
        layout.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));
        layout.setOrientation(LinearLayout.HORIZONTAL);
        layout.setGravity(Gravity.CENTER_VERTICAL);

        TextView backText = new TextView(this);
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        params.setMargins(paddingPixel3, 0, 0, 0);
        backText.setLayoutParams(params);
        backText.setText("Previous");
        backText.setTextSize(fontsizee);
        backText.setTextColor(getResources().getColor(R.color.colorButton));
        backText.setPadding(paddingPixel3, paddingPixel3, paddingPixel3, paddingPixel3);
        backText.setBackground(getResources().getDrawable(R.drawable.rectangle_9_new));
        backText.setTypeface(typeFace);

        layout.addView(backText);

        TextView nextText = new TextView(this);
        LinearLayout.LayoutParams params2 = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        params2.setMargins(0, 0, paddingPixel3, 0);
        nextText.setLayoutParams(params2);
        nextText.setText("Next");
        nextText.setTextSize(fontsizee);
        nextText.setTextColor(getResources().getColor(R.color.colorButton));
        nextText.setPadding(paddingPixel, paddingPixel3, paddingPixel, paddingPixel3);
        nextText.setBackground(getResources().getDrawable(R.drawable.rectangle_9_new));
        nextText.setTypeface(typeFace);


        dotIndicator = new LinearLayout(this);
        dotIndicator.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));
        dotIndicator.setOrientation(LinearLayout.HORIZONTAL);
        dotIndicator.setGravity(Gravity.CENTER);

        layout.addView(dotIndicator);
        layout.addView(nextText);


        LinearLayout ll_viewpager = new LinearLayout(this);
        ll_viewpager.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, contentHeight));
        ll_viewpager.setOrientation(LinearLayout.VERTICAL);
        ll_viewpager.setFitsSystemWindows(true);


        viewPager = new ViewPager(this);
        viewPager.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));
        viewPager.setTag(config.FieldName.toUpperCase());

        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

            }

            @Override
            public void onPageSelected(int position) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                    setDotIndicator(position, PresentationRtn.size());
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {

            }
        });

        ll_viewpager.addView(viewPager);


        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            setDotIndicator(0, PresentationRtn.size());
        }


        Presentation presentation = new Presentation();
        presentation.execute(MainActivity.this, PresentationRtn, viewPager, fileHelper);


        backText.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                System.out.println("size : " + getItem(0));

                if (getItem(0) == 0) {
                    viewPager.setCurrentItem(PresentationRtn.size());
                } else {
                    viewPager.setCurrentItem(getItem(-1), true);
                }
            }
        });


        nextText.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                System.out.println("size : " + getItem(0) + " = " + PresentationRtn.size());

                if ((getItem(0) + 1) < PresentationRtn.size()) {
                    viewPager.setCurrentItem(getItem(1), true);
                } else {
                    int pos = viewPager.getCurrentItem();
                    pos = pos + 1;
                    if (pos >= PresentationRtn.size()) pos = 0;
                    viewPager.setCurrentItem(pos);
                }
            }
        });


        content.addView(ll_viewpager);
        content.addView(layout);
        formContent.addView(content);

    }

    private int getItem(int i) {
        return viewPager.getCurrentItem() + i;
    }

    @RequiresApi(api = Build.VERSION_CODES.N)
    public void setDotIndicator(int position, int size) {
        TextView[] dots = new TextView[size];
        dotIndicator.removeAllViews();

        for (int i = 0; i < dots.length; i++) {
            dots[i] = new TextView(this);
            dots[i].setText(Html.fromHtml("&#8226", Html.FROM_HTML_MODE_LEGACY));
            dots[i].setTextSize(40);
            dots[i].setTextColor(getResources().getColor(R.color.button_focused, getApplicationContext().getTheme()));
            dotIndicator.addView(dots[i]);
        }
        dots[position].setTextColor(getResources().getColor(R.color.colorAccentSALES, getApplicationContext().getTheme()));
    }


    public void createFormContentBanner(LinearLayout formContent, BE_FormConfig config, String screen) {

        String screenName = screen + FC_FORM + config.FieldName;
        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenName);
        String query1 = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
        fileHelper.fileWriter("Banner Query : " + query1, writer);
        Log.d("Banner Query : ", query1);
        ArrayList<BE_Banner> rtn = da_dynamics.BannerexecuteQuery(query1);
        System.out.println("Banner :: " + rtn);

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));

        LinearLayout ll_viewpager = new LinearLayout(this);
        ll_viewpager.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));
        ll_viewpager.setOrientation(LinearLayout.VERTICAL);
        ll_viewpager.setGravity(Gravity.CENTER);
        ll_viewpager.setFitsSystemWindows(true);

        viewPager = new ViewPager(this);
        viewPager.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, contentHeight));
        viewPager.setTag(config.FieldName.toUpperCase());

        ll_viewpager.addView(viewPager);

        dotIndicator = new LinearLayout(this);
        dotIndicator.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));
        dotIndicator.setOrientation(LinearLayout.HORIZONTAL);
        dotIndicator.setGravity(Gravity.CENTER);

        ll_viewpager.addView(dotIndicator);


        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

            }

            @Override
            public void onPageSelected(int position) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                    setDotIndicator(position, rtn.size());
                }
            }

            @Override
            public void onPageScrollStateChanged(int state) {

            }
        });


        LayoutInflater inflater = getLayoutInflater();
        View myLayout = inflater.inflate(R.layout.indicator, ll_viewpager, true);
//        WormDotsIndicator dotsIndicator = myLayout.findViewById(R.id.dot1);
//        dotsIndicator.setViewPager(viewPager);

        if (!rtn.isEmpty()) {

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                setDotIndicator(0, rtn.size());
            }

            BannerPresentation presentation = new BannerPresentation();
            presentation.execute(MainActivity.this, rtn, viewPager, fileHelper);
            banner = true;
            startAutoSlider(rtn.size(), viewPager);
            content.addView(ll_viewpager);
            formContent.addView(content);
        }
    }

    private void startAutoSlider(final int count, ViewPager viewPager) {

        viewpageRunnable = new Runnable() {
            @Override
            public void run() {
                int pos = viewPager.getCurrentItem();
                pos = pos + 1;
                if (pos >= count) pos = 0;
                viewPager.setCurrentItem(pos);
                viewpageHandler.postDelayed(viewpageRunnable, 10000);
            }
        };
        viewpageHandler.postDelayed(viewpageRunnable, 10000);

    }

    private void createFormContentTab(LinearLayout formContent, BE_FormConfig config, String valueText) {
        final int[] currentPage = {0};
        Timer timer;
        final long DELAY_MS = 500;//delay in milliseconds before task is to be executed
        final long PERIOD_MS = 3000;
        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));

        List<String> compareFiles = new ArrayList<>();
        compareFiles.add("Test5.png");
        compareFiles.add("Test6.png");
        compareFiles.add("Video1.mov");
        compareFiles.add("Video2.mov");
        compareFiles.add("Sample1.pdf");
        compareFiles.add("Sample2.pdf");

        List<String> fileNames = new ArrayList<>();
        File folder = new File(fileHelper.getSalesDirectoryPath() + "DisplayImages/test");
        if (!folder.exists()) folder.mkdir();
        if (folder.listFiles() != null) {
            for (File file : folder.listFiles()) {

                String filename = file.getName();


                for (int i = 0; i < compareFiles.size(); i++) {

                    String filename1 = file.getName();
                    String filename2 = compareFiles.get(i);
                    if (filename1.equals(filename2)) {
                        if (filename.endsWith(".png") || filename.endsWith(".simg") || filename.endsWith(".jpg") || filename.endsWith(".jpeg")) {
                            filename = file.getPath();
                            fileNames.add(filename);
                        } else if (filename.endsWith(".pdf") || filename.endsWith(".doc")) {
                            filename = file.getPath();
                            fileNames.add(filename);
                        } else if (filename.endsWith(".mov")) {
                            filename = file.getPath();
                            fileNames.add(filename);
                        }
                    }
                }
            }

        }
        int contentHeight = Math.max(config.ValueWidth, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);
        if (config.ValueWidth > 0) {
            HashMap<String, ArrayList<String>> rtn = new HashMap<>();


            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;
            String screenName = screen + FC_FORM + FC_CIRCULARVIEWPAREINDICATOR + "_" + config.FieldName;
            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenName);
            String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
//            fileHelper.fileWriter("getDataSyncValues Query : " + query, writer);
            rtn = da_dynamics.getDataSyncValues(query);


            int width = (int) (config.ValueWidth * (screenWidth / 100.0));

            TabLayout tabLayout = new TabLayout(this);
            tabLayout.setLayoutParams(new LinearLayout.LayoutParams(width, 60));
            tabLayout.setBackgroundColor(getResources().getColor(R.color.colorLightGrey));
            tabLayout.setMinimumHeight(androidx.appcompat.R.attr.actionBarSize);

            ViewPager viewPager2 = new ViewPager(this);

            ArrayList<String> addTitle = new ArrayList<>();

            viewPager2.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, contentHeight));
            if (!rtn.isEmpty()) {
                for (Map.Entry<String, ArrayList<String>> entry : rtn.entrySet()) {
                    String key = entry.getKey();
                    tabLayout.addTab(tabLayout.newTab().setText(key.toString()));
                    addTitle.add(key.toString());


                }
                tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);
                tabLayout.setTabTextColors(ColorStateList.valueOf(ContextCompat.getColor(MainActivity.this, R.color.colorPrimary)));
                tabLayout.setTabMode(TabLayout.MODE_FIXED);
                viewPager2.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(tabLayout));
                tabLayout.setupWithViewPager(viewPager2, true);


            }
            viewPager2.setOnClickListener(new View.OnClickListener() {
                public void onClick(View v) {
                    //this will log the page number that was click
                    Toast.makeText(getApplicationContext(), "Am Clicked", Toast.LENGTH_SHORT).show();

                }
            });
            content.addView(viewPager2);

        }
        if (config.ValueWidth == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }

        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;
        formContent.addView(content);
    }


    public void createMapView(LinearLayout formContent, BE_FormConfig config, String valueText) {

        Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(ignored -> {

                    int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
                    contentHeight = (int) Math.round(contentHeight * heightRatio);

                    MapWrapperLayout map_relative_layout = findViewById(R.id.map_relative_layout);


//                    LayoutInflater mInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
//                    View view = mInflater.inflate(R.layout.form_map_layout, formContent);
//                    MapWrapperLayout map_relative_layout = view.findViewById(R.id.map_relative_layout);

                    View views = findViewById(R.id.map);
                    map_relative_layout.setVisibility(View.VISIBLE);
                    views.setVisibility(View.VISIBLE);

                    int i = 1700;
                    if (contentHeight >= i) {
                        map_relative_layout.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));
                    } else {
                        map_relative_layout.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, contentHeight));
                    }

                    SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                            .findFragmentById(R.id.map);
                    mapFragment.getMapAsync(this);

                    HashMap<String, String> rtn = new HashMap<>();

                    String screenName = screen + "_" + FC_MAP + "_" + config.FieldName;
                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenName);
                    System.out.println("BE_QueryConfig : " + queryConfig);
                    String query = ut_common.getQuery(queryConfig, null, null, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    System.out.println("Map Query : " + query);
                    fileHelper.fileWriter("Map Query : " + query, writer);

                    rtn = da_dynamics.LastDocNoexecuteQuery(query);
                    System.out.println("rtn : " + rtn);

                    try {
                        if (rtn != null && !rtn.isEmpty()) {
                            BE_MapLatLong mapLatLong = new BE_MapLatLong();
                            mapLatLong.latitude = rtn.get("latitude".toUpperCase());
                            mapLatLong.longitude = rtn.get("longitude".toUpperCase());
                            mapLatLong.Customername = rtn.get("Customername".toUpperCase());

                            try {
                                mapLatLong.Color = rtn.get("Color".toUpperCase());
                            } catch (Exception e2) {
                                e2.printStackTrace();
                            }

                            MapLatLongRtn.add(mapLatLong);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    googleMap = new GoogleMaplocation(screen, MainActivity.this, mapFragment, null, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, formValues, selectedListValues, paramFormValues, system, MapLatLongRtn, rtn, map_relative_layout, fileHelper, writer, config);


                });

        disposables.add(d);
    }

    public void createMapViewSingle(LinearLayout formContent, BE_FormConfig config, String valueText) {

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        LinearLayout linearLayout = new LinearLayout(this);
        linearLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, contentHeight));
        linearLayout.setOrientation(LinearLayout.VERTICAL);

        LayoutInflater inflater = LayoutInflater.from(this);
        View myLayout = inflater.inflate(R.layout.map_layout, linearLayout, true);

        MapFragment fragment = new MapFragment(MainActivity.this);

        getSupportFragmentManager()
                .beginTransaction().replace(R.id.frame_layout, fragment)
                .commit();

        formContent.addView(linearLayout);

    }

    public void createMapPolyView(LinearLayout formContent, BE_FormConfig config, String valueText) {


        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        MapWrapperLayout map_relative_layout = findViewById(R.id.map_relative_layout);
        View views = findViewById(R.id.map);
        map_relative_layout.setVisibility(View.VISIBLE);
        views.setVisibility(View.VISIBLE);

        int i = 1700;
        if (contentHeight >= i) {
            map_relative_layout.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));
        } else {
            map_relative_layout.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, contentHeight));
        }

        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);

        HashMap<String, String> rtn = new HashMap<>();

        String screenName = screen + "_" + FC_MAP + "_" + config.FieldName;
        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenName);
        System.out.println("BE_QueryConfig : " + queryConfig);
        String query = ut_common.getQuery(queryConfig, null, null, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
        System.out.println("Map query : " + query);
        fileHelper.fileWriter("Map Query : " + query, writer);

        rtn = da_dynamics.LastDocNoexecuteQuery(query);

        googleMapPoly = new GoogleMapPolylocation(screen, MainActivity.this, mapFragment, null, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, formValues, selectedListValues, paramFormValues, system, MapLatLongRtn, rtn, map_relative_layout);
    }


    public void createFormContentAutocomplete(LinearLayout formContent, BE_FormConfig
            config, String valueText) {
        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.MATCH_PARENT));
        content.setGravity(Gravity.CENTER);

        LinearLayout content2 = new LinearLayout(this);
        content2.setOrientation(LinearLayout.HORIZONTAL);
        content2.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.MATCH_PARENT));
        content2.setGravity(Gravity.CENTER);
        content2.setTag(config.FieldName.toUpperCase());

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);
        if (config.HeaderWidth > 0) {

            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;

            TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);


            content2.addView(label);
        }

        boolean hasAction = false;
        for (BE_ActionConfig actionConfig : actionConfigs) {
            if (actionConfig.ActionName.equalsIgnoreCase(AN_COMBOBOXFORMITEMCLICKED) && actionConfig.FieldName.equalsIgnoreCase(config.FieldName)) {
                hasAction = true;
                actionConfig.hasAction = true;
                break;
            }
        }
//        fileHelper.fileWriter("createFormContentComboBox " + config.FieldName + " hasAction : " + hasAction, writer);
        spinnerItems = getComboBoxValues("", config.FieldName, screen);
        formSpinners.put(config.FieldName.toUpperCase(), spinnerItems);

        for (int i = 0; i < spinnerItems.size(); i++) {
            formValues.put(config.FieldName.toUpperCase(), spinnerItems.get(0).Code);
        }
        ArrayList<String> spinnerValue = new ArrayList<>();

        int selectedIndex = 0;


        if (config.ValueWidth > 0) {
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.VFontSize * size;
            int width = (int) (config.ValueWidth * (screenWidth / 100.0)) + (int) (config.HeaderWidth * (screenWidth / 100.0));

            TextInputLayout spinner = new TextInputLayout(new ContextThemeWrapper(this, com.google.android.material.R.style.Widget_MaterialComponents_TextInputLayout_FilledBox_Dense_ExposedDropdownMenu));
            spinner.setLayoutParams(new LinearLayout.LayoutParams(width, contentHeight));
            spinner.setHint(config.NewText);
            spinner.setDefaultHintTextColor(getResources().getColorStateList(R.color.colorWhite));
            spinner.setPadding(textPadding, textPadding, textPadding, textPadding);
            spinner.setBackground(getApplicationContext().getResources().getDrawable(R.drawable.background_corner_10));

            AutoCompleteTextView autocomplete = new AutoCompleteTextView(MainActivity.this);
            autocomplete.setLayoutParams(new LinearLayout.LayoutParams(width, contentHeight));
            autocomplete.setTextSize(textsize);
            autocomplete.setTextColor(Color.WHITE);
            autocomplete.setHintTextColor(Color.WHITE);
            autocomplete.setCursorVisible(true);
            autocomplete.setSingleLine(true);
            autocomplete.setInputType(InputType.TYPE_CLASS_TEXT);


            for (int i = 0; i < spinnerItems.size(); i++) {
                spinnerValue.add(spinnerItems.get(i).Text);

                if (spinnerItems.get(i).Text.equals(valueText)) {
                    selectedIndex = i;
                    autocomplete.setText(valueText);
                }
            }

            if (!spinnerValue.isEmpty()) {
                ArrayAdapter<String> dataAdapter1 = new ArrayAdapter<String>(MainActivity.this,
                        R.layout.list_itemautotrial, spinnerValue);

                dataAdapter1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                autocomplete.setAdapter(dataAdapter1);

            }

            autocomplete.setMaxLines(2);
            autocomplete.addTextChangedListener(new TextWatcher() {
                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {

                }

                @Override
                public void afterTextChanged(Editable s) {

                    Disposable d = Single.timer((long) 500, TimeUnit.MILLISECONDS)
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe(ignored -> {

                                if (spinnerItems.isEmpty()) {
                                    formValues.put(config.FieldName.toUpperCase(), s.toString());
                                } else {
                                    for (BE_ComboBox item : spinnerItems) {

                                        if (item.Text.equalsIgnoreCase(s.toString())) {
                                            fileHelper.fileWriter("onItemSelected item.Code : " + item.Code, writer);
                                            System.out.println("onItemSelected item.Code : " + item.Code);
                                            formValues.put(config.FieldName.toUpperCase(), item.Code);
                                        } else {
                                            formValues.put(config.FieldName.toUpperCase(), s.toString());
                                        }

                                    }
                                }
                                System.out.println("formValues : " + formValues);
                            });
                }
            });

            autocomplete.setTag(config.FieldName.toUpperCase());
            spinner.addView(autocomplete);
            content2.addView(spinner);

        }
        if (config.ValueHeight == 0 && config.HeaderHeight == 0) {
            content2.setVisibility(View.GONE);
        } else {
            content2.setVisibility(View.VISIBLE);
        }
        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content2.getLayoutParams();
        marginParams.topMargin = 10;
        marginParams.leftMargin = 40;

        content.addView(content2);
        formContent.addView(content);

    }

    public void createFormContentSearchView(LinearLayout formContent, BE_FormConfig
            config, String valueText) {

        String finalScreen = screen;


        simpleSearchView.setOnQueryTextListener(new SimpleSearchView.OnQueryTextListener() {

            @Override
            public boolean onQueryTextSubmit(String newText) {

                /*if (!newText.isEmpty()) {
//                    Toast.makeText(MainActivity.this,"scan value ",Toast.LENGTH_LONG).show();
                    formValues.put("searchvalue", newText.toString());
                    searchFilterSecond = newText.toString();
                    searchFieldName = config.FieldName;
                    String screenSignature = finalScreen + "_" + FC_SEARCH + "_" + config.FieldName;

                    System.out.println("screenSignature "+screenSignature);

                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                    String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    listConfigQuery = query;
                    System.out.println(" listConfigQuery "+listConfigQuery);

                    scFilterLayout.removeAllViews();
                    scFilterselectedvalues.clear();

                    if (formListScreenName != null) {
                        if (formListScreenName.endsWith("_REFRESHFORMLIST")) {
                            formListScreenName = formListScreenName.replace("_REFRESHFORMLIST", "");
                        }
                    }
                    executeActionConfig(config.FieldName, AN_SEARCHOPEN, "");
                    System.out.println("AN_SEARCHOPEN "+AN_SEARCHOPEN + " config.FieldName ");
                    listPage = 0;
                    initListViewSearch(screen);
                }*/

                if (!newText.isEmpty()) {
                    formValues.put("searchvalue", newText.toString());  // Ensure correct key is used
                    System.out.println("Search value submitted: " + newText);

                    searchFilterSecond = newText;
                    searchFieldName = config.FieldName;
                    String screenSignature = finalScreen + "_" + FC_SEARCH + "_" + config.FieldName;

                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                    String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues,
                            paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits,
                            AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    listConfigQuery = query;
                    System.out.println("listConfigQuery: " + listConfigQuery);

                    scFilterLayout.removeAllViews();
                    scFilterselectedvalues.clear();

                    executeActionConfig(config.FieldName, AN_SEARCHOPEN, "");
                    listPage = 0;
                    initListViewSearch(screen);  // Refresh list

                    return true;

                }

                hideSoftKeyboard(MainActivity.this);
                getWindow().getDecorView().clearFocus();

                return true;
            }

            @Override
            public boolean onQueryTextChange(String newText) {

                return false;

            }

            @Override
            public boolean onQueryTextCleared() {
                formValues.put("searchvalue", "");
                searchFilterSecond = "";
                listConfigValues = listConfigSearchValues;
                simpleSearchView.closeSearch();
                searchviewlayout.setVisibility(View.GONE);
                action_scan.setVisible(false);
                item_search.setVisible(true);
                return false;
            }
        });


        simpleSearchView.setOnSearchViewListener(new SimpleSearchViewListener() {
            @Override
            public void onSearchViewShown() {
                super.onSearchViewShown();
            }

            @Override
            public void onSearchViewClosed() {
                super.onSearchViewClosed();
                formValues.put("searchvalue", "");
                searchFilterSecond = "";
                listConfigValues = listConfigSearchValues;
                queryListConfig = da_queryConfig.getQueryConfig(screen);
                listConfigQuery = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                fileHelper.fileWriter("Search Close ListConfig Query : " + listConfigQuery, writer);
                Log.d("Search Close ListConfig Query :", listConfigQuery);
                listPage = 0;
                listLimit = 15;
                listLimitChild = 15;

                Log.d("formlist :", formlist + "");

                hashMapArrayList.clear();
                hashMapArrayList2.clear();

                hashMapArrayList2 = new ArrayList<>();

                if (formlist) {

                    View view = formContent.findViewWithTag(config.FieldName.toUpperCase());
                    Log.d("Search Close ListConfig listviewFieldName : ", listviewFieldName);

                    String aueryScreenName = "";
                    if (refreshListName.isEmpty()) {
                        aueryScreenName = screen + "_FORM_LISTVIEW_" + listviewFieldName;
                        queryListConfig = da_queryConfig.getQueryConfig(screen + "_FORM_LISTVIEW_" + listviewFieldName);
                    } else {
                        refreshListName = refreshListName.replace("_REFRESHFORMLIST", "");
                        queryListConfig = da_queryConfig.getQueryConfig(refreshListName);
                        aueryScreenName = refreshListName;
                    }

                    listConfigQuery = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("Search Close ListConfig Query : " + listConfigQuery, writer);
                    Log.d("Search Close ListConfig Query :", listConfigQuery);
                    listPage = 0;
                    listLimit = 15;
                    listLimitChild = 15;
                    listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);
//                    createContainerSearchlist(formListScreenName, formContent, llParentLayoutformlist, be_formConfig, "", listConfigValues);

                    String formListScreenName2 = screen + FC_FORM + FC_LISTVIEW;
                    createContainerRefresh(formListScreenName, formContent, (LinearLayout) view, listviewFieldName, "RefreshList", aueryScreenName, formListScreenName2);

                } else {
                    listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);
                    initListConfigValues();
                }

                searchviewlayout.setVisibility(View.GONE);

                executeActionConfig(config.FieldName, AN_SEARCHCLOSE, "");

                hideSoftKeyboard(MainActivity.this);
                getWindow().getDecorView().clearFocus();
                action_scan.setVisible(false);
                item_search.setVisible(true);


            }

            @Override
            public void onSearchViewShownAnimation() {
                super.onSearchViewShownAnimation();
            }

            @Override
            public void onSearchViewClosedAnimation() {
                super.onSearchViewClosedAnimation();
            }
        });


    }

    public void hideSoftKeyboard(Activity activity) {
        try {
            InputMethodManager inputMethodManager =
                    (InputMethodManager) activity.getSystemService(
                            Activity.INPUT_METHOD_SERVICE);
            if (inputMethodManager.isAcceptingText()) {
                inputMethodManager.hideSoftInputFromWindow(
                        new View(this).getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS
                );
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @SuppressLint("NewApi")
    public void createFormProgressBar(LinearLayout formContent, BE_FormConfig
            config, String valueText) {

        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);
        if (config.HeaderWidth > 0) {

            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;
            TextView label;

            label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);
            content.addView(label);
        }
        if (config.ValueWidth > 0) {
            int width = (int) Math.round(config.ValueWidth * (screenWidth / 100.0));

            SeekBar seekBar = new SeekBar(MainActivity.this);
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(width, contentHeight);
            seekBar.setLayoutParams(layoutParams);

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                seekBar.setMin(0);
            }
            seekBar.setMax(10);
            seekBar.setProgress(2);
            content.addView(seekBar);
        }
        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }


        formContent.addView(content);
    }


    public void seekBar(LinearLayout formContent, BE_FormConfig config) {

        int val2 = 0;
        customView.createSeekbar(formContent, config, screenWidth);

//        int width = (int) (config.HeaderWidth * screenWidth) / 100 + (int) (config.ValueWidth * screenWidth) / 100;
//
//        LinearLayout content = new LinearLayout(this);
//        LinearLayout.LayoutParams linearlayoutParams = new LinearLayout.LayoutParams(width, LinearLayout.LayoutParams.WRAP_CONTENT);
//        content.setLayoutParams(linearlayoutParams);
//        content.setOrientation(LinearLayout.VERTICAL);
//        content.setBackground(getResources().getDrawable(R.drawable.background_corner_10));
//        content.setPadding(20, 10, 20, 10);
//
//        float size = Float.parseFloat(String.valueOf(fontsize));
//        float textsize = config.HFontSize * size;
//
//        TextView label = new TextView(this);
//        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
//        label.setLayoutParams(layoutParams);
//        label.setTextSize(textsize);
//        label.setGravity(Gravity.CENTER);
//
//        label.setPadding(15, 10, 15, 10);
//        label.setTextColor(getResources().getColor(R.color.textColor));
//        label.setText("Font Size");
//        content.addView(label);
//
//        SeekBar seekBar = new SeekBar(MainActivity.this);
//        LinearLayout.LayoutParams layoutParams2 = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
//        seekBar.setLayoutParams(layoutParams2);
//
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
//            seekBar.setMin(0);
//        }
//        seekBar.setMax(20);
//

//        seekBar.setProgressBackgroundTintList(getResources().getColorStateList(R.color.colorLightMediumGrey));
//        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
//            @Override
//            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
//                String fontsize = null;
//                if (progress < 10) {
//                    fontsize = "0." + progress;
//                } else if (progress >= 10) {
//                    String a = String.valueOf(progress);
//
//                    //split charector
//                    List<Character> str = new ArrayList<>();
//                    for (char ch : a.toCharArray()) {
//                        str.add(ch);
//                    }
//                    fontsize = str.get(0) + "." + str.get(1);
//                }
//
//
//                float size = Float.parseFloat(String.valueOf(fontsize));
//                float textsize = config.HFontSize * size;
//
//                if (textsize > 0) {
//                    label.setText("Font Size - (" + fontsize + ")");
//                    label.setTextSize(textsize);
//                }
//
//                ut_sp.setStringValue(SQL_FontSize, String.valueOf(fontsize));
//
//            }
//
//            @Override
//            public void onStartTrackingTouch(SeekBar seekBar) {
//
//            }
//
//            @Override
//            public void onStopTrackingTouch(SeekBar seekBar) {
//
//            }
//        });
//
//        content.addView(seekBar);
//        content.setGravity(Gravity.CENTER);
//
//        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
//            content.setVisibility(View.GONE);  //GONE
//        }
//
//        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
//        marginParams.topMargin = DEFAULT_MARGIN;
//        formContent.addView(content);

    }

    public void createFormMultiLine(LinearLayout formContent, BE_FormConfig
            config, String screen2) {
        int Multineflag = 0;
        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        content.setTag(config.FieldName.toUpperCase());

        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        if (config.ValueWidth > 0) {
            HashMap<String, ArrayList<String>> rtn = new HashMap<>();
            String screenName = screen2 + "_FORM_" + FC_MULTILINE + "_" + config.DefaultValue;
            System.out.println("MULTILINE SCREEN NAME : " + screenName);
            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenName);
            String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            fileHelper.fileWriter("Form MultiLine Query : " + query, writer);
            Log.d("Form MultiLine Query", query);
            rtn = da_dynamics.getDataSyncValues(query);
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.VFontSize * size;

            LinearLayout linearLayout = new LinearLayout(this);
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            linearLayout.setLayoutParams(
                    layoutParams
            );
            linearLayout.setOrientation(LinearLayout.VERTICAL);


            int paddingDp2 = 10;
            float density2 = getResources().getDisplayMetrics().density;
            int paddingPixel2 = (int) (paddingDp2 * density2);

            LinearLayout layout = new LinearLayout(this);
            layout.setLayoutParams(new LinearLayout.LayoutParams((int) Math.round(config.ValueWidth * (screenWidth / 100.0)), ViewGroup.LayoutParams.WRAP_CONTENT));
            layout.setOrientation(LinearLayout.VERTICAL);
            layout.setPadding(paddingPixel2, 0, paddingPixel2, 0);

            for (Map.Entry<String, ArrayList<String>> entry : rtn.entrySet()) {
                String key = entry.getKey();
                if (key.equalsIgnoreCase(config.FieldName)) {
                    ArrayList<String> value = entry.getValue();
                    for (String aString : value) {
                        TextView textvalue = ut_view.generateFormCreateTextView(textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                                "#ffffff", ut_common.translateColor(config.VForeColor),
                                aString, textsize, config.VFontStyle, config.VAlignment, config.ShowBorder, config.FieldName, config.DataMemberType);

                        int paddingDp3 = 10;
                        float density3 = getResources().getDisplayMetrics().density;
                        int paddingPixel3 = (int) (paddingDp3 * density3);
                        textvalue.setPadding(paddingPixel3, 0, 0, 0);

                        linearLayout.addView(textvalue);
                        linearLayout.addView(ut_view.generateLine(FC_LINE, 1, ut_common.translateColor(config.VForeColor), config, screenWidth));
                    }
                }
            }
            linearLayout.addView(layout);
            content.addView(linearLayout);
        }


        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }

        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;
        formContent.addView(content);
    }

    public void createFormContentLabel(LinearLayout formContent, BE_FormConfig
            config, String valueText) {
        if (config.HeaderHeight > 0 && config.ValueHeight > 0) {

            if (valueText != null) {
                try {
                    if (config.DataMemberType.equalsIgnoreCase("CURRENCY")) {
//                        NumberFormat CurrencyFormat = new DecimalFormat("###,###,##0.00");

                        DA_System da_system = new DA_System(getApplicationContext());
                        String currencySymbol = da_system.getCurrency();

                        if (valueText.isEmpty()) {
                            valueText = currencySymbol + " 0.00";
                            formValues.put(config.FieldName.toUpperCase(), "0.00");

                        } else {
                            formValues.put(config.FieldName.toUpperCase(), valueText);

                            if (system.get(0).PriceRoundingDigits != null) {
                                if (!system.get(0).PriceRoundingDigits.isEmpty() && !system.get(0).PriceRoundingDigits.equals("0")) {
                                    String formt = "###,###,##0.";
                                    int count = parseInt(system.get(0).PriceRoundingDigits);
                                    for (int j = 0; j < count; j++) {
                                        formt = formt + "0";
                                    }
                                    NumberFormat CurrencyFormat1 = new DecimalFormat(formt);
                                    valueText = CurrencyFormat1.format(Double.parseDouble(valueText));
                                    valueText = currencySymbol + " " + valueText;
                                } else if (system.get(0).PriceRoundingDigits.equals("0")) {
                                    NumberFormat CurrencyFormat2 = new DecimalFormat("###,###,##0");
                                    valueText = CurrencyFormat2.format(Double.parseDouble(valueText));
                                    valueText = currencySymbol + " " + valueText;
                                } else {
                                    NumberFormat CurrencyFormat3 = new DecimalFormat("###,###,##0.00");
                                    valueText = CurrencyFormat3.format(Double.parseDouble(valueText));
                                    valueText = currencySymbol + " " + valueText;
                                }
                            } else {
                                NumberFormat CurrencyFormat4 = new DecimalFormat("###,###,##0.00");
                                valueText = CurrencyFormat4.format(Double.parseDouble(valueText));
                                valueText = currencySymbol + " " + valueText;
                            }
                        }


                    } else if (config.DataMemberType.equalsIgnoreCase(THOUSANDSEPARATOR)) {
                        NumberFormat CurrencyFormat = new DecimalFormat("###,###,##0.00");
                        if (valueText.isEmpty()) {
                            valueText = "0.00";
                        } else {
                            String valueText2 = CurrencyFormat.format(Double.parseDouble(valueText));
                            System.out.println();
                            valueText = valueText2;
                        }
                        formValues.put(config.FieldName.toUpperCase(), valueText);

                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            LinearLayout content1 = new LinearLayout(this);
            content1.setOrientation(LinearLayout.VERTICAL);
            content1.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));

            LinearLayout content = new LinearLayout(this);
            content.setOrientation(LinearLayout.VERTICAL);
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
            content.setLayoutParams(layoutParams);
            content.setTag(config.FieldName.toUpperCase());


            int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
            contentHeight = (int) Math.round(contentHeight * heightRatio);


            if (!config.FieldName.equalsIgnoreCase("Title") && config.ShowBorder != 0) {
                //simple label with borders
                customView.createFormContentLabel("", formContent, config, valueText);

            } else {
                if (config.FieldName.equalsIgnoreCase("Title")) {
                    titleVisible = true;
                }

                if (config.HeaderWidth == 0 && config.ValueWidth == 0) {
                    TextView label;
                    label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                            ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                            config.NewText, 0, config.HFontStyle, config.HAlignment, 0, config.FieldName, typeFace, config.DataMemberType, config.ValueWidth);
                    content.addView(label);

                    label.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            executeActionConfig(config.FieldName, AN_FORMLABELCLICKED, "");
                        }
                    });
                }
                if (config.HeaderWidth == 100 && config.ValueWidth == 0) {

                    if (config.FieldName.equalsIgnoreCase("Title")) {
                        float size = Float.parseFloat(String.valueOf(fontsize));
                        float textsize = config.HFontSize * size;
                        filterTextsize = (18) * size;
                        TextView label;
                        if (config.FieldName.equalsIgnoreCase("Title")) {

                            if (valueText != null) {
                                screenNameText.setText(valueText);
                            } else {
                                screenNameText.setText(config.NewText.toString());
                            }
                            screenNameText.setVisibility(View.VISIBLE);

                            if (ut_sp.getStringValue(UT_Constants.XML_SOLUTION_NAME).equals("WMS")) {
                                appNameText.setText("Simplr Solutions");
                            } else {
                                if (menuCount > 3) {
                                    appNameText.setText("");
                                } else {
                                    appNameText.setText("Simplr Sales");
                                }
                            }

                        } else {

                            label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);
                            content.addView(label);

                            label.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    executeActionConfig(config.FieldName, AN_FORMLABELCLICKED, "");
                                }
                            });

                        }
                    }

                } else if (config.HeaderWidth == 0 && config.ValueWidth == 100 && config.FieldName.equalsIgnoreCase("Title")) {

                    float size = Float.parseFloat(String.valueOf(fontsize));
                    float textsize = config.VFontSize * size;
                    filterTextsize = (18) * size;
                    TextView label;
                    if (config.FieldName.equalsIgnoreCase("Title")) {
                        screenNameText.setText(config.NewText.toString());
                        screenNameText.setVisibility(View.VISIBLE);
                        if (ut_sp.getStringValue(UT_Constants.XML_SOLUTION_NAME).equals("WMS")) {
                            appNameText.setText("Simplr Solutions");
                        } else {
                            if (menuCount > 3) {
                                appNameText.setText("");
                            } else {
                                appNameText.setText("Simplr Sales");
                            }
                        }
                    } else {

                        label = ut_view.generateFormCreateTextView(textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                                ut_common.translateColor(config.VBackColor), ut_common.translateColor(config.VForeColor),
                                valueText, textsize, config.VFontStyle, config.VAlignment, config.ShowBorder, config.FieldName, config.DataMemberType);
                        content.addView(label);

                        label.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                executeActionConfig(config.FieldName, AN_FORMLABELCLICKED, "");
                            }
                        });

                    }

                } else if (config.ValueWidth != 0 || config.HeaderWidth != 0) {

                    float size = Float.parseFloat(String.valueOf(fontsize));
                    float textsize = config.VFontSize * size;

                    if (config.ShowBorder != 1) {

                        if (valueText == null) {
                            valueText = config.NewText;
                        }

                        Typeface typeFace = Typeface.createFromAsset(getAssets(), "fonts/Poppins-Light.ttf");
                        try {
                            typeFace = Typeface.createFromAsset(getAssets(), "fonts/" + config.VFont);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                                ut_common.translateColor(config.VBackColor), ut_common.translateColor(config.VForeColor),
                                valueText, textsize, config.HFontStyle, config.HAlignment, 0, config.FieldName, typeFace, config.DataMemberType, config.ValueWidth);


                        //gravity
                        if (config.HAlignment == AL_CENTER) {
                            label.setGravity(Gravity.CENTER_HORIZONTAL);
                        } else if (config.HAlignment == AL_RIGHT) {
                            label.setGravity(Gravity.END);
                        } else if (config.HAlignment == AL_LEFT) {
                            label.setGravity(Gravity.START);
                        }


                        content.addView(label);

                        label.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                executeActionConfig(config.FieldName, AN_FORMLABELCLICKED, "");
                            }
                        });

                    } else {

                        int width = (int) (config.HeaderWidth * (screenWidth / 100.0)) + (int) (config.ValueWidth * (screenWidth / 100.0));
                        TextInputLayout passTextInputLayout = new TextInputLayout(this);
                        passTextInputLayout.setLayoutParams(new LinearLayout.LayoutParams(width, LinearLayout.LayoutParams.WRAP_CONTENT));
                        passTextInputLayout.setBoxBackgroundColor(config.VBackColor);
                        if (DesigchangeIdentity == 0) {
                            passTextInputLayout.setBoxBackgroundMode(TextInputLayout.BOX_BACKGROUND_OUTLINE);
                        }

                        passTextInputLayout.setHint(config.NewText);
                        passTextInputLayout.setPadding(textPadding, textPadding, textPadding, textPadding);
                        passTextInputLayout.setHintTextColor(ColorStateList.valueOf(config.VForeColor));
                        passTextInputLayout.setTag(config.FieldName.toUpperCase());

                        TextInputEditText textView = new TextInputEditText(passTextInputLayout.getContext());
                        textView.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                        textView.setTag(config.FieldName.toUpperCase());
                        textView.setTextSize(textsize);
                        textView.setTypeface(typeFace);
                        textView.setTextColor(config.VForeColor);

                        textView.setSingleLine(true);
                        textView.setClickable(false);
                        textView.setCursorVisible(false);
                        textView.setFocusable(false);

                        //gravity
                        if (config.HAlignment == AL_CENTER) {
                            passTextInputLayout.setGravity(Gravity.CENTER);

                        } else if (config.HAlignment == AL_RIGHT) {
                            passTextInputLayout.setGravity(Gravity.CENTER_VERTICAL | Gravity.RIGHT);

                        } else if (config.HAlignment == AL_LEFT) {
                            passTextInputLayout.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);

                        } else if (config.HAlignment == AL_TOP) {
                            passTextInputLayout.setGravity(Gravity.TOP);
                        }
                        if (config.DataMemberType.equalsIgnoreCase("CURRENCY")) {

                            if (valueText != null) {
                                if (!valueText.isEmpty()) {

                                    DA_System da_system = new DA_System(getApplicationContext());
                                    String currencySymbol = da_system.getCurrency();

                                    if (system.get(0).PriceRoundingDigits != null) {
                                        if (!system.get(0).PriceRoundingDigits.isEmpty() && !system.get(0).PriceRoundingDigits.equals("0")) {
                                            String formt = "###,###,##0.";
                                            int count = parseInt(system.get(0).PriceRoundingDigits);
                                            for (int j = 0; j < count; j++) {
                                                formt = formt + "0";
                                            }
                                            NumberFormat CurrencyFormat1 = new DecimalFormat(formt);
                                            valueText = CurrencyFormat1.format(Double.parseDouble(valueText));
                                            valueText = currencySymbol + " " + valueText;
                                        } else if (system.get(0).PriceRoundingDigits.equals("0")) {
                                            NumberFormat CurrencyFormat2 = new DecimalFormat("###,###,##0");
                                            valueText = CurrencyFormat2.format(Double.parseDouble(valueText));
                                            valueText = currencySymbol + " " + valueText;
                                        } else {
                                            NumberFormat CurrencyFormat3 = new DecimalFormat("###,###,##0.00");
                                            valueText = CurrencyFormat3.format(Double.parseDouble(valueText));
                                            valueText = currencySymbol + " " + valueText;
                                        }
                                    } else {
                                        NumberFormat CurrencyFormat4 = new DecimalFormat("###,###,##0.00");
                                        valueText = CurrencyFormat4.format(Double.parseDouble(valueText));
                                        valueText = currencySymbol + " " + valueText;
                                    }
                                    textView.setText(valueText);
                                }
                            }
                        } else if (config.DataMemberType.equalsIgnoreCase("THOUSANDSEPARATOR")) {

                            if (valueText != null) {
                                if (!valueText.isEmpty()) {

                                    NumberFormat CurrencyFormat = new DecimalFormat("###,###,##0.00");
                                    valueText = CurrencyFormat.format(Double.parseDouble(valueText));
                                    valueText = valueText;
                                    textView.setText(valueText);
                                }
                            }
                        }


                        if (valueText != null) {
                            ArrayList<BE_System> system;
                            DA_System da_System = new DA_System(this);
                            if (ut_sp.getStringValue(XML_SOLUTION_NAME).equals("WMS")) {
                                system = da_System.getBESystems();
                            } else {
                                system = da_System.getBESystems2();
                            }

                            if (config.DataMemberType.toUpperCase().equals("DATE")) {

                                String inputPattern = system.get(0).DateFormatView;
                                String outputPattern = system.get(0).DateFormatString;

                                SimpleDateFormat inputFormat = new SimpleDateFormat(inputPattern);
                                SimpleDateFormat outputFormat = new SimpleDateFormat(outputPattern);

                                Date date = null;
                                String str = null;

                                try {
                                    date = inputFormat.parse(valueText);
                                    str = outputFormat.format(date);
                                } catch (ParseException e) {
                                    e.printStackTrace();
                                }

                                textView.setText(str);

                            } else if (config.DataMemberType.toUpperCase().equals("DATETIME")) {
                                String inputPattern = system.get(0).DateTimeFormatView;
                                String outputPattern = system.get(0).DateTimeFormatString;

                                SimpleDateFormat inputFormat = new SimpleDateFormat(inputPattern);
                                SimpleDateFormat outputFormat = new SimpleDateFormat(outputPattern);

                                Date date = null;
                                String str = null;

                                try {
                                    date = inputFormat.parse(valueText);
                                    str = outputFormat.format(date);
                                } catch (ParseException e) {
                                    e.printStackTrace();
                                }

                                textView.setText(str);
                            } else if (config.DataMemberType.toUpperCase().equals("TIME")) {
                                String inputPattern = system.get(0).TimeFormatView;
                                String outputPattern = system.get(0).TimeFormatString;

                                SimpleDateFormat inputFormat = new SimpleDateFormat(inputPattern);
                                SimpleDateFormat outputFormat = new SimpleDateFormat(outputPattern);

                                Date date = null;
                                String str = null;

                                try {
                                    date = inputFormat.parse(valueText);
                                    str = outputFormat.format(date);
                                } catch (ParseException e) {
                                    e.printStackTrace();
                                }

                                textView.setText(str);
                            } else {
                                textView.setText(valueText);
                            }

                        }

                        passTextInputLayout.addView(textView);
                        content.addView(passTextInputLayout);
                    }
                }

                if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
                    content1.setVisibility(View.GONE);  //GONE
                }

            }

//            content.setBackgroundColor(getColor(com.rei.view.R.color.colorAccent));

            content1.addView(content);
            formContent.addView(content1);
        }
    }


    public void createFormContentButton(LinearLayout formContent, BE_FormConfig config, String valueText) {
        try {
            LinearLayout content = new LinearLayout(this);
            content.setOrientation(LinearLayout.VERTICAL);
            int contentwidth = (int) (config.HeaderWidth * (screenWidth / 100.0)) + (int) (config.ValueWidth * (screenWidth / 100.0));
            content.setLayoutParams(new LinearLayout.LayoutParams(contentwidth, LinearLayout.LayoutParams.WRAP_CONTENT));

            int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
            contentHeight = (int) Math.round(contentHeight * heightRatio);


            if (config.ValueWidth > 0) {

                int width = (int) (config.ValueWidth * (screenWidth / 100.0));
                String backColor = "#000080";
                String foreColor = "#ffffff";
                float size = Float.parseFloat(String.valueOf(fontsize));
                float textsize = config.VFontSize * size;


                MaterialButton value = ut_view.generateFormButton(textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                        ut_common.translateColor(config.VBackColor), ut_common.translateColor(config.VForeColor),
                        config.DefaultValue, textsize, config.VFontStyle, config.VAlignment, config.ShowBorder, config.FieldName, valueText, typeFace);

                value.setOnClickListener(onFormButtonClick(AN_FORMBUTTONCLICKED));


                content.addView(value);
            }

//

            if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
                content.setVisibility(View.GONE);  //GONE
            }

            LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
            marginParams.topMargin = DEFAULT_MARGIN;


            formContent.addView(content);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void createFormContentGButton(Activity activity, LinearLayout formContent, BE_FormConfig config, String valueText) {
        try {
            LinearLayout content = new LinearLayout(this);
            content.setOrientation(LinearLayout.HORIZONTAL);
            content.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));

            int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
            contentHeight = (int) Math.round(contentHeight * heightRatio);

            if (config.HeaderWidth > 0) {
                float size = Float.parseFloat(String.valueOf(fontsize));
                float textsize = config.HFontSize * size;

                TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                        ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                        config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);


                content.addView(label);
            }
            if (config.ValueWidth > 0) {

                int width = (int) (config.ValueWidth * (screenWidth / 100.0));
                String backColor = "#000080";
                String foreColor = "#ffffff";
                float size = Float.parseFloat(String.valueOf(fontsize));
                float textsize = config.VFontSize * size;

                ImageView value = ut_view.generateImageButton(activity, textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                        ut_common.translateColor(config.VBackColor), ut_common.translateColor(config.VForeColor),
                        config.DefaultValue, textsize, config.VFontStyle, config.VAlignment, config.ShowBorder, config.FieldName, valueText, typeFace);


                value.setOnClickListener(onFormButtonClick(AN_GridLayoutButtonClicked));
                content.addView(value);
            }

            if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
                content.setVisibility(View.GONE);  //GONE
            }

            LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
            marginParams.topMargin = DEFAULT_MARGIN;

            formContent.addView(content);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public void createFormContentLButton(Activity activity, LinearLayout formContent, BE_FormConfig config, String valueText) {
        try {
            LinearLayout content = new LinearLayout(this);
            content.setOrientation(LinearLayout.HORIZONTAL);
            content.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));

            int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
            contentHeight = (int) Math.round(contentHeight * heightRatio);

            if (config.HeaderWidth > 0) {
                float size = Float.parseFloat(String.valueOf(fontsize));
                float textsize = config.HFontSize * size;

                TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                        ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                        config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);


                content.addView(label);
            }
            if (config.ValueWidth > 0) {

                int width = (int) (config.ValueWidth * (screenWidth / 100.0));
                String backColor = "#000080";
                String foreColor = "#ffffff";
                float size = Float.parseFloat(String.valueOf(fontsize));
                float textsize = config.VFontSize * size;

                ImageView value = ut_view.generateImageLButton(activity, textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                        ut_common.translateColor(config.VBackColor), ut_common.translateColor(config.VForeColor),
                        config.DefaultValue, textsize, config.VFontStyle, config.VAlignment, config.ShowBorder, config.FieldName, valueText, typeFace);


                value.setOnClickListener(onFormButtonClick(AN_ListLayoutButtonClicked));
                content.addView(value);
            }

            if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
                content.setVisibility(View.GONE);  //GONE
            }

            LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
            marginParams.topMargin = DEFAULT_MARGIN;

            formContent.addView(content);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void createFormContentButtonGroup(LinearLayout formContent, BE_FormConfig
            config, String screen) {
        MaterialButton elasticButton = null;
        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.MATCH_PARENT));

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        if (config.HeaderWidth > 0) {
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;

            TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);


            content.addView(label);
        }

        if (config.ValueWidth > 0) {
            HashMap<String, ArrayList<String>> rtn = new HashMap<>();
            int width = (int) (config.ValueWidth * (screenWidth / 100.0));
            String backColor = "#000080";
            String foreColor = "#ffffff";
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.VFontSize * size;
            HorizontalScrollView linearLayout = new HorizontalScrollView(MainActivity.this);
            linearLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));

            String screenName = screen + "_FORM_" + FC_BUTTONGROUP + "_" + config.FieldName;
            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenName);
            String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            fileHelper.fileWriter("Form ButtonGroup Query : " + query, writer);
            Log.d("Form ButtonGroup Query", query);
            rtn = da_dynamics.getDataSyncValues(query);


            ButtonGroup buttonGroup = new ButtonGroup();
            buttonGroup.buttonGroupView(this, config, linearLayout, width, contentHeight, textPadding, rtn, formValues);
            content.addView(linearLayout);

        }

        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }
        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;

        formContent.addView(content);
    }

    public void createFormContentButtonList(LinearLayout formContent, BE_FormConfig
            config, String screen) {
        MaterialButton elasticButton = null;
        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.MATCH_PARENT));

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        if (config.HeaderWidth > 0) {
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;

            TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);


            content.addView(label);
        }

        if (config.ValueWidth > 0) {
            HashMap<String, ArrayList<String>> rtn = new HashMap<>();
            int width = (int) (config.ValueWidth * (screenWidth / 100.0));
            String backColor = "#000080";
            String foreColor = "#ffffff";
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.VFontSize * size;
            HorizontalScrollView linearLayout = new HorizontalScrollView(MainActivity.this);
            linearLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));

            String screenName = screen + "_FORM_" + FC_MULTIPLEBUTTON + "_" + config.FieldName;
            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenName);
            String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
//            fileHelper.fileWriter("Form ButtonGroup Query : " + query, writer);
            Log.d("Form ButtonGroup Query", query);
            rtn = da_dynamics.getDataSyncValues(query);


            ButtonList buttonList = new ButtonList();
            buttonList.buttonListView(this, config, linearLayout, width, contentHeight, textPadding, rtn, formValues);
            content.addView(linearLayout);

        }

        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }
        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;

        formContent.addView(content);
    }


    public void createFormContentOption(LinearLayout formContent, BE_FormConfig
            config, String valueText) {
        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));

        LinearLayout linearLayout = new LinearLayout(this);
        linearLayout.setOrientation(LinearLayout.HORIZONTAL);
        linearLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        if (config.HeaderWidth > 0) {
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;

            TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, 3, config.ShowBorder, config.FieldName, typeFace, config.DataMemberType, config.ValueWidth);
            linearLayout.addView(label);
            label.setGravity(Gravity.CENTER_VERTICAL);

        }
        if (config.ValueWidth > 0) {
            LinearLayout value = null;
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.VFontSize * size;

            if (config.FieldControl.equalsIgnoreCase(FC_OPTION)) {

                value = ut_view.generateCheckBox(screen, textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                        ut_common.translateColor(config.VBackColor), ut_common.translateColor(config.VForeColor),
                        valueText, (int) textsize, config.FieldName, FC_OPTION, config.VAlignment, config.DefaultText, formValues, config.NewText);

            } else if (config.FieldControl.equalsIgnoreCase(FC_DISABLEDOPTION)) {

                value = ut_view.generateCheckBox(screen, textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                        ut_common.translateColor(config.VBackColor), ut_common.translateColor(config.VForeColor),
                        valueText, (int) textsize, config.FieldName, FC_DISABLEDOPTION, config.VAlignment, config.DefaultText, formValues, config.NewText);

            }

            linearLayout.addView(value);

        }

        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            linearLayout.setVisibility(View.GONE);  //GONE
        }

        content.addView(linearLayout);
        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;
        marginParams.rightMargin = 30;
        marginParams.leftMargin = 30;
        formContent.addView(content);
    }

    View EditTextView;
    boolean Focus = false;


    public void createFormMultiOptionList(LinearLayout formContent, BE_FormConfig
            config, String valueText) {
        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);

        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.MATCH_PARENT));
        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        boolean hasAction = false;
        for (BE_ActionConfig actionConfig : actionConfigs) {
            if (actionConfig.ActionName.equalsIgnoreCase(AN_COMBOBOXFORMITEMCLICKED) && actionConfig.FieldName.equalsIgnoreCase(config.FieldName)) {
                hasAction = true;
                actionConfig.hasAction = true;
                break;
            }
        }

        spinnerItems = getComboBoxValues("", config.FieldName, screen);
        formSpinners.put(config.FieldName.toUpperCase(), spinnerItems);

        for (int i = 0; i < spinnerItems.size(); i++) {
            formValues.put(config.FieldName.toUpperCase(), spinnerItems.get(0).Code);
        }
        ArrayList<String> spinnerValue = new ArrayList<>();

        int selectedIndex = 0;


        if (config.ValueWidth > 0) {
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.VFontSize * size;
            int width = (int) (config.ValueWidth * (screenWidth / 100.0)) + (int) (config.HeaderWidth * (screenWidth / 100.0));

            TextInputLayout spinner = new TextInputLayout(new ContextThemeWrapper(this, com.google.android.material.R.style.Widget_MaterialComponents_TextInputLayout_FilledBox_Dense_ExposedDropdownMenu));
            spinner.setLayoutParams(new LinearLayout.LayoutParams(width, ViewGroup.LayoutParams.WRAP_CONTENT));
            if (DesigchangeIdentity == 0) {
                spinner.setBoxBackgroundMode(TextInputLayout.BOX_BACKGROUND_OUTLINE);
            }
            spinner.setBoxBackgroundColor(config.VBackColor);
            spinner.setHint(config.NewText);

            AutoCompleteTextView autocomplete = new AutoCompleteTextView(new ContextThemeWrapper(spinner.getContext(), com.google.android.material.R.style.Widget_MaterialComponents_AutoCompleteTextView_FilledBox_Dense));
            autocomplete.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, contentHeight));
            autocomplete.setTextSize(textsize);

            for (int i = 0; i < spinnerItems.size(); i++) {
                spinnerValue.add(spinnerItems.get(i).Text);

                if (spinnerItems.get(i).Text.equals(valueText)) {
                    selectedIndex = i;
                    autocomplete.setText(valueText);
                }
            }
            autocomplete.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                        mainContent.setAlpha(0.5f);
                    }
                    ut_dialog.ShowPopupMultioptionList(MainActivity.this, spinnerItems, config);
                }
            });
            if (!spinnerValue.isEmpty()) {
                ArrayAdapter<String> dataAdapter1 = new ArrayAdapter<String>(MainActivity.this,
                        R.layout.list_itemautotrial, spinnerValue);
                dataAdapter1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                autocomplete.setAdapter(dataAdapter1);

            }

            autocomplete.setTag(config.FieldName.toUpperCase());
            autocomplete.setInputType(InputType.TYPE_NULL);
            autocomplete.setClickable(true);
            autocomplete.setCursorVisible(false);
            autocomplete.setFocusable(false);
            autocomplete.setOnItemClickListener(
                    new AutoCompleteTextViewClickListener(autocomplete, this, formSpinners, hasAction));
            spinner.addView(autocomplete);

            content.addView(spinner);
        }
        if (config.ValueHeight == 0 && config.HeaderHeight == 0) {
            content.setVisibility(View.GONE);
        } else {
            content.setVisibility(View.VISIBLE);
        }
        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;
        formContent.addView(content);

    }


    public void createFormContentComboBox(LinearLayout formContent, BE_FormConfig
            config, String screen, String valueText) {

        boolean hasAction = false;
        for (BE_ActionConfig actionConfig : actionConfigs) {
            if (actionConfig.ActionName.equalsIgnoreCase(AN_COMBOBOXFORMITEMCLICKED) && actionConfig.FieldName.equalsIgnoreCase(config.FieldName)) {
                hasAction = true;
                actionConfig.hasAction = true;
                break;
            }
        }

        if (config.HeaderHeight > 0 && config.ValueHeight > 0) {

            customView.createFormContentComboboxNew("", formContent, config, valueText,
                    getComboBoxValues("", config.FieldName, screen), hasAction,
                    (Code, Text, hasAction1) -> {
                        String fieldName = config.FieldName;

                        fileHelper.fileWriter("onItemSelected fieldName : " + fieldName + "onItemSelected value : " + Code, writer);

                        if (Text.equals("Othersss") || Text.equals("OTHERSss")) {
                            executeActionConfig(fieldName, AN_COMBOBOXFORMITEMCLICKED, "");
                        } else {
                            formValues.put(SQL_BEFORE, formValues.get(fieldName.toUpperCase()));
                            formValues.put(fieldName.toUpperCase(), Code);
                            formValues.put(SQL_AFTER, Code);
                        }

                        fileHelper.fileWriter("formValues " + fieldName.toUpperCase() + ": " + formValues.get(fieldName.toUpperCase()), writer);


                        Disposable d = Single.timer((long) 100, TimeUnit.MILLISECONDS)
                                .subscribeOn(Schedulers.io())
                                .observeOn(AndroidSchedulers.mainThread())
                                .subscribe(ignored -> {
                                    if (hasAction1) {
                                        executeActionConfig(fieldName, AN_COMBOBOXFORMITEMCLICKED, "");
                                    }
                                });

                        disposables.add(d);

                    });

        }

    }

    public void createFormContentMultiComboBox(LinearLayout formContent, BE_FormConfig
            config, String screen, String valueText) {

        boolean hasAction = false;
        for (BE_ActionConfig actionConfig : actionConfigs) {
            if (actionConfig.ActionName.equalsIgnoreCase(AN_COMBOBOXFORMITEMCLICKED) && actionConfig.FieldName.equalsIgnoreCase(config.FieldName)) {
                hasAction = true;
                actionConfig.hasAction = true;
                break;
            }
        }

        formValues.put("MULTICOMBOBOX." + config.FieldName.toUpperCase(), valueText);

        if (config.HeaderHeight > 0 && config.ValueHeight > 0) {

            customView.createFormContentMultiComboboxNew("", formContent, config, valueText,
                    getComboBoxValues("", config.FieldName, screen), hasAction,
                    (Code, Text, hasAction1) -> {

                        System.out.println("Code : " + Code);
                        System.out.println("Text : " + Text);
                        System.out.println("hasAction1 : " + hasAction1);

                        String fieldName = config.FieldName;


                        formValues.put(SQL_BEFORE, formValues.get(fieldName.toUpperCase()));
                        formValues.put("MULTICOMBOBOX." + fieldName.toUpperCase(), Code);
                        formValues.put(SQL_AFTER, Code);


                        System.out.println("formValues : " + formValues);

                        Disposable d = Single.timer((long) 100, TimeUnit.MILLISECONDS)
                                .subscribeOn(Schedulers.io())
                                .observeOn(AndroidSchedulers.mainThread())
                                .subscribe(ignored -> {
                                    if (hasAction1) {
                                        executeActionConfig(fieldName, AN_COMBOBOXFORMITEMCLICKED, "");
                                    }
                                });

                        disposables.add(d);

                    });

        }

    }

    public void createFormContentImageComboBox(LinearLayout formContent, BE_FormConfig
            config, String screen, String valueText) {

        boolean hasAction = false;
        for (BE_ActionConfig actionConfig : actionConfigs) {
            if (actionConfig.ActionName.equalsIgnoreCase(AN_COMBOBOXFORMITEMCLICKED) && actionConfig.FieldName.equalsIgnoreCase(config.FieldName)) {
                hasAction = true;
                actionConfig.hasAction = true;
                break;
            }
        }

        if (config.HeaderHeight > 0 && config.ValueHeight > 0) {

            customView.createFormContentImageCombobox("", formContent, config, valueText,
                    getImageComboBoxValues("", config.FieldName, screen), hasAction,
                    (Code, Text, hasAction1) -> {
                        String fieldName = config.FieldName;
                        String value = Code;
                        fileHelper.fileWriter("onItemSelected fieldName : " + fieldName + "onItemSelected value : " + value, writer);

                        if (Text.equals("Othersss") || Text.equals("OTHERSss")) {
                            executeActionConfig(fieldName, AN_COMBOBOXFORMITEMCLICKED, "");
                        } else {
                            formValues.put(SQL_BEFORE, formValues.get(fieldName.toUpperCase()));
                            formValues.put(fieldName.toUpperCase(), Code);
                            formValues.put(SQL_AFTER, Code);
                        }

                        fileHelper.fileWriter("formValues " + fieldName.toUpperCase() + ": " + formValues.get(fieldName.toUpperCase()), writer);


                        Disposable d = Single.timer((long) 100, TimeUnit.MILLISECONDS)
                                .subscribeOn(Schedulers.io())
                                .observeOn(AndroidSchedulers.mainThread())
                                .subscribe(ignored -> {
                                    if (hasAction1) {
                                        executeActionConfig(fieldName, AN_COMBOBOXFORMITEMCLICKED, "");
                                    }
                                });

                        disposables.add(d);

                    });

        }

    }


    public void createFormContentWebview(LinearLayout formRow, BE_FormConfig config, String valueText) {
        deleteReportfile();
        webViewArrayList = new ArrayList<WebView>();

        String queryscreenname = screen + "_" + config.FieldControl + "_" + config.FieldName + "_MULTIPLEPRINTING";
        BE_QueryConfig webqueryFormConfig = da_queryConfig.getQueryConfig(queryscreenname);
        System.out.println("getGroupId webqueryFormConfig : " + webqueryFormConfig);

        if (webqueryFormConfig.QueryText != null && !webqueryFormConfig.QueryText.isEmpty()) {
            HashMap<String, String> rtn = new HashMap<>();
            String completeQuery = ut_common.getQuery(webqueryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            fileHelper.fileWriter("getGroupId Query : " + completeQuery, writer);
            System.out.println("getGroupId Query : " + completeQuery);
            rtn = da_dynamics.getgroupId(completeQuery);

            System.out.println("rtn : " + rtn);

            String groupId = "0";
            if (rtn != null && !rtn.isEmpty()) {
                groupId = rtn.get("FormatID");
            }

            DA_FormConfig da_formConfig = new DA_FormConfig(this);
            printConfigs = da_formConfig.getPrintConfigsGroupID(screen, language, groupId);   // Used only for Print
        }

        if (finalselectvalues != null) {
            System.out.println("finalselectvalues : " + finalselectvalues);
            if (!finalselectvalues.isEmpty()) {
                for (int i = 0; i < this.finalselectvalues.size(); i++) {

                    selectedListValues = finalselectvalues.get(i);
                    paramSelectedListValues = selectedListValues;

                    String formQuery = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("Web formQuery : " + formQuery, writer);
                    System.out.println("formQuery :: " + formQuery);
                    formValues = new HashMap<>();
                    formSpinners = new HashMap<>();
                    if (!formQuery.equals("")) {
                        fileHelper.fileWriter("getFormConfigValues Query : " + formQuery, writer);
                        formValues = da_dynamics.getFormConfigValues(formQuery);
                        System.out.println("formValues :: " + formValues);
                    }

                    LinearLayout content = new LinearLayout(this);
                    content.setOrientation(LinearLayout.HORIZONTAL);
                    content.setPadding(10, 10, 10, 10);
                    content.setBackgroundColor(getResources().getColor(R.color.colorWhite));
                    LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
                    layoutParams.setMargins(0, 0, 0, 10);
                    content.setLayoutParams(layoutParams);
                    // content.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                    int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
                    contentHeight = (int) Math.round(contentHeight * heightRatio);

                    if (config.ValueWidth > 0) {
                        // WebView webView = findViewById(R.id.webView);

                        WebView webView = new WebView(this);
                        webView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                        webView.setVisibility(View.VISIBLE);


                        webView.getSettings().setBuiltInZoomControls(true); // Enable zoom controls
                        webView.getSettings().setDisplayZoomControls(false); // Hide default zoom controls
                        webView.getSettings().setSupportZoom(true); // Enable zoom support
                        webView.getSettings().setUseWideViewPort(true); // Allow viewport-based scaling
                        webView.getSettings().setLoadWithOverviewMode(true);


                        if (config.ValueWidth > 0 && screen.equals("NewCustomer")) {
                            int width = (int) (config.ValueWidth * (screenWidth / 100.0)) + (int) (config.HeaderWidth * (screenWidth / 100.0));
                            webView.setLayoutParams(new LinearLayout.LayoutParams(width, contentHeight));
                            webView.setWebViewClient(new WebViewClient());
                            webView.getSettings().setJavaScriptEnabled(true);
                            webView.loadUrl(config.DefaultValue);
                        } else {
                            System.out.println("printListConfig 1 : " + printListConfig);
                            HtmlfileViewer htmlFile = new HtmlfileViewer();
                            linesPrinted = htmlFile.htmlFileCreate(MainActivity.this, screen, printConfigs, printListConfig, da_dynamics, da_queryConfig, system, ut_common, formValues, selectedListValues, paramFormValues, paramSelectedListValues, fileHelper, i, language, (screenWidth / 100.0));
                            webView.setWebViewClient(new WebViewClient());
                            webView.getSettings().setAllowContentAccess(true);
                            webView.getSettings().setAllowFileAccess(true);
                            webView.getSettings().setJavaScriptEnabled(true);

                            String folder = "Report/";
                            String file_name = "Html_" + i;
                            String file_format = ".html";
                            File root = new File(fileHelper.getSalesDirectoryPath(), folder);
                            String fullName = root + "/" + file_name + file_format;

                            if (new File(fullName).exists()) {
                                webView.loadUrl(fullName);
                            }

                            int finalI = i;
                            int finalI1 = i;
                            webView.setWebViewClient(new WebViewClient() {
                                @Override
                                public void onPageCommitVisible(WebView view, String url) {
                                    super.onPageCommitVisible(view, url);

                                    webViewArrayList.add(webView);

                                    String folder = "Report/";
                                    String file_name = "Html_" + finalI;
                                    String file_format = ".pdf";
                                    File root = new File(fileHelper.getSalesDirectoryPath(), folder);
                                    String fullName = root + "/" + file_name + file_format;

                                    try {
                                        convertWebViewToPdf(getApplicationContext(), webView, fullName);
                                    } catch (Exception e) {
                                        throw new RuntimeException(e);
                                    }


                                    Disposable d2 = Single.timer((long) 2, TimeUnit.SECONDS)
                                            .subscribeOn(Schedulers.io())
                                            .observeOn(AndroidSchedulers.mainThread())
                                            .subscribe(ignored -> {
                                                executeActionConfig(config.FieldName, AN_WebViewEnd, "");
                                            });
                                    disposables.add(d2);

                                }

                                @Override
                                public void onPageFinished(WebView view, String url) {
                                    super.onPageFinished(view, url);

                                }
                            });


                        }
                        webView.setOnTouchListener(new View.OnTouchListener() {
                            private float downX, downY;

                            @Override
                            public boolean onTouch(View v, MotionEvent event) {
                                switch (event.getAction()) {
                                    case MotionEvent.ACTION_DOWN:
                                        downX = event.getX();
                                        downY = event.getY();
                                        break;

                                    case MotionEvent.ACTION_MOVE:
                                        float deltaX = Math.abs(event.getX() - downX);
                                        float deltaY = Math.abs(event.getY() - downY);

                                        if (deltaX > 10 || deltaY > 10) {
                                            v.getParent().requestDisallowInterceptTouchEvent(true);
                                        }
                                        break;

                                    case MotionEvent.ACTION_UP:
                                        v.getParent().requestDisallowInterceptTouchEvent(false);
                                        break;
                                }
                                return false;
                            }
                        });


                        content.addView(webView);

                        View view = new View(MainActivity.this);
                        view.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 20));

                        content.addView(view);


                    }


                    if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
                        System.out.println("View Gone for " + config.FieldName);
                        content.setVisibility(View.GONE);  //GONE
                    }

                    LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
                    marginParams.topMargin = DEFAULT_MARGIN;

                    formRow.addView(content);


                }
            } else {
                LinearLayout content = new LinearLayout(this);
                content.setOrientation(LinearLayout.HORIZONTAL);
                content.setPadding(10, 10, 10, 10);
                content.setBackgroundColor(getResources().getColor(R.color.colorWhite));
                LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
                layoutParams.setMargins(0, 0, 0, 10);
                content.setLayoutParams(layoutParams);
                int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
                contentHeight = (int) Math.round(contentHeight * heightRatio);

                System.out.println("Selec List : " + selectedListValues);


                if (config.ValueWidth > 0) {

                    WebView webView = new WebView(this);
                    webView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                    webView.setVisibility(View.VISIBLE);

                    webView.getSettings().setBuiltInZoomControls(true); // Enable zoom controls
                    webView.getSettings().setDisplayZoomControls(false); // Hide default zoom controls
                    webView.getSettings().setSupportZoom(true); // Enable zoom support
                    webView.getSettings().setUseWideViewPort(true); // Allow viewport-based scaling
                    webView.getSettings().setLoadWithOverviewMode(true);


                    if (config.ValueWidth > 0 && screen.equals("NewCustomer")) {
                        int width = (int) (config.ValueWidth * (screenWidth / 100.0)) + (int) (config.HeaderWidth * (screenWidth / 100.0));
                        webView.setLayoutParams(new LinearLayout.LayoutParams(width, contentHeight));
                        webView.setWebViewClient(new WebViewClient());
                        webView.getSettings().setJavaScriptEnabled(true);
                        webView.loadUrl(config.DefaultValue);
                    } else {

                        HtmlfileViewer htmlFile = new HtmlfileViewer();
                        linesPrinted = htmlFile.htmlFileCreate(MainActivity.this, screen, printConfigs, printListConfig, da_dynamics, da_queryConfig, system, ut_common, formValues, selectedListValues, paramFormValues, paramSelectedListValues, fileHelper, 0, language, (screenWidth / 100.0));
                        webView.setWebViewClient(new WebViewClient());
                        webView.getSettings().setAllowContentAccess(true);
                        webView.getSettings().setAllowFileAccess(true);
                        webView.getSettings().setJavaScriptEnabled(true);

                        String folder = "Report/";
                        String file_name = "Html_" + 0;
                        String file_format = ".html";
                        File root = new File(fileHelper.getSalesDirectoryPath(), folder);
                        String fullName = root + "/" + file_name + file_format;

                        if (new File(fullName).exists()) {
                            webView.loadUrl(fullName);
                        }

                        int finalI = 0;
                        int finalI1 = 0;
                        webView.setWebViewClient(new WebViewClient() {
                            @Override
                            public void onPageCommitVisible(WebView view, String url) {
                                super.onPageCommitVisible(view, url);

                                webViewArrayList.add(webView);

                                String folder = "Report/";
                                String file_name = "Html_" + finalI;
                                String file_format = ".pdf";
                                File root = new File(fileHelper.getSalesDirectoryPath(), folder);
                                String fullName = root + "/" + file_name + file_format;

                                try {
                                    convertWebViewToPdf(getApplicationContext(), webView, fullName);
                                } catch (Exception e) {
                                    throw new RuntimeException(e);
                                }


                                Disposable d2 = Single.timer((long) 2, TimeUnit.SECONDS)
                                        .subscribeOn(Schedulers.io())
                                        .observeOn(AndroidSchedulers.mainThread())
                                        .subscribe(ignored -> {
                                            executeActionConfig(config.FieldName, AN_WebViewEnd, "");
                                        });
                                disposables.add(d2);

                            }

                            @Override
                            public void onPageFinished(WebView view, String url) {
                                super.onPageFinished(view, url);
                            }
                        });
                    }

                    webView.setOnTouchListener(new View.OnTouchListener() {
                        private float downX, downY;

                        @Override
                        public boolean onTouch(View v, MotionEvent event) {
                            switch (event.getAction()) {
                                case MotionEvent.ACTION_DOWN:
                                    downX = event.getX();
                                    downY = event.getY();
                                    break;

                                case MotionEvent.ACTION_MOVE:
                                    float deltaX = Math.abs(event.getX() - downX);
                                    float deltaY = Math.abs(event.getY() - downY);

                                    if (deltaX > 10 || deltaY > 10) {
                                        v.getParent().requestDisallowInterceptTouchEvent(true);
                                    }
                                    break;

                                case MotionEvent.ACTION_UP:
                                    v.getParent().requestDisallowInterceptTouchEvent(false);
                                    break;
                            }
                            return false;
                        }
                    });


                    content.addView(webView);
                }

                if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
                    System.out.println("View Gone for " + config.FieldName);
                    content.setVisibility(View.GONE);  //GONE
                }

                LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
                marginParams.topMargin = DEFAULT_MARGIN;

                formRow.addView(content);

            }
        } else {
            LinearLayout content = new LinearLayout(this);
            content.setOrientation(LinearLayout.HORIZONTAL);
            content.setPadding(10, 10, 10, 10);
            content.setBackgroundColor(getResources().getColor(R.color.colorWhite));
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
            layoutParams.setMargins(0, 0, 0, 10);
            content.setLayoutParams(layoutParams);
            int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
            contentHeight = (int) Math.round(contentHeight * heightRatio);

            System.out.println("Selec List 2 : " + selectedListValues);

            finalselectvalues.add(formValues);

            if (config.ValueWidth > 0) {

                WebView webView = new WebView(this);
                webView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                webView.setVisibility(View.VISIBLE);
                webView.getSettings().setBuiltInZoomControls(true); // Enable zoom controls
                webView.getSettings().setDisplayZoomControls(false); // Hide default zoom controls
                webView.getSettings().setSupportZoom(true); // Enable zoom support
                webView.getSettings().setUseWideViewPort(true); // Allow viewport-based scaling
                webView.getSettings().setLoadWithOverviewMode(true);


                if (config.ValueWidth > 0 && screen.equals("NewCustomer")) {
                    int width = (int) (config.ValueWidth * (screenWidth / 100.0)) + (int) (config.HeaderWidth * (screenWidth / 100.0));
                    webView.setLayoutParams(new LinearLayout.LayoutParams(width, contentHeight));
                    webView.setWebViewClient(new WebViewClient());
                    webView.getSettings().setJavaScriptEnabled(true);
                    webView.loadUrl(config.DefaultValue);
                } else {

                    HtmlfileViewer htmlFile = new HtmlfileViewer();
                    linesPrinted = htmlFile.htmlFileCreate(MainActivity.this, screen, printConfigs, printListConfig, da_dynamics, da_queryConfig, system, ut_common, formValues, selectedListValues, paramFormValues, paramSelectedListValues, fileHelper, 0, language, (screenWidth / 100.0));
                    webView.setWebViewClient(new WebViewClient());
                    webView.getSettings().setAllowContentAccess(true);
                    webView.getSettings().setAllowFileAccess(true);
                    webView.getSettings().setJavaScriptEnabled(true);

                    String folder = "Report/";
                    String file_name = "Html_" + 0;
                    String file_format = ".html";
                    File root = new File(fileHelper.getSalesDirectoryPath(), folder);
                    String fullName = root + "/" + file_name + file_format;

                    if (new File(fullName).exists()) {
                        webView.loadUrl(fullName);
                    }

                    int finalI = 0;
                    int finalI1 = 0;
                    webView.setWebViewClient(new WebViewClient() {
                        @Override
                        public void onPageCommitVisible(WebView view, String url) {
                            super.onPageCommitVisible(view, url);

                            webViewArrayList.add(webView);

                            String folder = "Report/";
                            String file_name = "Html_" + finalI;
                            String file_format = ".pdf";
                            File root = new File(fileHelper.getSalesDirectoryPath(), folder);
                            String fullName = root + "/" + file_name + file_format;

                            try {
                                convertWebViewToPdf(getApplicationContext(), webView, fullName);
                            } catch (Exception e) {
                                throw new RuntimeException(e);
                            }


                            Disposable d2 = Single.timer((long) 2, TimeUnit.SECONDS)
                                    .subscribeOn(Schedulers.io())
                                    .observeOn(AndroidSchedulers.mainThread())
                                    .subscribe(ignored -> {
                                        executeActionConfig(config.FieldName, AN_WebViewEnd, "");
                                    });
                            disposables.add(d2);


                        }

                        @Override
                        public void onPageFinished(WebView view, String url) {
                            super.onPageFinished(view, url);

                        }
                    });

                }

                webView.setOnTouchListener(new View.OnTouchListener() {
                    private float downX, downY;

                    @Override
                    public boolean onTouch(View v, MotionEvent event) {
                        switch (event.getAction()) {
                            case MotionEvent.ACTION_DOWN:
                                downX = event.getX();
                                downY = event.getY();
                                break;

                            case MotionEvent.ACTION_MOVE:
                                float deltaX = Math.abs(event.getX() - downX);
                                float deltaY = Math.abs(event.getY() - downY);

                                if (deltaX > 10 || deltaY > 10) {
                                    v.getParent().requestDisallowInterceptTouchEvent(true);
                                }
                                break;

                            case MotionEvent.ACTION_UP:
                                v.getParent().requestDisallowInterceptTouchEvent(false);
                                break;
                        }
                        return false;
                    }
                });

                content.addView(webView);

            }

            if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
                System.out.println("View Gone for " + config.FieldName);
                content.setVisibility(View.GONE);  //GONE
            }

            LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
            marginParams.topMargin = DEFAULT_MARGIN;

            formRow.addView(content);

        }

    }

    public void createFormContentWebviewNEW(LinearLayout formRow, BE_FormConfig config, String valueText) {
        deleteReportfile();
        webViewArrayList = new ArrayList<WebView>();

        String queryscreenname = screen + "_" + config.FieldControl + "_" + config.FieldName + "_MULTIPLEPRINTING";
        BE_QueryConfig webqueryFormConfig = da_queryConfig.getQueryConfig(queryscreenname);
        System.out.println("getGroupId webqueryFormConfig : " + webqueryFormConfig);

        if (webqueryFormConfig.QueryText != null && !webqueryFormConfig.QueryText.isEmpty()) {
            HashMap<String, String> rtn = new HashMap<>();
            String completeQuery = ut_common.getQuery(webqueryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            fileHelper.fileWriter("getGroupId Query : " + completeQuery, writer);
            System.out.println("getGroupId Query : " + completeQuery);
            rtn = da_dynamics.getgroupId(completeQuery);

            System.out.println("rtn : " + rtn);

            String groupId = "0";
            if (rtn != null && !rtn.isEmpty()) {
                groupId = rtn.get("FormatID");
            }

            DA_FormConfig da_formConfig = new DA_FormConfig(this);
            printConfigs = da_formConfig.getPrintConfigsGroupID(screen, language, groupId);   // Used only for Print
        }


        String formQuery = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
        fileHelper.fileWriter("formQuery : " + formQuery, writer);
        System.out.println("formQuery :: " + formQuery);
        formValuess = new ArrayList<HashMap<String, String>>();
        formSpinners = new HashMap<>();
        if (!formQuery.equals("")) {
            fileHelper.fileWriter("getFormConfigValues Query : " + formQuery, writer);
            formValuess = da_dynamics.getFormConfigValuesList(formQuery);
            System.out.println("formValues :: " + formValuess);
            System.out.println("formValues size :: " + formValuess.size());
        }

        for (int i = 0; i < formValuess.size(); i++) {
            formValues = formValuess.get(i);
            LinearLayout content = new LinearLayout(this);
            content.setOrientation(LinearLayout.HORIZONTAL);
            content.setPadding(10, 10, 10, 10);
            content.setBackgroundColor(getResources().getColor(R.color.colorWhite));
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
            layoutParams.setMargins(0, 0, 0, 10);
            content.setLayoutParams(layoutParams);
            int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
            contentHeight = (int) Math.round(contentHeight * heightRatio);

            if (config.ValueWidth > 0) {
                WebView webView = new WebView(this);
                webView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                webView.setVisibility(View.VISIBLE);
                webView.getSettings().setLoadWithOverviewMode(true);
                webView.getSettings().setUseWideViewPort(true);
                webView.getSettings().setBuiltInZoomControls(true);
                webView.getSettings().setSupportZoom(true);


                if (config.ValueWidth > 0 && screen.equals("NewCustomer")) {
                    int width = (int) (config.ValueWidth * (screenWidth / 100.0)) + (int) (config.HeaderWidth * (screenWidth / 100.0));
                    webView.setLayoutParams(new LinearLayout.LayoutParams(width, contentHeight));
                    webView.setWebViewClient(new WebViewClient());
                    webView.getSettings().setJavaScriptEnabled(true);
                    webView.loadUrl(config.DefaultValue);
                } else {
                    System.out.println("printListConfig 1 : " + printListConfig);
                    HtmlfileViewer htmlFile = new HtmlfileViewer();
                    linesPrinted = htmlFile.htmlFileCreate(MainActivity.this, screen, printConfigs, printListConfig, da_dynamics, da_queryConfig, system, ut_common, formValues, selectedListValues, paramFormValues, paramSelectedListValues, fileHelper, i, language, (screenWidth / 100.0));
                    webView.setWebViewClient(new WebViewClient());
                    webView.getSettings().setAllowContentAccess(true);
                    webView.getSettings().setAllowFileAccess(true);
                    webView.getSettings().setJavaScriptEnabled(true);

                    String folder = "Report/";
                    String file_name = "Html_" + i;
                    String file_format = ".html";
                    File root = new File(fileHelper.getSalesDirectoryPath(), folder);
                    String fullName = root + "/" + file_name + file_format;

                    if (new File(fullName).exists()) {
                        webView.loadUrl(fullName);
                    }

                    int finalI = i;
                    int finalI1 = i;
                    webView.setWebViewClient(new WebViewClient() {
                        @Override
                        public void onPageCommitVisible(WebView view, String url) {
                            super.onPageCommitVisible(view, url);

                            webViewArrayList.add(webView);

                            String folder = "Report/";
                            String file_name = "Html_" + finalI;
                            String file_format = ".pdf";
                            File root = new File(fileHelper.getSalesDirectoryPath(), folder);
                            String fullName = root + "/" + file_name + file_format;

                            try {
                                convertWebViewToPdf(getApplicationContext(), webView, fullName);
                            } catch (Exception e) {
                                throw new RuntimeException(e);
                            }
                            Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                                    .subscribeOn(Schedulers.io())
                                    .observeOn(AndroidSchedulers.mainThread())
                                    .subscribe(ignored -> {
                                        System.out.println("SAVED 3 : ");
                                        saveReport();

                                    });
                            disposables.add(d);

                            Disposable d2 = Single.timer((long) 2, TimeUnit.SECONDS)
                                    .subscribeOn(Schedulers.io())
                                    .observeOn(AndroidSchedulers.mainThread())
                                    .subscribe(ignored -> {
                                        executeActionConfig(config.FieldName, AN_WebViewEnd, "");
                                    });
                            disposables.add(d2);

                        }

                        @Override
                        public void onPageFinished(WebView view, String url) {
                            super.onPageFinished(view, url);

                        }
                    });


                }

                content.addView(webView);

                View view = new View(MainActivity.this);
                view.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 20));
                content.addView(view);


            }


            if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
                content.setVisibility(View.GONE);  //GONE
            }

            LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
            marginParams.topMargin = DEFAULT_MARGIN;
            formRow.addView(content);
        }

    }

    public static void convertWebViewToPdf(Context context, WebView webView, String pdfFilePath) {
        // Create a WebView bitmap
        try {
            Bitmap bitmap = Bitmap.createBitmap(webView.getWidth(), webView.getContentHeight(), Bitmap.Config.ARGB_8888);
            Canvas canvas = new Canvas(bitmap);
            webView.draw(canvas);

            // Create a PDF document
            PdfDocument document = new PdfDocument();

            // Create a page info with the WebView content size
            // Calculate the number of pages required to capture the entire WebView content
            int pageCount = (int) Math.ceil((double) webView.getContentHeight() / webView.getWidth());

            for (int i = 0; i < pageCount; i++) {
                // Create a page
                PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(webView.getWidth(), webView.getContentHeight(), pageCount + 1).create();
                PdfDocument.Page page = document.startPage(pageInfo);

                // Calculate the portion of the WebView content to capture for the current page
                int startY = i * webView.getWidth();
                float scale = (float) webView.getContentHeight() / webView.getWidth();
                int endY = Math.min((int) ((i + 1) * webView.getWidth() * scale), webView.getContentHeight());

                // Draw the WebView content portion onto the PDF document
                Canvas pdfCanvas = page.getCanvas();
                pdfCanvas.drawBitmap(bitmap, 0, 0, null);

                // Finish the page
                document.finishPage(page);
            }

            // Save the document to a file
            try {
                File pdfFile = new File(pdfFilePath);
                FileOutputStream outputStream = new FileOutputStream(pdfFile);
                document.writeTo(outputStream);
                outputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                document.close();
                bitmap.recycle();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void createFormContentRating(LinearLayout formContent, BE_FormConfig config) {
        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        if (config.HeaderWidth > 0) {
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;


            TextView label = ut_view.generateFormTextView(textPadding, config.HeaderHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);
            content.addView(label);
        }

        if (config.ValueWidth > 0) {

            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.VFontSize * size;

            LinearLayout value = ut_view.generatRating(textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                    config.VBackColorName, config.VForeColorName,
                    config.DefaultValue, textsize, config.FieldName, config.VFontStyle, config.VAlignment, config.ShowBorder);

            content.addView(value);
        }

        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }
        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;

        formContent.addView(content);

    }

    public void createFormContentChart(String screen, LinearLayout formContent, BE_FormConfig config) {
        try {

            try {
                if (chartscrollView != null) {
                    chartscrollView.removeAllViews();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            chartscrollView = new NestedScrollView(this);
            int ss = (int) ((int) config.ValueWidth * (screenWidth / 100));
            chartscrollView.setLayoutParams(new LinearLayout.LayoutParams(ss, LinearLayout.LayoutParams.MATCH_PARENT));
            chartscrollView.setTag(config.FieldName.toUpperCase());


            LinearLayout content1 = new LinearLayout(this);
            content1.setOrientation(LinearLayout.VERTICAL);
            content1.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));

            LinearLayout content = new LinearLayout(this);
            content.setOrientation(LinearLayout.VERTICAL);
            content.setGravity(Gravity.CENTER);
            content.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
            content.setTag(config.FieldName.toUpperCase());

            String query = null;
            ArrayList<BE_LineChart> LineChart = null;
            ArrayList<BE_MultiChart> multiChart = null;
            ArrayList<BE_MultiSeriesLineChart> multiSeriesLineChart = null;
            ArrayList<BE_BarChart> barChart = null;
            ArrayList<BE_GaugeChart> gaugeChart = null;
            ArrayList<BE_PieChart> pieChart = null;
            ArrayList<BE_StackedBarChart> stackedBarChart = null;
            ArrayList<BE_ChartInit> rtnChartInit = new ArrayList<>();

            ArrayList<MultiChartList> multiChartLists = new ArrayList<MultiChartList>();
            ArrayList<MultiSeriesLineChartList> multiSeriesLineChartLists = new ArrayList<MultiSeriesLineChartList>();
            ArrayList<LineChartList> lineChartLists = new ArrayList<LineChartList>();
            ArrayList<BarChartList> barChartLists = new ArrayList<BarChartList>();
            ArrayList<GaugeChartList> gaugeChartLists = new ArrayList<GaugeChartList>();
            ArrayList<PieChartList> pieChartLists = new ArrayList<PieChartList>();


            System.out.println("chart query : " + chartQuery);
            System.out.println("chart query screen : " + screen);

            ArrayList<String> LineTitle = new ArrayList<>(), pieTitle = new ArrayList<>(), barTitle = new ArrayList<>(), gaugeTitle = new ArrayList<>(), multiLineTitle = new ArrayList<>(), multiSeriesLineTitle = new ArrayList<>();
            ArrayList<String> chartOrder = new ArrayList<>();

            if (screen.contains("Main")) {
                ArrayList<BE_QueryConfig> queryConfigchartInit = da_queryConfig.getchartQueryConfig(chartQuery);
                String lineheight = "", linewidth = "", pieheight = "", piewidth = "", barheight = "", barwidth = "", gaugeheight = "", gaugewidth = "", multilineheight = "", multilinewidth = "", multiSerieslineheight = "", multiSerieslinewidth = "";

                int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
                contentHeight = (int) Math.round(contentHeight * heightRatio);
                contentHeight = (int) (screenHeight / 3);


                for (BE_QueryConfig queryConfigchart : queryConfigchartInit) {


                    String querychartInit = ut_common.getQuery(queryConfigchart, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    if (!querychartInit.equals("")) {
                        fileHelper.fileWriter("Chart Query : " + querychartInit, writer);
                        Log.d("Chart Query", querychartInit);
                        rtnChartInit = da_dynamics.getChartValuesInit(querychartInit);

                        System.out.println("rtnChartInit : " + rtnChartInit);

                        String screenChart = queryConfigchart.ScreenName.replace("INIT", rtnChartInit.get(0).url.substring(rtnChartInit.get(0).url.lastIndexOf('/') + 1));  ///+ rtnChartInit.get(0).url.substring(rtnChartInit.get(0).url.lastIndexOf('/') + 1).trim();

                        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenChart);
                        query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);


                        if (!query.equals("") && screenChart.contains("NewLineChart")) {

                            if (!chartOrder.contains("NewLineChart")) {
                                chartOrder.add("NewLineChart");
                            }

                            LineTitle.add(rtnChartInit.get(0).title);
                            int chartheight = parseInt(rtnChartInit.get(0).height.toString().substring(0, rtnChartInit.get(0).height.length() - 1));
                            int chartwidth = parseInt(rtnChartInit.get(0).width.toString().substring(0, rtnChartInit.get(0).width.length() - 1));

                            lineheight = String.valueOf(chartheight);
                            linewidth = String.valueOf(chartwidth);

                            int height = (int) (chartheight * (screenHeight / 100));
                            lineheight = String.valueOf(height);

                            fileHelper.fileWriter("NewLineChart Query : " + query, writer);
                            Log.d("NewLineChart Query", query);
                            LineChart = da_dynamics.getLineChartValues(query);

                            lineChartLists.add(new LineChartList(LineChart));

                        } else if (!query.equals("") && screenChart.contains("NewPieChart")) {
                            if (!chartOrder.contains("NewPieChart")) {
                                chartOrder.add("NewPieChart");
                            }
                            pieTitle.add(rtnChartInit.get(0).title);
                            int chartheight = parseInt(rtnChartInit.get(0).height.toString().substring(0, rtnChartInit.get(0).height.length() - 1));
                            int chartwidth = parseInt(rtnChartInit.get(0).width.toString().substring(0, rtnChartInit.get(0).width.length() - 1));

                            pieheight = String.valueOf(chartheight);
                            piewidth = String.valueOf(chartwidth);

                            int height = (int) (chartheight * (screenHeight / 100));
                            pieheight = String.valueOf(height);

                            fileHelper.fileWriter("NewPieChart Query : " + query, writer);
                            Log.d("NewPieChart Query", query);

                            pieChart = da_dynamics.getPieChartValues(query);

                            pieChartLists.add(new PieChartList(pieChart));

                        } else if (!query.equals("") && screenChart.contains("NewBarChart")) {
                            if (!chartOrder.contains("NewBarChart")) {
                                chartOrder.add("NewBarChart");
                            }
                            barTitle.add(rtnChartInit.get(0).title);
                            int chartheight = parseInt(rtnChartInit.get(0).height.toString().substring(0, rtnChartInit.get(0).height.length() - 1));
                            int chartwidth = parseInt(rtnChartInit.get(0).width.toString().substring(0, rtnChartInit.get(0).width.length() - 1));

                            barheight = String.valueOf(chartheight);
                            barwidth = String.valueOf(chartwidth);

                            int height = (int) (chartheight * (screenHeight / 100));
                            barheight = String.valueOf(height);

                            fileHelper.fileWriter("NewBarChart Query : " + query, writer);
                            Log.d("NewBarChart Query", query);

                            barChart = da_dynamics.getBarChartValues(query);

                            barChartLists.add(new BarChartList(barChart));

                        } else if (!query.equals("") && screenChart.contains("Gauge")) {
                            if (!chartOrder.contains("Gauge")) {
                                chartOrder.add("Gauge");
                            }
                            gaugeTitle.add(rtnChartInit.get(0).title);
                            int chartheight = parseInt(rtnChartInit.get(0).height.toString().substring(0, rtnChartInit.get(0).height.length() - 1));
                            int chartwidth = parseInt(rtnChartInit.get(0).width.toString().substring(0, rtnChartInit.get(0).width.length() - 1));

                            gaugeheight = String.valueOf(chartheight);
                            gaugewidth = String.valueOf(chartwidth);

                            int height = (int) (chartheight * (screenHeight / 100));
                            gaugeheight = String.valueOf(height);

                            fileHelper.fileWriter("GaugeChart Query : " + query, writer);
                            Log.d("GaugeChart Query", query);
                            gaugeChart = da_dynamics.getGaugeChartValues(query);

                            gaugeChartLists.add(new GaugeChartList(gaugeChart));

                        } else if (!query.equals("") && screenChart.contains("MultiChart")) {
                            if (!chartOrder.contains("MultiChart")) {
                                chartOrder.add("MultiChart");
                            }
                            multiLineTitle.add(rtnChartInit.get(0).title);
                            int chartheight = parseInt(rtnChartInit.get(0).height.toString().substring(0, rtnChartInit.get(0).height.length() - 1));
                            int chartwidth = parseInt(rtnChartInit.get(0).width.toString().substring(0, rtnChartInit.get(0).width.length() - 1));

                            multilineheight = String.valueOf(chartheight);
                            multilinewidth = String.valueOf(chartwidth);

                            int height = (int) (chartheight * (screenHeight / 100));
                            multilineheight = String.valueOf(height);

                            fileHelper.fileWriter("MultiChart Query : " + query, writer);
                            Log.d("MultiChart Query", query);
                            multiChart = da_dynamics.getMultiChartValues(query);

                            multiChartLists.add(new MultiChartList(multiChart));
                        } else if (!query.equals("") && screenChart.contains("MultiSeriesLineChart")) {
                            if (!chartOrder.contains("MultiSeriesLineChart")) {
                                chartOrder.add("MultiSeriesLineChart");
                            }
                            multiSeriesLineTitle.add(rtnChartInit.get(0).title);
                            int chartheight = parseInt(rtnChartInit.get(0).height.toString().substring(0, rtnChartInit.get(0).height.length() - 1));
                            int chartwidth = parseInt(rtnChartInit.get(0).width.toString().substring(0, rtnChartInit.get(0).width.length() - 1));

                            multiSerieslineheight = String.valueOf(chartheight);
                            multiSerieslinewidth = String.valueOf(chartwidth);

                            int height = (int) (chartheight * (screenHeight / 100));
                            multiSerieslineheight = String.valueOf(height);


                            fileHelper.fileWriter("MultiSeriesLineChart Query : " + query, writer);
                            Log.d("MultiSeriesLineChart Query", query);
                            multiSeriesLineChart = da_dynamics.getMultiSeriesLineChartValues(query);

                            multiSeriesLineChartLists.add(new MultiSeriesLineChartList(multiSeriesLineChart));
                        }

                    }
                }


                if (config.ValueWidth > 0 && !rtnChartInit.isEmpty()) {

                    float size = Float.parseFloat(String.valueOf(fontsize));
                    float textsize = rtnChartInit.get(0).fontSize * size;

                    int chartheight = parseInt(rtnChartInit.get(0).height.toString().substring(0, rtnChartInit.get(0).height.length() - 1));
                    int chartwidth = parseInt(rtnChartInit.get(0).width.toString().substring(0, rtnChartInit.get(0).width.length() - 1));

                    chartheight = 10 * chartheight;
                    chartwidth = 10 * chartwidth;

                    LinearLayout value = null;

                    value = ut_view.generateChart(MainActivity.this, textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                            config.DefaultValue, ut_common.translateColor(config.VBackColor), ut_common.translateColor(config.VForeColor),
                            LineTitle, lineChartLists, multiLineTitle, multiChartLists, multiSeriesLineTitle, multiSeriesLineChartLists, barTitle, barChartLists, gaugeTitle, gaugeChartLists,
                            pieTitle, pieChartLists, rtnChartInit, textsize, displayRatio, lineheight, linewidth, pieheight, piewidth, barheight,
                            barwidth, gaugeheight, gaugewidth, multilineheight, multilinewidth, multiSerieslinewidth, multiSerieslineheight, chartOrder);

                    content.addView(value);

                }

                if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
                    content.setVisibility(View.GONE);  //GONE
                }

                chartscrollView.addView(content);
                formContent.addView(chartscrollView);
            } else {
                String queryConfigchart = screen + "_FORM_CHART_" + config.FieldName + "_INIT";
                BE_QueryConfig queryConfigchartInit2 = da_queryConfig.getQueryConfig(queryConfigchart);
                String querychartInit = ut_common.getQuery(queryConfigchartInit2, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                fileHelper.fileWriter("Chart Query : " + querychartInit, writer);
                Log.d("Chart Query", querychartInit);
                rtnChartInit = da_dynamics.getChartValuesInit(querychartInit);

                System.out.println("rtnChartInit : " + rtnChartInit);


                String chartName = config.DefaultValue;
                String chartname[] = chartName.split("/Charts/");

                String queryname = screen + "_FORM_CHART_" + config.FieldName;
                BE_QueryConfig queryConfigchartInit = da_queryConfig.getQueryConfig(queryname);

                String lineheight = "", linewidth = "", pieheight = "", piewidth = "", barheight = "", barwidth = "", gaugeheight = "", gaugewidth = "", multilineheight = "", multilinewidth = "", multiSerieslineheight = "", multiSerieslinewidth = "";

                if (!queryConfigchartInit.QueryText.equals("") && chartname[1].contains("NewLineChart")) {
                    if (!chartOrder.contains("NewLineChart")) {
                        chartOrder.add("NewLineChart");
                    }
                    if (rtnChartInit.isEmpty() || rtnChartInit.get(0).title.isEmpty()) {
                        LineTitle.add("");
                    } else {
                        LineTitle.add(rtnChartInit.get(0).title);
                    }

                    int chartheight = parseInt(rtnChartInit.get(0).height.toString().substring(0, rtnChartInit.get(0).height.length() - 1));
                    int chartwidth = parseInt(rtnChartInit.get(0).width.toString().substring(0, rtnChartInit.get(0).width.length() - 1));

                    lineheight = String.valueOf(chartheight);
                    linewidth = String.valueOf(chartwidth);

                    int height = (int) (chartheight * (screenHeight / 100));
                    lineheight = String.valueOf(height);

                    fileHelper.fileWriter("NewLineChart Query : " + queryConfigchartInit.QueryText, writer);
                    Log.d("NewLineChart Query", queryConfigchartInit.QueryText);
                    LineChart = da_dynamics.getLineChartValues(queryConfigchartInit.QueryText);
                    lineChartLists.add(new LineChartList(LineChart));

                }
                if (!queryConfigchartInit.QueryText.equals("") && chartname[1].contains("NewPieChart")) {
                    if (!chartOrder.contains("NewPieChart")) {
                        chartOrder.add("NewPieChart");
                    }
                    if (rtnChartInit.isEmpty() || rtnChartInit.get(0).title.isEmpty()) {
                        pieTitle.add("");
                    } else {
                        pieTitle.add(rtnChartInit.get(0).title);
                    }

                    int chartheight = parseInt(rtnChartInit.get(0).height.toString().substring(0, rtnChartInit.get(0).height.length() - 1));
                    int chartwidth = parseInt(rtnChartInit.get(0).width.toString().substring(0, rtnChartInit.get(0).width.length() - 1));

                    pieheight = String.valueOf(chartheight);
                    piewidth = String.valueOf(chartwidth);

                    int height = (int) (chartheight * (screenHeight / 100));
                    pieheight = String.valueOf(height);

                    fileHelper.fileWriter("NewPieChart Query : " + queryConfigchartInit.QueryText, writer);
                    Log.d("NewPieChart Query", queryConfigchartInit.QueryText);

                    pieChart = da_dynamics.getPieChartValues(queryConfigchartInit.QueryText);
                    pieChartLists.add(new PieChartList(pieChart));

                }
                if (!queryConfigchartInit.QueryText.equals("") && chartname[1].contains("NewBarChart")) {
                    if (!chartOrder.contains("NewBarChart")) {
                        chartOrder.add("NewBarChart");
                    }
                    if (rtnChartInit.isEmpty() || rtnChartInit.get(0).title.isEmpty()) {
                        barTitle.add("");
                    } else {
                        barTitle.add(rtnChartInit.get(0).title);
                    }

                    int chartheight = parseInt(rtnChartInit.get(0).height.toString().substring(0, rtnChartInit.get(0).height.length() - 1));
                    int chartwidth = parseInt(rtnChartInit.get(0).width.toString().substring(0, rtnChartInit.get(0).width.length() - 1));

                    barheight = String.valueOf(chartheight);
                    barwidth = String.valueOf(chartwidth);

                    int height = (int) (chartheight * (screenHeight / 100));
                    barheight = String.valueOf(height);

                    fileHelper.fileWriter("NewBarChart Query : " + queryConfigchartInit.QueryText, writer);
                    Log.d("NewBarChart Query", queryConfigchartInit.QueryText);

                    barChart = da_dynamics.getBarChartValues(queryConfigchartInit.QueryText);
                    barChartLists.add(new BarChartList(barChart));

                }
                if (!queryConfigchartInit.QueryText.equals("") && chartname[1].contains("Gauge")) {
                    if (!chartOrder.contains("Gauge")) {
                        chartOrder.add("Gauge");
                    }
                    if (rtnChartInit.isEmpty() || rtnChartInit.get(0).title.isEmpty()) {
                        multiLineTitle.add("");
                    } else {
                        multiLineTitle.add(rtnChartInit.get(0).title);
                    }

                    int chartheight = parseInt(rtnChartInit.get(0).height.toString().substring(0, rtnChartInit.get(0).height.length() - 1));
                    int chartwidth = parseInt(rtnChartInit.get(0).width.toString().substring(0, rtnChartInit.get(0).width.length() - 1));

                    gaugeheight = String.valueOf(chartheight);
                    gaugewidth = String.valueOf(chartwidth);

                    int height = (int) (chartheight * (screenHeight / 100));
                    gaugeheight = String.valueOf(height);

                    fileHelper.fileWriter("GaugeChart Query : " + queryConfigchartInit.QueryText, writer);
                    Log.d("GaugeChart Query", queryConfigchartInit.QueryText);
                    gaugeChart = da_dynamics.getGaugeChartValues(queryConfigchartInit.QueryText);
                    gaugeChartLists.add(new GaugeChartList(gaugeChart));

                }
                if (!queryConfigchartInit.QueryText.equals("") && chartname[1].contains("MultiChart")) {
                    if (!chartOrder.contains("MultiChart")) {
                        chartOrder.add("MultiChart");
                    }
                    if (rtnChartInit.isEmpty() || rtnChartInit.get(0).title.isEmpty()) {
                        multiLineTitle.add("");
                    } else {
                        multiLineTitle.add(rtnChartInit.get(0).title);
                    }

                    int chartheight = parseInt(rtnChartInit.get(0).height.toString().substring(0, rtnChartInit.get(0).height.length() - 1));
                    int chartwidth = parseInt(rtnChartInit.get(0).width.toString().substring(0, rtnChartInit.get(0).width.length() - 1));

                    multilineheight = String.valueOf(chartheight);
                    multilinewidth = String.valueOf(chartwidth);

                    int height = (int) (chartheight * (screenHeight / 100));
                    multilineheight = String.valueOf(height);


                    fileHelper.fileWriter("MultiChart Query : " + queryConfigchartInit.QueryText, writer);
                    Log.d("MultiChart Query", queryConfigchartInit.QueryText);
                    multiChart = da_dynamics.getMultiChartValues(queryConfigchartInit.QueryText);

                    multiChartLists.add(new MultiChartList(multiChart));

                }
                if (!queryConfigchartInit.QueryText.equals("") && chartname[1].contains("MultiSeriesLineChart")) {
                    if (!chartOrder.contains("MultiSeriesLineChart")) {
                        chartOrder.add("MultiSeriesLineChart");
                    }
                    if (rtnChartInit.isEmpty() || rtnChartInit.get(0).title.isEmpty()) {
                        multiSeriesLineTitle.add("");
                    } else {
                        multiSeriesLineTitle.add(rtnChartInit.get(0).title);
                    }

                    int chartheight = parseInt(rtnChartInit.get(0).height.toString().substring(0, rtnChartInit.get(0).height.length() - 1));
                    int chartwidth = parseInt(rtnChartInit.get(0).width.toString().substring(0, rtnChartInit.get(0).width.length() - 1));

                    multiSerieslineheight = String.valueOf(chartheight);
                    multiSerieslinewidth = String.valueOf(chartwidth);

                    int height = (int) (chartheight * (screenHeight / 100));
                    multiSerieslineheight = String.valueOf(height);


//                    multiSerieslineheight = String.valueOf(config.ValueHeight);
                    fileHelper.fileWriter("MultiSeriesLineChart Query : " + queryConfigchartInit.QueryText, writer);
                    Log.d("MultiSeriesLineChart Query", queryConfigchartInit.QueryText);
                    multiSeriesLineChart = da_dynamics.getMultiSeriesLineChartValues(queryConfigchartInit.QueryText);
                    multiSeriesLineChartLists.add(new MultiSeriesLineChartList(multiSeriesLineChart));

                }


                int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
                contentHeight = (int) Math.round(contentHeight * heightRatio);
                contentHeight = (int) (screenHeight / 3);

                if (config.ValueWidth > 0) {

                    float size = Float.parseFloat(String.valueOf(fontsize));
//                    float textsize = rtnChartInit.get(0).fontSize * size;
                    float textsize = 18f;


                    LinearLayout value = null;
                    value = ut_view.generateChart(MainActivity.this, textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                            config.DefaultValue, ut_common.translateColor(config.VBackColor), ut_common.translateColor(config.VForeColor),
                            LineTitle, lineChartLists, multiLineTitle, multiChartLists, multiSeriesLineTitle, multiSeriesLineChartLists, barTitle, barChartLists, gaugeTitle, gaugeChartLists, pieTitle, pieChartLists,
                            rtnChartInit, textsize, displayRatio, lineheight, linewidth, pieheight, piewidth, barheight, barwidth, gaugeheight,
                            gaugewidth, multilineheight, multilinewidth, multiSerieslinewidth, multiSerieslineheight, chartOrder);

                    content.addView(value);
                    System.out.println("CHART ADDED");

                }

                if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
                    content.setVisibility(View.GONE);  //GONE
                }

                ViewGroup.MarginLayoutParams marginParams = (ViewGroup.MarginLayoutParams) content.getLayoutParams();
//                chartscrollView.addView(content);
//                formContent.addView(chartscrollView);
                content1.addView(content);
                formContent.addView(content1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void createFormContentWidget(String screen, LinearLayout formContent, BE_FormConfig config, String MainWidget) {
        ArrayList<BE_Widget> rtn = null;
        ArrayList<BE_BarChart> stackbarChart = new ArrayList<>();
        ArrayList<BE_ChartInit> rtnChartInit = null;


        String screenName = screen + FC_FORM + FC_WIDGET + "_" + MainWidget;

        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenName);

        String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

        if (!query.equals("")) {

            rtn = new ArrayList<BE_Widget>();
            fileHelper.fileWriter("FormWidget Query : " + query, writer);
            Log.d("FormWidget Query", query);
            rtn = da_dynamics.getWidgetFormConfigValues(query);

        }

        try {
            if (widgetcontent != null) {
                widgetcontent.removeAllViews();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        int width = (int) Math.round(config.ValueWidth * (screenWidth / 100.0));

        widgetcontent = new LinearLayout(MainActivity.this);
        widgetcontent.setOrientation(LinearLayout.HORIZONTAL);
        widgetcontent.setLayoutParams(new LinearLayout.LayoutParams(width, ViewGroup.LayoutParams.MATCH_PARENT));
        widgetcontent.setTag(config.FieldName.toUpperCase());
        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        if (config.HeaderWidth > 0) {
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;

            TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);

            widgetcontent.addView(label);
        }

        if (config.ValueWidth > 0) {

            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.VFontSize * size;

            NestedScrollView value = ut_view.generateWidget(MainActivity.this, textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                    config.VBackColorName, config.VForeColorName, config.DefaultValue, textsize, config.FieldName, config.VFontStyle,
                    config.VAlignment, config.ShowBorder, rtn, stackbarChart, rtnChartInit, size, config.HFontSize, config.VFontSize);

            widgetcontent.addView(value);
        }

        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            widgetcontent.setVisibility(View.GONE);  //GONE
        }
        ViewGroup.MarginLayoutParams marginParams = (ViewGroup.MarginLayoutParams) widgetcontent.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;

        formContent.addView(widgetcontent);

    }

    public void createFormContentWidgetNew(String screen, LinearLayout formContent, BE_FormConfig config, String MainWidget) {
//        ArrayList<BE_Widget> rtn = null;
        ArrayList<BE_FormWidgetValue> values = new ArrayList<>();

        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screen + FC_FORM + FC_WIDGET + "_" + config.FieldName + "_INIT");
        int count = 0;
        int a, b;

        BE_FormWidgetSize imageconfig = da_dynamics.getformwidgetSize(queryConfig.QueryText);
        String persentage = imageconfig.leftSideWidgetWidth.replace("%", "");
        try {
            a = parseInt(persentage);
            b = 100 / a;
            count = b;

        } catch (Exception e) {
            e.printStackTrace();
        }

        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.VERTICAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));

        BE_QueryConfig queryConfiganother = da_queryConfig.getQueryConfig(screen + FC_FORM + FC_WIDGET + "_" + config.FieldName);
        String query = ut_common.getQuery(queryConfiganother, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);


        if (!query.equals("")) {

//            rtn = new ArrayList<BE_Widget>();
            fileHelper.fileWriter("FormWidget Query : " + query, writer);
            Log.d("FormWidget Query", query);
//            rtn = da_dynamics.getWidgetFormConfigValues(query);
            values = da_dynamics.getformwidgetValue(query);

        }

        RecyclerView recyclerView = new RecyclerView(this);
        recyclerView.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));

        GridLayoutManager layoutManager = new GridLayoutManager(getApplicationContext(), count);
        recyclerView.setLayoutManager(layoutManager);

        WidgetAdapter adapter = new WidgetAdapter(MainActivity.this, values, fileHelper);
        recyclerView.setAdapter(adapter);

        content.addView(recyclerView);
        formContent.addView(content);


    }

    public void createFormContentNumericUpDown(LinearLayout formContent, BE_FormConfig config) {

        LinearLayout content = new LinearLayout(this);
        content.setOrientation(LinearLayout.HORIZONTAL);
        content.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        if (config.HeaderWidth > 0) {
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;

            TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);

            content.addView(label);
        }
        if (config.ValueWidth > 0) {

            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.VFontSize * size;

            QuantityView value = ut_view.generateFormNumericUpDown(textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.VBackColor), ut_common.translateColor(config.VForeColor),
                    textsize, config.VFontStyle, config.VAlignment, config.ShowBorder, config.DataMemberType, config.FieldName);

            content.addView(value);
        }
        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            content.setVisibility(View.GONE);  //GONE
        }
        ViewGroup.MarginLayoutParams marginParams = (ViewGroup.MarginLayoutParams) content.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;

        formContent.addView(content);
    }

    public void createFormContentNumericUpDownNew(LinearLayout formContent, BE_FormConfig config) {

        Float size = Float.parseFloat(fontsize);
        float textsize = config.HFontSize * size;
        float textsize2 = config.VFontSize * size;


        String color = ut_common.translateColor(config.VForeColor);


        LinearLayout linearLayout = new LinearLayout(this);
        linearLayout.setOrientation(LinearLayout.HORIZONTAL);
        linearLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        linearLayout.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);

        TextView textView = new TextView(this);
        textView.setText(config.NewText + " ");
        textView.setTextSize(textsize);
        textView.setTextColor(Color.parseColor(color));

        linearLayout.addView(textView);

        LinearLayout linearLayout1 = new LinearLayout(this);
        linearLayout1.setOrientation(LinearLayout.HORIZONTAL);
        linearLayout1.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        linearLayout1.setBackground(this.getResources().getDrawable(R.drawable.corner_box_updown));
        linearLayout1.setPadding(2, 2, 2, 2);


        int paddingDp = 5;
        float density = this.getResources().getDisplayMetrics().density;
        int paddingPixel = (int) (paddingDp * density);


        TextView textView1 = new TextView(this);
        textView1.setText(" - ");
        textView1.setTextSize(textsize2);
        textView1.setTypeface(Typeface.DEFAULT_BOLD);
        textView1.setClickable(true);
        textView1.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        textView1.setPadding(paddingPixel, paddingPixel, paddingPixel, paddingPixel);
        textView1.setBackground(this.getResources().getDrawable(R.drawable.minus_back));


        EditText textView2 = new EditText(this);
        textView2.setText("0");
        textView2.setTextSize(textsize2);
        textView2.setLayoutParams(new LinearLayout.LayoutParams(130, ViewGroup.LayoutParams.MATCH_PARENT));
        textView2.setSingleLine(true);
        textView2.setInputType(InputType.TYPE_CLASS_NUMBER);
        textView2.setGravity(Gravity.CENTER);
        textView2.setPadding(paddingPixel, paddingPixel, paddingPixel, paddingPixel);
        textView2.setTag(config.FieldName.toUpperCase() + "#" + tagNo);
        textView2.setBackgroundColor(this.getResources().getColor(R.color.colorWhite));

        String vall = formValues.get(config.FieldName.toUpperCase());
        if (vall != null) {
            textView2.setText(vall);
        }


        textView2.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                formValues.put(config.FieldName.toUpperCase(), s + "");
            }
        });


        TextView textView3 = new TextView(this);
        textView3.setText(" + ");
        textView3.setTextSize(textsize2);
        textView3.setTypeface(Typeface.DEFAULT_BOLD);
        textView3.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        textView3.setClickable(true);
        textView3.setPadding(paddingPixel, paddingPixel, paddingPixel, paddingPixel);
        textView3.setBackground(this.getResources().getDrawable(R.drawable.pluss_back));


        textView1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                int a;
                int b;
                if (textView2.getText().toString().trim().isEmpty()) {
                    a = 0;
                } else {
                    a = parseInt(textView2.getText().toString().trim());
                }

                if (a > 0) {
                    b = a - 1;
                    textView2.setText("" + b);
                    formValues.put(config.FieldName.toUpperCase(), b + "");
                }
            }
        });

        textView3.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                int a;
                int b;
                if (textView2.getText().toString().trim().isEmpty()) {
                    a = 0;
                    b = a + 1;
                } else {
                    a = parseInt(textView2.getText().toString().trim());
                    b = a + 1;
                }

                textView2.setText("" + b);
                formValues.put(config.FieldName.toUpperCase(), b + "");

            }
        });

        linearLayout1.addView(textView1);
        linearLayout1.addView(textView2);
        linearLayout1.addView(textView3);

        linearLayout.addView(linearLayout1);
        formContent.addView(linearLayout);
    }


    public void createFormContentLine(LinearLayout formContent, BE_FormConfig config) {

        int width = (int) (config.HeaderWidth * (screenWidth / 100)) + (int) (config.ValueWidth * (screenWidth / 100));

        LinearLayout content2 = new LinearLayout(this);
        content2.setOrientation(LinearLayout.VERTICAL);
        content2.setLayoutParams(new LinearLayout.LayoutParams(width, LinearLayout.LayoutParams.WRAP_CONTENT));

        LinearLayout content = new LinearLayout(this);
        if (config.FieldControl.equalsIgnoreCase(FC_LINE)) {
            content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, layoutLineHeight));
            content.addView(ut_view.generateLine(FC_LINE, formLineHeight, ut_common.translateColor(config.VForeColor), config, screenWidth));
        } else {
            content.setOrientation(LinearLayout.VERTICAL);
            content.setLayoutParams(new LinearLayout.LayoutParams(layoutLineHeight, ViewGroup.LayoutParams.MATCH_PARENT));
            content.addView(ut_view.generateLine(FC_VERTICALLINE, formLineHeight, ut_common.translateColor(config.VForeColor), config, screenWidth));
        }

        if (config.VAlignment == 0) {
            content2.setGravity(Gravity.CENTER);
        } else if (config.VAlignment == 1) {
            content2.setGravity(Gravity.END);
        } else if (config.VAlignment == 2) {
            content2.setGravity(Gravity.START);
        }

        content2.addView(content);
        formContent.addView(content2);

    }

    boolean PhotoTaken = false;

    public View.OnClickListener onCameraTakePhotoClickListener(final String sFilename) {
        View.OnClickListener rtn = new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                final Object tag = view.getTag();
                if (tag != null) {
                    formCameraFilename = sFilename;
                    PhotoTaken = false;
                    executeActionConfig((String) tag, AN_CAMERAICONCLICKED, "");
                }
            }
        };
        return rtn;
    }

    public View.OnClickListener onCameraMultiplePhotoClickListener(String sFilename, BE_FormConfig config) {
        View.OnClickListener rtn = new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                final Object tag = view.getTag();
                if (tag != null) {

                    HashMap<String, String> rtn = new HashMap<>();
                    String screenSignature = "";

                    if (sFilename.toUpperCase().equals("MULTIPLEPHOTOWITHPREVIEW")) {
                        screenSignature = screen + "_" + sFilename + "_MULTIPLEPHOTOWITHPREVIEW";
                    } else {
                        screenSignature = screen + "_" + sFilename + "_SAVEPHOTO";
                    }


                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                    String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("ImageName Query : " + query, writer);
                    Log.d("ImageName Query", query);
                    if (!query.isEmpty()) {
                        rtn = da_dynamics.getFormConfigValues(query);
                    }
                    if (!rtn.isEmpty()) {
                        listCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                        formValues.put(sFilename.toUpperCase(), listCameraFilename);
                        formCameraFilename = listCameraFilename;

                        boolean bexe = executeActionConfig((String) tag, AN_CAMERAICONCLICKED, "");

                        if (bexe) {
                            photosavepath = config.DataMemberType;
                            if (!screen.contains("View Document")) {
                                startCamera(tag, formCameraFilename);
                            }
                        }

                    }

                }
            }
        };
        return rtn;
    }

    private void startCamera(Object tag, String sFilename) {

        try {
            if (tag.equals("MultiPhoto")) {

                tempCameraFilename = sFilename;
                System.out.println("tempCameraFilename : " + tempCameraFilename);

//                File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
                File dir = new File(fileHelper.getSalesDirectoryPath() + "/CameraImage/");

                output = new File(dir, tempCameraFilename);
                try {
                    output.delete();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                Uri photoURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".fileprovider", output);

                Intent cameraIntent = null;
                cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                startActivityForResult(cameraIntent, TAKE_MULTIPLEPIC);


            } else if (tag.equals("")) {

            } else {
                System.out.println("Image TAG : " + tag.toString().toUpperCase());
                try {

                    imageTakePhoto = (ImageView) formContent.findViewWithTag(tag.toString().toUpperCase());

                } catch (Exception e) {
                    e.printStackTrace();
                }
                tempCameraFilename = sFilename;

//                File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
                File dir = new File(fileHelper.getSalesDirectoryPath() + "/CameraImage/");

                output = new File(dir, tempCameraFilename);
                try {
                    output.delete();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                Uri photoURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".fileprovider", output);

                Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                imageTag = tag.toString().toUpperCase();
                startActivityForResult(cameraIntent, TAKE_PICTURE);


            }
        } catch (Exception e) {
            e.printStackTrace();
            fileHelper.fileWriter("Exception Camera Open : " + e.getLocalizedMessage(), writer);
        }

    }

    private void startListviewCamera(Object tag, String sFilename) {

        if (tag.equals("MultiPhoto")) {
            tempCameraFilename = sFilename;
            System.out.println("tempCameraFilename : " + tempCameraFilename);

//            File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
            File dir = new File(fileHelper.getSalesDirectoryPath() + "/CameraImage/");

            output = new File(dir, tempCameraFilename);

            try {
                output.delete();
            } catch (Exception e) {
                e.printStackTrace();
            }
            Uri photoURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".fileprovider", output);
            System.out.println("photoURI : " + photoURI.getPath());


            Intent cameraIntent = null;
            cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
            cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
            startActivityForResult(cameraIntent, TAKE_MULTIPLEPIC);
        } else if (tag.equals("")) {

        } else {
            Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
            try {
                tempCameraFilename = sFilename;
            } catch (Exception e) {
                e.printStackTrace();
            }

//            File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
            File dir = new File(fileHelper.getSalesDirectoryPath() + "/CameraImage/");

            output = new File(dir, tempCameraFilename);
            try {
                output.delete();
            } catch (Exception e) {
                e.printStackTrace();
            }
            Uri photoURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".fileprovider", output);

            cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
            imageTag = tag.toString().toUpperCase();
            startActivityForResult(cameraIntent, TAKE_PIC);
        }

    }

    private void startMenuCamera(String cameraIndex, String formCameraFilename) {
        Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        tempCameraFilename = formCameraFilename;
//        File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
        File dir = new File(fileHelper.getSalesDirectoryPath() + "/CameraImage/");

        output = new File(dir, tempCameraFilename);
        try {
            output.delete();
        } catch (Exception e) {
            e.printStackTrace();
        }
        Uri photoURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".fileprovider", output);

        cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
        imageTag = cameraIndex.toString().toUpperCase();
        startActivityForResult(cameraIntent, MENU_PIC);
    }

    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (ContextCompat.checkSelfPermission(this,
                    Manifest.permission.ACCESS_FINE_LOCATION)
                    == PackageManager.PERMISSION_GRANTED) {
                mMap.setMyLocationEnabled(true);
            }
        } else {
            mMap.setMyLocationEnabled(true);
        }

    }

    @Override
    public void onSessionLogout(BE_ActionConfig actionConfig) {
        isUserTimedOut = true;
        goToForm("", actionConfig.ActionPlan);
    }


    @Override
    public void processFinish(String output, String ActionType) {

        if (ActionType.equals(AT_DOWNLOADTRANSCONFIG)) {
            if (output != null) {
                executeActionConfig(transFieldname, AN_returnGetServiceEnd, "");
            } else {
                executeActionConfig(transFieldname, AN_DOWNLOADTRANSCONFIGFAILED, "");
            }
//            try {
//                if (tabLayoutAdapter != null) {
//                    tabLayoutAdapter.notifyDataSetChanged();
//                }
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
        } else if (ActionType.equals(AT_DOWNLOADTRANSCONFIGAUTO)) {
            executeActionConfig(transFieldname, AN_returnGetServiceEnd, "");
        }

    }

    public void closeDownloadTransconfig() {
        if (t2 != null) {
            t2.cancel();
        }
    }

    private class AutoCompleteTextViewClickListener implements AdapterView.OnItemClickListener {

        AutoCompleteTextView autoCompleteTextView;
        HashMap<String, ArrayList<BE_ComboBox>> spinnerItems;
        boolean hasAction;

        public AutoCompleteTextViewClickListener(AutoCompleteTextView autoCompleteTextView, MainActivity mainActivity, HashMap<String, ArrayList<BE_ComboBox>> spinnerItems, boolean hasAction) {
            this.autoCompleteTextView = autoCompleteTextView;
            this.spinnerItems = spinnerItems;
            this.hasAction = hasAction;
        }

        @Override
        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
            Object tag = autoCompleteTextView.getTag();

            if (tag != null) {
                String fieldName = tag.toString();
                String value = autoCompleteTextView.getAdapter().getItem(position).toString();
                fileHelper.fileWriter("onItemSelected fieldName : " + fieldName + "onItemSelected value : " + value, writer);

                for (BE_ComboBox item : this.spinnerItems.get(fieldName)) {
                    if (item.Text.equals("Others") || item.Text.equals("OTHERS")) {
                        executeActionConfig(fieldName, AN_COMBOBOXFORMITEMCLICKED, "");
                    }

                    if (item.Text.equals(value)) {
                        fileHelper.fileWriter("onItemSelected item.Code : " + item.Code, writer);
                        System.out.println("onItemSelected item.Code : " + item.Code);
                        formValues.put(fieldName.toUpperCase(), item.Code);

                        break;
                    }

                }
                fileHelper.fileWriter("formValues " + fieldName.toUpperCase() + ": " + formValues.get(fieldName.toUpperCase()), writer);

                System.out.println("formValues " + fieldName.toUpperCase() + ": " + formValues.get(fieldName.toUpperCase()));
                if (this.hasAction) {
                    executeActionConfig(fieldName, AN_COMBOBOXFORMITEMCLICKED, "");
                }
            }
        }
    }


    private ArrayList<BE_ComboBox> getComboBoxValues(String completeQuery, String
            fieldName, String screen) {
        ArrayList<BE_ComboBox> rtn = new ArrayList<>();
        String name = screen;

        if (completeQuery.equalsIgnoreCase("")) {
            String screenComboBox = name + FC_FORM + FC_COMBO_BOX + "_" + fieldName;
            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenComboBox);
            String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

            if (!query.equals("")) {
                fileHelper.fileWriter("FormComboBox Query : " + query, writer);
                Log.d("FormComboBox Query", query);
                rtn = da_dynamics.getComboBoxValues(query);
            }

        } else {
            fileHelper.fileWriter("FormComboBox Query : " + completeQuery, writer);
            Log.d("FormComboBox Query", completeQuery);
            rtn = da_dynamics.getComboBoxValues(completeQuery);
        }

        if (rtn.size() > 0) {
            if (formValues.get(fieldName.toUpperCase()) != null) {
                for (int i = 0; i < rtn.size(); i++) {
                    if (rtn.get(i).Code != null) {
                        if (rtn.get(i).Code.equalsIgnoreCase(formValues.get(fieldName.toUpperCase()))) {
                            formValues.put(fieldName.toUpperCase(), rtn.get(i).Code);
                        }
                    }
                }
            } else {
                formValues.put(fieldName.toUpperCase(), rtn.get(0).Code);
            }
        }
        return rtn;
    }

    private ArrayList<BE_ImageComboBox> getImageComboBoxValues(String completeQuery, String
            fieldName, String screen) {
        ArrayList<BE_ImageComboBox> rtn = new ArrayList<>();
        String name = screen;

        if (completeQuery.equalsIgnoreCase("")) {
            String screenComboBox = name + FC_FORM + FC_IMAGECOMBOBOX + "_" + fieldName;
            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenComboBox);
            String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

            if (!query.equals("")) {
                fileHelper.fileWriter("FormComboBox Query : " + query, writer);
                Log.d("FormComboBox Query", query);
                rtn = da_dynamics.getImageComboBoxValues(query);
            }

        } else {
            fileHelper.fileWriter("FormComboBox Query : " + completeQuery, writer);
            Log.d("FormComboBox Query", completeQuery);
            rtn = da_dynamics.getImageComboBoxValues(completeQuery);
        }

        if (!rtn.isEmpty()) {
            if (formValues.get(fieldName.toUpperCase()) != null) {
                for (int i = 0; i < rtn.size(); i++) {
                    if (rtn.get(i).Code != null) {
                        if (rtn.get(i).Code.equalsIgnoreCase(formValues.get(fieldName.toUpperCase()))) {
                            formValues.put(fieldName.toUpperCase(), rtn.get(i).Code);
                        }
                    }
                }
            } else {
                formValues.put(fieldName.toUpperCase(), rtn.get(0).Code);
            }
        }
        return rtn;
    }

    private String stringToDate(String aDate, String aFormat) {

        if (aDate == null) return null;
        String[] one;
        String stringDate;

        if (aDate.contains("-")) {
            one = aDate.split("-");
        } else {
            one = aDate.split("/");
        }
        if (one[0].length() > 3) {
            SimpleDateFormat simpledateformat = new SimpleDateFormat(aFormat);
            SimpleDateFormat outputFormat = new SimpleDateFormat(aFormat);

            Date date = null;
            try {
                date = simpledateformat.parse(aDate);
            } catch (ParseException e) {
                throw new RuntimeException(e);
            }
            stringDate = outputFormat.format(date);


        } else {

            ArrayList<BE_System> system;
            DA_System da_System = new DA_System(getApplicationContext());
            if (ut_sp.getStringValue(XML_SOLUTION_NAME).equals("WMS")) {
                system = da_System.getBESystems();
            } else {
                system = da_System.getBESystems2();
            }

            String dateds = system.get(0).DateFormatString;


            if (dateds.contains("-")) {
                if (!aDate.contains("-")) {
                    aDate = aDate.replace("/", "-");
                }
            } else {
                if (aDate.contains("-")) {
                    aDate = aDate.replace("-", "/");
                }
            }

            SimpleDateFormat simpledateformat = new SimpleDateFormat(dateds);
            SimpleDateFormat outputFormat = new SimpleDateFormat(aFormat);

            Date date = null;
            try {
                date = simpledateformat.parse(aDate);
            } catch (ParseException e) {
                throw new RuntimeException(e);
            }
            stringDate = outputFormat.format(date);

        }
        return stringDate;

    }

    public void initListView(String screenName) {

        String limitValue = da_deviceSystemList.getDeviceSystemValue("select SystemValue from DeviceSystemList where Code = 'PaginationLimit'");
        if (limitValue == null || limitValue.isEmpty()) {
            limitValue = da_systemList.getSystemValue("select SystemValue from SystemList where Code = 'PaginationLimit'");
        }

        String MdtlimitValue = da_deviceSystemList.getDeviceSystemValue("select SystemValue from DeviceSystemList where Code = 'MDTPaginationLimit'");
        if (MdtlimitValue == null || MdtlimitValue.isEmpty()) {
            MdtlimitValue = da_systemList.getSystemValue("select SystemValue from SystemList where Code = 'MDTPaginationLimit'");
        }

        System.out.println("limitValue : " + limitValue);
        System.out.println("MdtlimitValue : " + MdtlimitValue);
        fileHelper.fileWriter("limitValue : " + limitValue, writer);

        try {
            if (limitValue != null) {
                if (limitValue.isEmpty()) {
                    listLimit = 12;
                    listLimitChild = 12;

                    MdtlistLimit = 0;
                    MdtlistLimitChild = 0;
                } else {
                    listLimit = parseInt(limitValue);
                    listLimitChild = parseInt(limitValue);

                    if (MdtlimitValue != null && !MdtlimitValue.isEmpty()) {
                        MdtlistLimit = parseInt(MdtlimitValue);
                        MdtlistLimitChild = parseInt(MdtlimitValue);
                    } else {
                        MdtlistLimit = 0;
                        MdtlistLimitChild = 0;
                    }

                }
            } else {
                listLimit = 12;
                listLimitChild = 12;

                MdtlistLimit = 0;
                MdtlistLimitChild = 0;
            }
        } catch (Exception e) {
            e.printStackTrace();
            listLimit = 12;
            listLimitChild = 12;

            MdtlistLimit = 0;
            MdtlistLimitChild = 0;
        }

        allLoad = false;
        allLoadChild = false;
        selectedListIndex = -1;
        listSpinners = new HashMap<String, ArrayList<BE_ComboBox>>();

        System.out.println("scFilterselectedvalues : " + scFilterselectedvalues);

        if (!scFilterselectedvalues.isEmpty()) {

            StringBuilder searchFilter = new StringBuilder();

            BE_QueryConfig newQuery = da_queryConfig.getQueryConfig(screen + "_FILTER");
            System.out.println("newQuery : " + newQuery);
            if (newQuery != null && newQuery.QueryText != null && !newQuery.QueryText.isEmpty()) {
                queryListConfig = newQuery;
            }

            for (String key : scFilterselectedvalues.keySet()) {
                searchFilter.append(" AND ");
                String value = scFilterselectedvalues.get(key);

                System.out.println("key : " + key);

                if (key.contains((FC_DATEPICKER))) {
                    key = key.replace(FC_DATEPICKER, "").trim();
                    if (key.contains("Text")) {
                        searchFilter.append(key.replace("Text", "").trim());
                        searchFilter.append(" = ");
                        searchFilter.append("\'" + value + "\'");
                    }
                }
                if (key.contains((FC_COMBO_BOX))) {
                    key = key.replace(FC_COMBO_BOX, "").trim();
                    if (key.contains("Text")) {
                        searchFilter.append(key.replace("Text", "").trim());
                        searchFilter.append(" = ");

                        if (value.contains("'")) {
                            value = value.replace("'", "''");
                            searchFilter.append("\'" + value + "\'");
                        } else {
                            searchFilter.append("\'" + value + "\'");
                        }
                    }
                }
                if (key.contains(FC_TEXT_BOX)) {
                    if (key.endsWith("DATE")) {

                        String keys[] = key.split(" ");
                        System.out.println("keys[] : " + keys);

                        if (value.indexOf(">") == 0 || value.indexOf("<") == 0) {

                            if (value.indexOf(">=") == 0 || value.indexOf("<=") == 0) {
                                String expiredDate = stringToDate(value.substring(2).trim(), "yyyy-MM-dd");
                                searchFilter.append(keys[0] + value.substring(0, 2) + "'" + expiredDate + "'");
                            } else {
                                String expiredDate = stringToDate(value.substring(1).trim(), "yyyy-MM-dd");
                                searchFilter.append(keys[0] + value.substring(0, 1) + "'" + expiredDate + "'");
                            }

                        } else if (value.indexOf("=") == 0) {
                            String expiredDate = stringToDate(value.substring(1).trim(), "yyyy-MM-dd");
                            System.out.println("expiredDate : " + expiredDate);
                            searchFilter.append("(" + keys[0] + " >= '" + expiredDate + " 00:00:00'" + " and  " + keys[0] + " <= '" + expiredDate + " 23:59:59')");
                            System.out.println("searchFilter : " + searchFilter);

                        } else if (value.contains("..")) {
                            //02-04-204..10-04-204
                            String[] arrSearchText = value.split("\\.\\.");
                            String expiredDate1 = "";
                            String expiredDate2 = "";
                            try {
                                expiredDate1 = stringToDate(arrSearchText[0], "yyyy-MM-dd");
                                expiredDate2 = stringToDate(arrSearchText[1], "yyyy-MM-dd");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            searchFilter.append("(" + keys[0] + " >= '" + expiredDate1 + " 00:00:00'" + " and " + keys[0] + " <= '" + expiredDate2 + " 23:59:59')");
                        } else {
                            String expiredDate = stringToDate(value.trim(), "yyyy-MM-dd");
                            searchFilter.append("(" + keys[0] + " >= '" + expiredDate + " 00:00:00'" + " and " + keys[0] + " <= '" + expiredDate + " 23:59:59')");
                        }

                    } else {

                        key = key.replace(FC_TEXT_BOX, "").trim();
                        if (key.contains("Text")) {
                            searchFilter.append(key.replace("Text", "").trim());
                            searchFilter.append(" LIKE ");
                            searchFilter.append("\'%" + value + "%\'");
                        }
                        if (key.contains("Numeric")) {
                            searchFilter.append(key.replace("Numeric", "").trim());
                            searchFilter.append(" LIKE ");
                            if (key.contains(">")) {
                                searchFilter.append("\'>" + key + "\'");
                            } else if (key.contains("<")) {
                                searchFilter.append("\'<" + key + "\'");
                            } else if (key.contains("<=")) {
                                searchFilter.append("\'<=" + key + "\'");
                            } else if (key.contains("=>")) {
                                searchFilter.append("\'=>" + key + "\'");
                            } else {
                                searchFilter.append("\'=" + key + "\'");
                            }
                        }
                    }
                }
                if (key.contains(FC_NONE)) {
                    key = key.replace(FC_NONE, "").trim();
                    if (key.contains("Text")) {
                        searchFilter.append(key.replace("Text", "").trim());
                        searchFilter.append(" = ");
                        searchFilter.append("\'" + value + "\'");
                    }
                }
            }

            System.out.println("Search queryListConfig : " + queryListConfig);
            System.out.println("Search ListConfig Query : " + listConfigQuerySearchconfig);
            listConfigQuerySearchconfig = ut_common.getQuery(queryListConfig, searchFilter, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            fileHelper.fileWriter("Search ListConfig Query : " + listConfigQuerySearchconfig, writer);
            System.out.println("Search ListConfig Query : " + listConfigQuerySearchconfig);
            if (!listConfigQuerySearchconfig.isEmpty()) {
                listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuerySearchconfig, 0, listLimit, MdtlistLimit);
            }
        } else if (!searchFilterSecond.isEmpty()) {

            String screenSignature = screen + "_" + FC_SEARCH + "_" + searchFieldName;

            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
            String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            listConfigQuery = query;

            System.out.println("Search ListConfig Query : " + listConfigQuery);
            fileHelper.fileWriter("Search ListConfig Query : " + listConfigQuery, writer);
            if (!listConfigQuery.isEmpty()) {
                listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);
            }

        } else {
            listPage = 0;
            listConfigQuerySearchconfig = null;
            fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);
            System.out.println("ListConfig Query : " + listConfigQuery);

            if (!listConfigQuery.isEmpty()) {
                listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);
            }
            if (!initscListflag) {
                listConfigSearchValues = listConfigValues;
                initscListflag = true;
            }

        }

        System.out.println("multiLineIndex : " + multiLineIndex);
        if (!multiLineIndex) {
            initListConfigValues();
        }
    }

    public void initListViewFilter(String screenName) {

        String limitValue = da_deviceSystemList.getDeviceSystemValue("select SystemValue from DeviceSystemList where Code = 'PaginationLimit'");
        if (limitValue == null || limitValue.isEmpty()) {
            limitValue = da_systemList.getSystemValue("select SystemValue from SystemList where Code = 'PaginationLimit'");
        }
        fileHelper.fileWriter("limitValue : " + limitValue, writer);


        String MdtlimitValue = da_deviceSystemList.getDeviceSystemValue("select SystemValue from DeviceSystemList where Code = 'MDTPaginationLimit'");
        if (MdtlimitValue == null || MdtlimitValue.isEmpty()) {
            MdtlimitValue = da_systemList.getSystemValue("select SystemValue from SystemList where Code = 'MDTPaginationLimit'");
        }

        if (limitValue != null) {
            if (limitValue.isEmpty()) {
                listLimit = 12;
                listLimitChild = 12;

                MdtlistLimit = 0;
                MdtlistLimitChild = 0;
            } else {
                listLimit = parseInt(limitValue);
                listLimitChild = parseInt(limitValue);

                if (MdtlimitValue != null && !MdtlimitValue.isEmpty()) {
                    MdtlistLimit = parseInt(MdtlimitValue);
                    MdtlistLimitChild = parseInt(MdtlimitValue);
                }
            }
        } else {
            listLimit = 12;
            listLimitChild = 12;

            MdtlistLimit = 0;
            MdtlistLimitChild = 0;
        }

        allLoad = false;
        allLoadChild = false;
        selectedListIndex = -1;
        listSpinners = new HashMap<String, ArrayList<BE_ComboBox>>();

        System.out.println("scFilterselectedvalues : " + scFilterselectedvalues);

        if (!scFilterselectedvalues.isEmpty()) {

            StringBuilder searchFilter = new StringBuilder();

            if (refreshListName.isEmpty()) {
                queryListConfig = da_queryConfig.getQueryConfig(screen + "_FORM_LISTVIEW_" + listviewFieldName);
            } else {
                queryListConfig = da_queryConfig.getQueryConfig(refreshListName);
            }


            BE_QueryConfig newQuery = da_queryConfig.getQueryConfig(screen + "_FILTER");

            System.out.println("newQuery : " + newQuery);
            if (newQuery != null && newQuery.QueryText != null && !newQuery.QueryText.isEmpty()) {
                queryListConfig = newQuery;
            }

            for (String key : scFilterselectedvalues.keySet()) {
                System.out.println("key : " + key);

                searchFilter.append(" AND ");
                String value = scFilterselectedvalues.get(key);

                if (key.contains((FC_DATEPICKER))) {
                    key = key.replace(FC_DATEPICKER, "").trim();
                    if (key.contains("Text")) {
                        searchFilter.append(key.replace("Text", "").trim());
                        searchFilter.append(" = ");
                        searchFilter.append("\'" + value + "\'");
                    }
                }
                if (key.contains((FC_COMBO_BOX))) {
                    key = key.replace(FC_COMBO_BOX, "").trim();
                    if (key.contains("Text")) {
                        searchFilter.append(key.replace("Text", "").trim());
                        searchFilter.append(" = ");
                        if (value.contains("'")) {
                            value = value.replace("'", "''");
                            searchFilter.append("\'" + value + "\'");
                        } else {
                            searchFilter.append("\'" + value + "\'");
                        }
                    }
                }
                if (key.contains(FC_TEXT_BOX)) {
                    key = key.replace(FC_TEXT_BOX, "").trim();
                    if (key.endsWith("DATE")) {

                        String keys[] = key.split(" ");

                        if (value.indexOf(">") == 0 || value.indexOf("<") == 0) {

                            if (value.indexOf(">=") == 0 || value.indexOf("<=") == 0) {
                                String expiredDate = stringToDate(value.substring(2).trim(), "yyyy-MM-dd");
                                searchFilter.append(keys[0] + value.substring(0, 2) + "'" + expiredDate + "'");
                            } else {
                                String expiredDate = stringToDate(value.substring(1).trim(), "yyyy-MM-dd");
                                searchFilter.append(keys[0] + value.substring(0, 1) + "'" + expiredDate + "'");
                            }

                        } else if (value.indexOf("=") == 0) {
                            String expiredDate = stringToDate(value.substring(1).trim(), "yyyy-MM-dd");
                            searchFilter.append("(" + keys[0] + " >= '" + expiredDate + " 00:00:00'" + " and  " + keys[0] + " <= '" + expiredDate + " 23:59:59')");
                        } else if (value.contains("..")) {
                            //02-04-204..10-04-204
                            String[] arrSearchText = value.split("\\.\\.");
                            String expiredDate1 = "";
                            String expiredDate2 = "";
                            try {
                                expiredDate1 = stringToDate(arrSearchText[0], "yyyy-MM-dd");
                                expiredDate2 = stringToDate(arrSearchText[1], "yyyy-MM-dd");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            searchFilter.append("(" + keys[0] + " >= '" + expiredDate1 + " 00:00:00'" + " and " + keys[0] + " <= '" + expiredDate2 + " 23:59:59')");
                        } else {
                            String expiredDate = stringToDate(value.trim(), "yyyy-MM-dd");
                            searchFilter.append("(" + keys[0] + " >= '" + expiredDate + " 00:00:00'" + " and " + keys[0] + " <= '" + expiredDate + " 23:59:59')");
                        }

                    } else {

                        key = key.replace(FC_TEXT_BOX, "").trim();
                        if (key.contains("Text")) {
                            searchFilter.append(key.replace("Text", "").trim());
                            searchFilter.append(" LIKE ");
                            searchFilter.append("\'%" + value + "%\'");
                        }
                        if (key.contains("Numeric")) {
                            searchFilter.append(key.replace("Numeric", "").trim());
                            searchFilter.append(" LIKE ");
                            if (key.contains(">")) {
                                searchFilter.append("\'>" + key + "\'");
                            } else if (key.contains("<")) {
                                searchFilter.append("\'<" + key + "\'");
                            } else if (key.contains("<=")) {
                                searchFilter.append("\'<=" + key + "\'");
                            } else if (key.contains("=>")) {
                                searchFilter.append("\'=>" + key + "\'");
                            } else {
                                searchFilter.append("\'=" + key + "\'");
                            }
                        }
                    }
                }
                if (key.contains(FC_NONE)) {
                    key = key.replace(FC_NONE, "").trim();
                    if (key.contains("Text")) {
                        searchFilter.append(key.replace("Text", "").trim());
                        searchFilter.append(" = ");
                        searchFilter.append("\'" + value + "\'");
                    }
                }
            }

            System.out.println("Search queryListConfig : " + queryListConfig);
            System.out.println("filter listConfigs : " + listConfigs);

            listConfigQuerySearchconfig = ut_common.getQuery(queryListConfig, searchFilter, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            fileHelper.fileWriter("Search ListConfig Query : " + listConfigQuerySearchconfig, writer);
            System.out.println("Search ListConfig Query : " + listConfigQuerySearchconfig);
            if (!listConfigQuerySearchconfig.isEmpty()) {
                listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuerySearchconfig, 0, listLimit, MdtlistLimit);
            }
            System.out.println("Search ListConfig Query listConfigValues : " + listConfigValues);

        } else {
            listPage = 0;
            listConfigQuerySearchconfig = null;


            fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);
            System.out.println("ListConfig Query : " + listConfigQuery);

            if (!listConfigQuery.isEmpty()) {
                listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);
            } else {
                if (refreshListName.isEmpty()) {
                    queryListConfig = da_queryConfig.getQueryConfig(screen + "_FORM_LISTVIEW_" + listviewFieldName);
                } else {
                    queryListConfig = da_queryConfig.getQueryConfig(refreshListName);
                }
                listConfigQuery = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);

            }

            if (!initscListflag) {
                listConfigSearchValues = listConfigValues;
                initscListflag = true;
            }
        }


//        try {
//            if (llParentLayoutformlist != null) {
//                llParentLayoutformlist.removeAllViews();
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        createContainerSearchlist(formListScreenName, formContent, llParentLayoutformlist, be_formConfig, "", listConfigValues);

        View view = formContent.findViewWithTag(listviewFieldName);
        formListScreenName = screen + FC_FORM + FC_LISTVIEW + "_" + listviewFieldName;
        String formListScreenName2 = screen + FC_FORM + FC_LISTVIEW;


        if (view != null) {
            FormList_llValues = (LinearLayout) view;
            initAddmainList(formListScreenName, listConfigs, listConfigValues, FormList_llValues, null, listConfigQuery, 0, null, hsContainer, be_formConfig.FieldName, formListScreenName2);
        } else {
            initAddmainList(formListScreenName, listConfigs, listConfigValues, FormList_llValues, null, listConfigQuery, 0, null, hsContainer, be_formConfig.FieldName, formListScreenName2);
        }

    }

    public void initListViewSearch(String screenName) {

        String limitValue = da_deviceSystemList.getDeviceSystemValue("select SystemValue from DeviceSystemList where Code = 'PaginationLimit'");
        if (limitValue == null || limitValue.isEmpty()) {
            limitValue = da_systemList.getSystemValue("select SystemValue from SystemList where Code = 'PaginationLimit'");
        }
        fileHelper.fileWriter("limitValue : " + limitValue, writer);

        if (limitValue != null) {
            if (limitValue.isEmpty()) {
                listLimit = 12;
                listLimitChild = 12;
            } else {
                listLimit = parseInt(limitValue);
                listLimitChild = parseInt(limitValue);
            }
        } else {
            listLimit = 12;
            listLimitChild = 12;
        }

        allLoad = false;
        allLoadChild = false;
        selectedListIndex = -1;
        listSpinners = new HashMap<String, ArrayList<BE_ComboBox>>();

        System.out.println("scFilterselectedvalues : " + scFilterselectedvalues);

        if (!scFilterselectedvalues.isEmpty()) {

            StringBuilder searchFilter = new StringBuilder();

            BE_QueryConfig newQuery = da_queryConfig.getQueryConfig(screen + "_FILTER");
            System.out.println("newQuery : " + newQuery);
            if (newQuery != null && newQuery.QueryText != null && !newQuery.QueryText.isEmpty()) {
                queryListConfig = newQuery;
            }

            for (String key : scFilterselectedvalues.keySet()) {
                searchFilter.append(" AND ");
                String value = scFilterselectedvalues.get(key);

                if (key.contains((FC_DATEPICKER))) {
                    key = key.replace(FC_DATEPICKER, "").trim();
                    if (key.contains("Text")) {
                        searchFilter.append(key.replace("Text", "").trim());
                        searchFilter.append(" = ");
                        searchFilter.append("\'" + value + "\'");
                    }
                }
                if (key.contains((FC_COMBO_BOX))) {
                    key = key.replace(FC_COMBO_BOX, "").trim();
                    if (key.contains("Text")) {
                        searchFilter.append(key.replace("Text", "").trim());
                        searchFilter.append(" = ");
                        searchFilter.append("\'" + value + "\'");
                    }
                }
                if (key.contains(FC_TEXT_BOX)) {
                    key = key.replace(FC_TEXT_BOX, "").trim();
                    if (key.contains("Text")) {
                        searchFilter.append(key.replace("Text", "").trim());
                        searchFilter.append(" LIKE ");
                        searchFilter.append("\'%" + value + "%\'");
                    }
                    if (key.contains("Numeric")) {
                        searchFilter.append(key.replace("Numeric", "").trim());
                        searchFilter.append(" LIKE ");
                        if (key.contains(">")) {
                            searchFilter.append("\'>" + key + "\'");
                        } else if (key.contains("<")) {
                            searchFilter.append("\'<" + key + "\'");
                        } else if (key.contains("<=")) {
                            searchFilter.append("\'<=" + key + "\'");
                        } else if (key.contains("=>")) {
                            searchFilter.append("\'=>" + key + "\'");
                        } else {
                            searchFilter.append("\'=" + key + "\'");
                        }
                    }
                }
            }

            listConfigQuerySearchconfig = ut_common.getQuery(queryListConfig, searchFilter, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            fileHelper.fileWriter("Search ListConfig Query : " + listConfigQuerySearchconfig, writer);
            System.out.println("Search ListConfig Query : " + listConfigQuerySearchconfig);
            if (!listConfigQuerySearchconfig.isEmpty()) {
                listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuerySearchconfig, 0, listLimit, MdtlistLimit);
            }
        } else if (!searchFilterSecond.isEmpty()) {

            String screenSignature = screen + "_" + FC_SEARCH + "_" + searchFieldName;

            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
            String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            listConfigQuery = query;

            System.out.println("Search ListConfig Query : " + listConfigQuery);
            fileHelper.fileWriter("Search ListConfig Query : " + listConfigQuery, writer);
            if (!listConfigQuery.isEmpty()) {
                listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);
            }
        } else {
            listPage = 0;
            listConfigQuerySearchconfig = null;
            fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);
            System.out.println("ListConfig Query : " + listConfigQuery);

            if (!listConfigQuery.isEmpty()) {
                listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);
            }
            if (!initscListflag) {
                listConfigSearchValues = listConfigValues;
                initscListflag = true;
            }

        }

        System.out.println("multiLineIndex : " + multiLineIndex);
        System.out.println("be_formConfig : " + be_formConfig);
        System.out.println("formListScreenName : " + formListScreenName);
        if (!multiLineIndex) {

            hashMapArrayList = new ArrayList<LinkedHashMap<String, String>>();
            hashMapArrayList2 = new ArrayList<LinkedHashMap<String, String>>();

            if (formlist) {
                try {
                    if (llParentLayoutformlist != null) {
                        llParentLayoutformlist.removeAllViews();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                createContainerSearchlist(formListScreenName, formContent, llParentLayoutformlist, be_formConfig, "", listConfigValues);
            } else {
                initListConfigValues();
            }
        }
    }

    public void initListView2(String screenName, Dialog progressDialog) {
        String limitValue = da_deviceSystemList.getDeviceSystemValue("select SystemValue from DeviceSystemList where Code = 'PaginationLimit'");
        if (limitValue == null || limitValue.isEmpty()) {
            limitValue = da_systemList.getSystemValue("select SystemValue from SystemList where Code = 'PaginationLimit'");
        }
        fileHelper.fileWriter("limitValue : " + limitValue, writer);

        if (limitValue != null) {
            if (limitValue.isEmpty()) {
                listLimit = 12;
            } else {
                listLimit = parseInt(limitValue);
            }
        } else {

            listLimit = 12;
        }

        allLoad = false;
        allLoadChild = false;
        selectedListIndex = -1;
        listSpinners = new HashMap<String, ArrayList<BE_ComboBox>>();
        if (initscListflag == true || initscListflag == false) {
            if (scFilterselectedvalues.size() > 0) {
                StringBuilder searchFilter = new StringBuilder();
                for (String key : scFilterselectedvalues.keySet()) {
                    searchFilter.append(" AND ");
                    String value = scFilterselectedvalues.get(key);
                    if (key.contains((FC_DATEPICKER))) {
                        key = key.replace(FC_DATEPICKER, "").trim();
                        if (key.contains("Text")) {
                            searchFilter.append(key.replace("Text", "").trim());
                            searchFilter.append(" = ");
                            searchFilter.append("\'" + value + "\'");
                        }
                    }
                    if (key.contains((FC_COMBO_BOX))) {
                        key = key.replace(FC_COMBO_BOX, "").trim();
                        if (key.contains("Text")) {
                            searchFilter.append(key.replace("Text", "").trim());
                            searchFilter.append(" = ");
                            searchFilter.append("\'" + value + "\'");
                        }
                    }
                    if (key.contains(FC_TEXT_BOX)) {
                        key = key.replace(FC_TEXT_BOX, "").trim();
                        if (key.contains("Text")) {
                            searchFilter.append(key.replace("Text", "").trim());
                            searchFilter.append(" LIKE ");
                            searchFilter.append("\'%" + value + "%\'");
                        }
                        if (key.contains("Numeric")) {
                            searchFilter.append(key.replace("Numeric", "").trim());
                            searchFilter.append(" LIKE ");
                            if (key.contains(">")) {
                                searchFilter.append("\'>" + key + "\'");
                            } else if (key.contains("<")) {
                                searchFilter.append("\'<" + key + "\'");
                            } else if (key.contains("<=")) {
                                searchFilter.append("\'<=" + key + "\'");
                            } else if (key.contains("=>")) {
                                searchFilter.append("\'=>" + key + "\'");
                            } else {
                                searchFilter.append("\'=" + key + "\'");
                            }
                        }
                    }
                }

                listConfigQuerySearchconfig = ut_common.getQuery(queryListConfig, searchFilter, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                fileHelper.fileWriter("ListConfig Query : " + listConfigQuerySearchconfig, writer);
                listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuerySearchconfig, listPage, listLimit, MdtlistLimit);
            } else {
                listPage = 0;
                listConfigQuerySearchconfig = null;
                fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);
                listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);

                if (!initscListflag) {
                    listConfigSearchValues = listConfigValues;
                    initscListflag = true;
                }

            }
        } else {
            fileHelper.fileWriter("ListConfig Query 2: " + listConfigQuery, writer);
            listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);
        }

        if (multiLineIndex) {
        } else {
            initListConfigValues();
        }

        progressDialog.dismiss();
    }


    public void initListConfigHeader(LinearLayout listConfigHeader, ArrayList<BE_ListConfig> configs, NestedScrollView scrollView, LinearLayout listConfigView) {
        listConfigContainer.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));

        try {
            if (listConfigHeader != null) {
                listConfigHeader.removeAllViews();

//                int paddingDp2 = 15;
//                float density2 = getResources().getDisplayMetrics().density;
//                int paddingPixel2 = (int) (paddingDp2 * density2);

//                listConfigHeader.setPadding(paddingPixel2, 0, 0, 0);

                int headerHeight = (int) Math.round(ut_common.getConfigMaxHeight(configs) * heightRatio);
                System.out.println("headerHeight : " + headerHeight);
                if (headerHeight > 0) {
                    for (BE_ListConfig config : configs) {
                        if (config.ColumnWidth > 0 && headerHeight > 0 && !config.NewText.isEmpty()) {
                            Log.v("Res newText", config.NewText);
                            float size = Float.parseFloat(String.valueOf(fontsize));
                            float textsize = config.HFontSize * size;

                            TextView header = null;

                            if (config.HeaderHeight > 0 && config.isHidden == 0) {
                                typeFace = Typeface.createFromAsset(getAssets(), "fonts/Poppins-Regular.ttf");

                                header = ut_view.generateFormListTextView(FC_LABEL, textPadding, headerHeight, config.ColumnWidth,
                                        ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                                        config.NewText, textsize, config.HFontStyle, config.Alignment, false, config.ShowBorder, "", true, "Header", typeFace, config.isHidden, config.DataMemberType);
                            }

                            if (header != null) {
                                listConfigHeader.addView(header);
                            }
                            listConfigHeader.setVisibility(View.VISIBLE);
                            zerothCardview.setVisibility(View.VISIBLE);
                            zerothCardview.setUseCompatPadding(true);
                        }
                    }
                } else {
                    listConfigHeader.setVisibility(View.GONE);
                    zerothCardview.setVisibility(View.GONE);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void initListConfigValues() {
        setOnListClick();
        setOnListLongClick();
        Functions = da_Functions.getFunctions(screen);

        ListDynamicView(listConfigs, listConfigValues, formValues, selectedListValues, paramFormValues, paramSelectedListValues);
    }


    public void setOnListClick() {

        onListClick = new View.OnClickListener() {

            @Override
            public void onClick(View view) {
                String listTag = "";
                String listValue = "";
                String[] tempTag;

                if (allowClick) {

                    if (hasRowItemClicked || hasFormRowItemClicked || hasRowItemDoubleClicked) {
                        readListRowValues(view);

                        if (hasRowItemClicked) {
                            executeActionConfig("", AN_ROWITEMCLICKED, "");
                        } else if (hasFormRowItemClicked) {
                            executeActionConfig(actionListFieldname, AN_FORMROWITEMCLICKED, "");
                        } else if (hasRowItemDoubleClicked) {
                            executeActionConfig("", AN_ROWITEMDOUBLECLICKED, "");
                        }

                    } else {

                        ViewGroup viewGroup = (ViewGroup) view;
                        Log.v("Res Id", "" + view.getId());
                        for (int i = 0; i < viewGroup.getChildCount(); i++) {
                            View temp = viewGroup.getChildAt(i);
                            System.out.println("temp : " + temp);
                            if (temp instanceof MaterialCardView) {
                                MaterialCardView card = (MaterialCardView) viewGroup.getChildAt(i);
                                ViewGroup viewGroup1 = ((ViewGroup) card.getChildAt(0));
                                for (int k = 0; k < viewGroup1.getChildCount(); k++) {
                                    View child1 = viewGroup1.getChildAt(k);
                                    if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("SALES")) {
                                        int color = R.color.colorPrimary;
                                        child1.setBackground(getBackgroundDrawable(color, child1.getBackground()));
                                    } else if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("WMS")) {
                                        int color = Color.MAGENTA;
                                        child1.setBackground(getBackgroundDrawable(color, child1.getBackground()));
                                    }

                                    if (child1 instanceof LinearLayout) {
                                        LinearLayout relativeLayout = (LinearLayout) child1;
                                        for (int relav = 0; relav < relativeLayout.getChildCount(); relav++) {
                                            View child = relativeLayout.getChildAt(relav);
                                            Log.v("ReadRowValues ", "" + view.getId());

                                            if (child instanceof EditText) {
                                                EditText value = (EditText) child;
                                                listTag = value.getTag().toString();
                                                listValue = value.getText().toString();
                                                if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("SALES")) {
                                                    int color = R.color.colorPrimary;
                                                    value.setBackground(getBackgroundDrawable(color, value.getBackground()));

                                                } else if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("WMS")) {
                                                    int color = Color.MAGENTA;
                                                    value.setBackground(getBackgroundDrawable(color, value.getBackground()));

                                                }
                                            } else if (child instanceof MaterialButton) {
                                                MaterialButton value = (MaterialButton) child;
                                                listTag = value.getTag().toString();
                                                listValue = value.getText().toString();

                                            } else if (child instanceof TextView) {
                                                TextView value = (TextView) child;
                                                listTag = value.getTag().toString();
                                                listValue = value.getText().toString();
                                                if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("SALES")) {
                                                    int color = R.color.colorPrimary;
                                                    value.setBackground(getBackgroundDrawable(color, value.getBackground()));

                                                } else if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("WMS")) {
                                                    int color = Color.MAGENTA;
                                                    value.setBackground(getBackgroundDrawable(color, value.getBackground()));
                                                }
                                            } else if (child instanceof Spinner) {
                                                Spinner value = (Spinner) child;
                                                listTag = value.getTag().toString();
                                                if (value.getSelectedItem() != null) {
                                                    listValue = value.getSelectedItem().toString();
                                                }
                                            }
                                            if (listTag.contains("#")) {
                                                tempTag = listTag.split("#");
                                                selectedListValues.put(tempTag[0].toUpperCase(), listValue);
                                                selectedListIndex = Integer.valueOf(tempTag[1]);
                                            } else {
                                                selectedListValues.put(listTag.toUpperCase(), listValue);
                                                selectedListIndex = 0;
                                            }
                                        }
                                    }
                                    fileHelper.fileWriter("readListRowValues selectedListValues : " + selectedListValues, writer);
                                    System.out.println("readListRowValues selectedListValues : " + selectedListValues);

                                }
                            }
                        }

                    }
                }
            }

        };
    }

    private void setOnListLongClick() {
        onListLongClick = new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View view) {


                if (hasRowItemLongPress) {
                    readListRowValues(view);

                    if (hasRowItemLongPress) {
                        executeActionConfig("", AN_ROWITEMLONGPRESS, "");
                    } else {
                        executeActionConfig("", AN_ROWITEMDOUBLECLICKED, "");
                    }

                } else if (!menuonListItemclick.isEmpty()) {
                    readListRowValues(view);

                    //Pop up menu here
                    ut_dialog.showPopupMenuDialog(MainActivity.this, view, new PopupMenu.OnMenuItemClickListener() {
                        @Override
                        public boolean onMenuItemClick(MenuItem item) {
                            for (BE_MenuConfig menu : menuConfigs) {
                                if (menu.MenuDisplayText.equalsIgnoreCase(item.toString())) {
                                    executeActionConfig(menu.MenuCode, AN_MENUITEMCLICKED, "");
                                    break;
                                }
                            }
                            return false;
                        }
                    }, menuonListItemclick, menuConfigs);
                } else {
                    ViewGroup viewGroup = (ViewGroup) view;
                    Log.v("Res Id", "" + view.getId());
                    for (int i = 0; i < viewGroup.getChildCount(); i++) {
                        View temp = viewGroup.getChildAt(i);
                        if (temp instanceof LinearLayout) {
                            LinearLayout linearLayout = (LinearLayout) temp;

                            for (int j = 0; j < linearLayout.getChildCount(); j++) {
                                View child = linearLayout.getChildAt(j);
                            }
                        }
                    }
                }
                return false;
            }
        };
    }

    @SuppressLint("ResourceType")
    public void readListRowValues(View view) {
        selectedListValues = new HashMap<>();
        selectedListIndex = -1;
        String[] tempTag;
        String listTag = "";
        String listValue = "";
        ViewGroup viewGroup = (ViewGroup) view;

        fileHelper.fileWriter("readListRowValues viewGroup.getChildCount() : " + viewGroup.getChildCount(), writer);
        System.out.println("readListRowValues viewGroup.getChildCount() : " + viewGroup.getChildCount());

        for (int i = 0; i < viewGroup.getChildCount(); i++) {

            View temp = viewGroup.getChildAt(i);

            System.out.println("temp view : " + temp);

            if (temp instanceof MaterialCardView) {

                MaterialCardView card = (MaterialCardView) viewGroup.getChildAt(i);
                ViewGroup viewGroup1 = ((ViewGroup) card.getChildAt(0));
                for (int k = 0; k < viewGroup1.getChildCount(); k++) {
                    View child1 = viewGroup1.getChildAt(k);
                    if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("SALES")) {
                        int color = R.color.colorPrimary;
                        child1.setBackground(getBackgroundDrawable(color, child1.getBackground()));
                    } else if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("WMS")) {
                        int color = Color.MAGENTA;
                        child1.setBackground(getBackgroundDrawable(color, child1.getBackground()));
                    }


                    if (child1 instanceof LinearLayout) {
                        LinearLayout relativeLayout = (LinearLayout) child1;


                        for (int relav = 0; relav < relativeLayout.getChildCount(); relav++) {
                            View child = relativeLayout.getChildAt(relav);
//                            Log.v("ReadRowValues ", "" + view.getId());


                            if (child instanceof EditText) {
                                EditText value = (EditText) child;
                                listTag = value.getTag().toString();
                                listValue = value.getText().toString();
                                if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("SALES")) {
                                    int color = R.color.colorPrimary;
                                    value.setBackground(getBackgroundDrawable(color, value.getBackground()));

                                } else if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("WMS")) {
                                    int color = Color.MAGENTA;
                                    value.setBackground(getBackgroundDrawable(color, value.getBackground()));

                                }
                            } else if (child instanceof MaterialButton) {
                                MaterialButton value = (MaterialButton) child;
                                listTag = value.getTag().toString();
                                listValue = value.getText().toString();

                            } else if (child instanceof TextView) {
                                TextView value = (TextView) child;
                                listTag = value.getTag().toString();
                                listValue = value.getText().toString();
                                if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("SALES")) {
                                    int color = R.color.colorPrimary;
                                    value.setBackground(getBackgroundDrawable(color, value.getBackground()));

                                } else if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("WMS")) {
                                    int color = Color.MAGENTA;
                                    value.setBackground(getBackgroundDrawable(color, value.getBackground()));
                                }
                            } else if (child instanceof Spinner) {
                                Spinner value = (Spinner) child;
                                listTag = value.getTag().toString();
                                if (value.getSelectedItem() != null) {
                                    listValue = value.getSelectedItem().toString();
                                }
                            }
                            if (listTag.contains("#")) {
                                tempTag = listTag.split("#");
                                selectedListValues.put(tempTag[0].toUpperCase(), listValue);
                                selectedListIndex = Integer.valueOf(tempTag[1]);
                            } else {
                                selectedListValues.put(listTag.toUpperCase(), listValue);
                                selectedListIndex = 0;
                            }
                        }
                    }
                    fileHelper.fileWriter("readListRowValues selectedListValues : " + selectedListValues, writer);
                    System.out.println("readListRowValues selectedListValues : " + selectedListValues);
                }
            } else if (temp instanceof LinearLayout) {
                LinearLayout card = (LinearLayout) viewGroup.getChildAt(i);
                ViewGroup viewGroup1 = ((ViewGroup) card.getChildAt(0));
                for (int k = 0; k < viewGroup1.getChildCount(); k++) {
                    View child1 = viewGroup1.getChildAt(k);
                    if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("SALES")) {
                        int color = R.color.colorPrimary;
                        child1.setBackground(getBackgroundDrawable(color, child1.getBackground()));
                    } else if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("WMS")) {
                        int color = Color.MAGENTA;
                        child1.setBackground(getBackgroundDrawable(color, child1.getBackground()));
                    }

                    System.out.println("child1 : " + child1);

                    if (child1 instanceof LinearLayout) {
                        LinearLayout relativeLayout = (LinearLayout) child1;


                        for (int relav = 0; relav < relativeLayout.getChildCount(); relav++) {
                            View child = relativeLayout.getChildAt(relav);

                            if (child instanceof EditText) {
                                EditText value = (EditText) child;
                                listTag = value.getTag().toString();
                                listValue = value.getText().toString();
                                if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("SALES")) {
                                    int color = R.color.colorPrimary;
                                    value.setBackground(getBackgroundDrawable(color, value.getBackground()));

                                } else if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("WMS")) {
                                    int color = Color.MAGENTA;
                                    value.setBackground(getBackgroundDrawable(color, value.getBackground()));

                                }
                            } else if (child instanceof MaterialButton) {
                                MaterialButton value = (MaterialButton) child;
                                listTag = value.getTag().toString();
                                listValue = value.getText().toString();

                            } else if (child instanceof TextView) {
                                TextView value = (TextView) child;
                                listTag = value.getTag().toString();
                                listValue = value.getText().toString();
                                if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("SALES")) {
                                    int color = R.color.colorPrimary;
                                    value.setBackground(getBackgroundDrawable(color, value.getBackground()));

                                } else if (ut_sp.getStringValue(XML_SOLUTION_NAME).equalsIgnoreCase("WMS")) {
                                    int color = Color.MAGENTA;
                                    value.setBackground(getBackgroundDrawable(color, value.getBackground()));
                                }
                            } else if (child instanceof Spinner) {
                                Spinner value = (Spinner) child;
                                listTag = value.getTag().toString();
                                if (value.getSelectedItem() != null) {
                                    listValue = value.getSelectedItem().toString();
                                }
                            }
                            if (listTag.contains("#")) {
                                tempTag = listTag.split("#");
                                selectedListValues.put(tempTag[0].toUpperCase(), listValue);
                                selectedListIndex = Integer.valueOf(tempTag[1]);
                            } else {
                                selectedListValues.put(listTag.toUpperCase(), listValue);
                                selectedListIndex = 0;
                            }
                        }
                    }
                    fileHelper.fileWriter("readListRowValues selectedListValues : " + selectedListValues, writer);
                    System.out.println("readListRowValues selectedListValues : " + selectedListValues);
                }
            }
        }
    }

    public View.OnClickListener onFormButtonClick(String actionName) {
        return new View.OnClickListener() {
            @SuppressLint("ResourceType")
            public void onClick(View view) {

                Object tag = view.getTag();
                if (tag != null) {
                    executeActionConfig(tag.toString(), actionName, "");
                }

            }
        };
    }

    public void loadListConfigNextPageGrid(int position, HashMap<Integer, Integer> arrCount, HashMap<Integer, ArrayList<CheckBox>> listcheckboxHashmap, ArrayList<CheckBox> mDTCheckBoxes, ArrayList<BE_ListConfig> configs, String listConfigQuery) {

        progressBar.setVisibility(View.VISIBLE);

        Disposable d = Single.timer((long) 100, TimeUnit.MILLISECONDS)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(ignored -> {

                    System.out.println("listConfigValues : " + listConfigValues);
                    System.out.println("allLoad : " + allLoad);
                    System.out.println("listLimit : " + listLimit);

                    if (!listConfigValues.isEmpty()) {
                        if (!allLoad && listLimit > 0) {
                            if (getNextListConfigRecordsGrid(arrCount, listcheckboxHashmap, mDTCheckBoxes, configs, listConfigQuery)) {
                            } else {
                                notifyLastRecord(position);
                            }
                        }
                    }
                    progressBar.setVisibility(View.GONE);
                });

        disposables.add(d);
    }

    public void loadListConfigNextPage(int position, HashMap<Integer, Integer> arrCount, HashMap<Integer,
            ArrayList<CheckBox>> listcheckboxHashmap, ArrayList<CheckBox> mDTCheckBoxes, ArrayList<BE_ListConfig> configs, String listConfigQuery
            , String fieldName, String formListScreenName, String tagname, ArrayList<HashMap<String, String>> configsValues) {

        progressBar.setVisibility(View.VISIBLE);

        Disposable d = Single.timer((long) 100, TimeUnit.MILLISECONDS)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(ignored -> {
                    System.out.println("listConfigValues : " + configsValues);
                    System.out.println("allLoad : " + allLoad);
                    System.out.println("listLimit : " + listLimit);

                    if (screen.contains("MDT")) {
                        if (MdtlistLimit != 0) {
                            if (!configsValues.isEmpty()) {
                                if (!allLoad && MdtlistLimit > 0) {
                                    if (getNextListConfigRecords(arrCount, listcheckboxHashmap, mDTCheckBoxes, configs, listConfigQuery, fieldName, formListScreenName, tagname)) {
                                    } else {
                                        notifyLastRecord(position);
                                    }
                                }
                            }
                        }

                    } else {
                        if (!configsValues.isEmpty()) {
                            if (!allLoad && listLimit > 0) {
                                if (getNextListConfigRecords(arrCount, listcheckboxHashmap, mDTCheckBoxes, configs, listConfigQuery, fieldName, formListScreenName, tagname)) {
                                } else {
                                    notifyLastRecord(position);
                                }
                            }
                        }
                    }
                    progressBar.setVisibility(View.GONE);
                });

    }

    public void loadListConfigNextPageChild(int position, HashMap<Integer, Integer> arrCount, HashMap<Integer, ArrayList<CheckBox>> listcheckboxHashmap, ArrayList<CheckBox> mDTCheckBoxes, ArrayList<BE_ListConfig> configs, String listConfigQuery) {

        progressBar.setVisibility(View.VISIBLE);

        Disposable d = Single.timer((long) 100, TimeUnit.MILLISECONDS)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(ignored -> {
                    if (!listConfigValues.isEmpty()) {
                        if (!allLoadChild && listLimitChild > 0) {
                            if (getNextListConfigRecordsChild(arrCount, listcheckboxHashmap, mDTCheckBoxes, configs, listConfigQuery)) {
                            } else {
                                notifyLastRecord(position);
                            }
                        }
                    }
                    progressBar.setVisibility(View.GONE);
                });

    }

    public void loadListConfigNextPageExp(int position, HashMap<Integer, Integer> arrCount, HashMap<Integer, ArrayList<CheckBox>> listcheckboxHashmap, ArrayList<CheckBox> mDTCheckBoxes, ArrayList<BE_ListConfig> configs, String listConfigQuery, ArrayList<BE_ColorConfig> finalColorConfigs) {

        progressBar.setVisibility(View.VISIBLE);

        Disposable d = Single.timer((long) 100, TimeUnit.MILLISECONDS)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(ignored -> {
                    if (!listConfigValues.isEmpty()) {
                        if (!allLoad && listLimit > 0) {
                            if (getNextListConfigRecordsExp(arrCount, listcheckboxHashmap, mDTCheckBoxes, configs, listConfigQuery, finalColorConfigs)) {
                            } else {
                                notifyLastRecord(position);
                            }
                        }
                    }
                    progressBar.setVisibility(View.GONE);
                });

    }

    private boolean getNextListConfigRecordsExp(HashMap<Integer, Integer> arrCount, HashMap<Integer, ArrayList<CheckBox>> listcheckboxHashmap, ArrayList<CheckBox> mDTCheckBoxes, ArrayList<BE_ListConfig> listConfigs, String listConfigQuery, ArrayList<BE_ColorConfig> finalColorConfigs) {

        boolean rtn = false;
        if (!listConfigValues.isEmpty()) {
            if (listLimit > 0) {
                int limitStart = listPage + listLimit;
                ArrayList<HashMap<String, String>> newRecords;
                if (listConfigQuerySearchconfig != null) {
                    fileHelper.fileWriter("ListConfig Query : " + listConfigQuerySearchconfig, writer);
                    Log.d("ListConfig Query", listConfigQuerySearchconfig);
                    newRecords = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuerySearchconfig, limitStart, listLimit, MdtlistLimit);

                } else {
                    fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);
                    Log.d("ListConfig Query", listConfigQuery);
                    this.listConfigQuery = listConfigQuery;
                    newRecords = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, limitStart, listLimit, MdtlistLimit);

                }
                if (!newRecords.isEmpty()) {

                    listPage = limitStart;
                    try {
                        if (!listInsideForm) {
                            if (!Functions.isEmpty()) {

                                if (Functions.get(0).DesignType == 0) {
                                    ListconfigcustomExpandable listconfig = new ListconfigcustomExpandable(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                    listconfig.Listconfigcustom_AddExpandable(screen, scrollView, listConfigs, newRecords, listConfigView, finalColorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery);
                                } else if (Functions.get(0).DesignType == 1) {
                                    ListconfigcustomGrid listconfig = new ListconfigcustomGrid(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                    listconfig.Listconfigcustom_Add(screen, scrollView, listConfigs, newRecords, listConfigView, finalColorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount);
                                } else {
                                    ListconfigcustomExpandable listconfig = new ListconfigcustomExpandable(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                    listconfig.Listconfigcustom_AddExpandable(screen, scrollView, listConfigs, newRecords, listConfigView, finalColorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery);

                                }
                            } else {
                                ListconfigcustomExpandable listconfig = new ListconfigcustomExpandable(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listconfig.Listconfigcustom_AddExpandable(screen, scrollView, listConfigs, newRecords, listConfigView, finalColorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery);

                            }
                        } else {
                            if (!Functions.isEmpty()) {

                                if (Functions.get(0).DesignType == 0) {
                                    ListconfigcustomExpandable listConfigCustom = new ListconfigcustomExpandable(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                    listConfigCustom.Listconfigcustom_AddExpandable(formListScreenName, nsValues, listConfigs, newRecords, FormList_llValues, finalColorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery);
                                } else if (Functions.get(0).DesignType == 1) {

                                    listConfigHeader.setVisibility(View.GONE);
                                    zerothCardview.setVisibility(View.GONE);
                                    ListconfigcustomGrid listConfigCustom = new ListconfigcustomGrid(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                    //    listConfigCustom.Listconfigcustom_Add(formListScreenName, nsValues, listConfigs,newRecords, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding);
                                } else {
                                    ListconfigcustomExpandable listConfigCustom = new ListconfigcustomExpandable(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                    listConfigCustom.Listconfigcustom_AddExpandable(formListScreenName, nsValues, listConfigs, newRecords, FormList_llValues, finalColorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery);

                                }
                            } else {
                                ListconfigcustomExpandable listConfigCustom = new ListconfigcustomExpandable(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listConfigCustom.Listconfigcustom_AddExpandable(formListScreenName, nsValues, listConfigs, newRecords, FormList_llValues, finalColorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery);

                            }
                            FormList_llValues.invalidate();
                            llValues.invalidate();

                        }

                    } catch (Exception e) {
                        e.printStackTrace();

                    }

                    rtn = true;

                }
            }
        }

        return rtn;
    }

    private boolean getNextListConfigRecordsGrid(HashMap<Integer, Integer> arrCount, HashMap<Integer, ArrayList<CheckBox>> listcheckboxHashmap, ArrayList<CheckBox> mDTCheckBoxes, ArrayList<BE_ListConfig> listConfigs, String listConfigQuery) {

        boolean rtn = false;
        System.out.println("listConfigValues : " + listConfigValues);

        if (!listConfigValues.isEmpty()) {

            System.out.println("listLimit : " + listLimit);

            if (listLimit > 0) {
                int limitStart = listPage + listLimit;
                ArrayList<HashMap<String, String>> newRecords;
                if (listConfigQuerySearchconfig != null) {
                    fileHelper.fileWriter("ListConfig Query : " + listConfigQuerySearchconfig, writer);
                    Log.d("ListConfig Query", listConfigQuerySearchconfig);
                    newRecords = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuerySearchconfig, limitStart, listLimit, MdtlistLimit);

                } else {
                    fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);
                    Log.d("ListConfig Query", listConfigQuery);
                    this.listConfigQuery = listConfigQuery;
                    newRecords = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, limitStart, listLimit, MdtlistLimit);

                }
                if (!newRecords.isEmpty()) {

                    listPage = limitStart;
                    try {
                        if (!listInsideForm) {
                            if (!Functions.isEmpty()) {

                                if (Functions.get(0).DesignType == 0) {
                                    Listconfigcustom listconfig = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                    listconfig.Listconfigcustom_Add(screen, scrollView, listConfigs, newRecords, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery, "", "");
                                } else if (Functions.get(0).DesignType == 1) {
                                    ListconfigcustomGrid listconfig = new ListconfigcustomGrid(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                    listconfig.Listconfigcustom_Add(screen, scrollView, listConfigs, newRecords, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount);
                                } else {
                                    Listconfigcustom listconfig = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                    listconfig.Listconfigcustom_Add(screen, scrollView, listConfigs, newRecords, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery, "", "");

                                }
                            } else {
                                Listconfigcustom listconfig = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listconfig.Listconfigcustom_Add(screen, scrollView, listConfigs, newRecords, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery, "", "");

                            }

                            if (Functions.get(0).ScreenType != null) {

                                if (Functions.get(0).ScreenType.equals("5")) {

                                    productListAdapter = new ProductListAdapter(MainActivity.this, ut_common, ut_sp, screen, scrollView,
                                            listConfigs, newRecords, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding,
                                            listConfigQuery, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, ut_view,
                                            typeFace, fileHelper, da_queryConfig, da_dynamics, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits,
                                            FixedLot, heightRatio);

                                    productListAdapter.notifyDataSetChanged();

                                }
                            }


                        } else {
                            if (!Functions.isEmpty()) {

                                if (Functions.get(0).ScreenType != null) {

                                    if (Functions.get(0).ScreenType.equals("5")) {

                                        productListAdapter = new ProductListAdapter(MainActivity.this, ut_common, ut_sp, screen, scrollView,
                                                listConfigs, newRecords, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding,
                                                listConfigQuery, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, ut_view,
                                                typeFace, fileHelper, da_queryConfig, da_dynamics, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits,
                                                FixedLot, heightRatio);

                                        productListAdapter.notifyDataSetChanged();

                                    }
                                }
                            }
                            FormList_llValues.invalidate();
                            llValues.invalidate();

                        }

                    } catch (Exception e) {
                        e.printStackTrace();

                    }

                    rtn = true;

                }
            }
        }

        return rtn;
    }

    private boolean getNextListConfigRecords(HashMap<Integer, Integer> arrCount, HashMap<Integer, ArrayList<CheckBox>> listcheckboxHashmap, ArrayList<CheckBox> mDTCheckBoxes, ArrayList<BE_ListConfig> listConfigs, String listConfigQuery, String fieldName, String formListScreenName, String string) {

        boolean rtn = false;

        if (listLimit > 0) {
            int limitStart = listPage + listLimit;

            if (screen.contains("MDT")) {
                limitStart = listPage + MdtlistLimit;
            }

            if (formlist) {

                String fieldNames = "";

                if (fieldName != null && !fieldName.isEmpty()) {

                    for (int i = 0; i < layoutArrayList.size(); i++) {

                        String[] filed = string.split("#");
                        System.out.println("filed : " + filed[0]);
                        fieldNames = filed[0];
                        if (layoutArrayList.get(i).getTag().equals(filed[0])) {
                            LinearLayout views2 = (LinearLayout) layoutArrayList.get(i).findViewWithTag(filed[0]);
                            System.out.println("Count : " + views2.getChildCount());
                            limitStart = views2.getChildCount();
                        }
                    }
                }

                listConfigs = da_listConfig.getListConfigs(formListScreenName + "_" + fieldName, language, screenWidth);
                queryListConfig = da_queryConfig.getQueryConfig(formListScreenName + "_" + fieldName);
                String listConfigQuerys = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            }

            ArrayList<HashMap<String, String>> newRecords;
            if (listConfigQuerySearchconfig != null) {

                fileHelper.fileWriter("ListConfig Query : " + listConfigQuerySearchconfig, writer);
                Log.d("ListConfig Query", listConfigQuerySearchconfig);
                newRecords = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuerySearchconfig, limitStart, listLimit, MdtlistLimit);

            } else {
                fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);
                Log.d("ListConfig Query", listConfigQuery);
                this.listConfigQuery = listConfigQuery;
                newRecords = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, limitStart, listLimit, MdtlistLimit);

            }
            if (!newRecords.isEmpty()) {
                LinearLayout listlayout = null;
                for (LinearLayout linearLayout : layoutArrayList) {
                    System.out.println(linearLayout.getTag() + " = " + fieldName);
                    if (linearLayout.getTag().toString().equalsIgnoreCase(fieldName)) {
                        listlayout = linearLayout;
                        break;
                    }
                }

                listPage = limitStart;
                try {
                    if (!listInsideForm) {
                        if (!Functions.isEmpty()) {

                            if (Functions.get(0).DesignType == 0) {
                                Listconfigcustom listconfig = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listconfig.Listconfigcustom_Add(screen, scrollView, listConfigs, newRecords, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery, fieldName, formListScreenName);
                            } else if (Functions.get(0).DesignType == 1) {
                                ListconfigcustomGrid listconfig = new ListconfigcustomGrid(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listconfig.Listconfigcustom_Add(screen, scrollView, listConfigs, newRecords, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount);
                            } else {
                                Listconfigcustom listconfig = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listconfig.Listconfigcustom_Add(screen, scrollView, listConfigs, newRecords, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery, fieldName, formListScreenName);

                            }
                        } else {
                            Listconfigcustom listconfig = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                            listconfig.Listconfigcustom_Add(screen, scrollView, listConfigs, newRecords, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery, fieldName, formListScreenName);

                        }
                    } else {
                        if (!Functions.isEmpty()) {

                            if (Functions.get(0).DesignType == 0) {
                                Listconfigcustom listConfigCustom = new Listconfigcustom(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listConfigCustom.Listconfigcustom_Add(formListScreenName + "_" + fieldName, nsValues, listConfigs, newRecords, listlayout, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery, fieldName, formListScreenName);
                            } else if (Functions.get(0).DesignType == 1) {

                                listConfigHeader.setVisibility(View.GONE);
                                zerothCardview.setVisibility(View.GONE);
                                ListconfigcustomGrid listConfigCustom = new ListconfigcustomGrid(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                //    listConfigCustom.Listconfigcustom_Add(formListScreenName, nsValues, listConfigs,newRecords, listConfigValues, listlayout, colorConfigs, onListClick, onListLongClick, textPadding);
                            } else {
                                Listconfigcustom listConfigCustom = new Listconfigcustom(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listConfigCustom.Listconfigcustom_Add(formListScreenName + "_" + fieldName, nsValues, listConfigs, newRecords, listlayout, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery, fieldName, formListScreenName);

                            }
                        } else {
                            Listconfigcustom listConfigCustom = new Listconfigcustom(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                            listConfigCustom.Listconfigcustom_Add(formListScreenName + "_" + fieldName, nsValues, listConfigs, newRecords, listlayout, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery, fieldName, formListScreenName);

                        }
                        FormList_llValues.invalidate();
                        listlayout.invalidate();
                        llValues.invalidate();

                    }

                } catch (Exception e) {
                    e.printStackTrace();

                }

                rtn = true;

            }
        }


        return rtn;
    }

    private boolean getNextListConfigRecordsChild(HashMap<Integer, Integer> arrCount, HashMap<Integer, ArrayList<CheckBox>> listcheckboxHashmap, ArrayList<CheckBox> mDTCheckBoxes, ArrayList<BE_ListConfig> listConfigs, String listConfigQuery) {

        boolean rtn = false;
        if (!listConfigValuesChild.isEmpty()) {
            if (listLimitChild > 0) {
                int limitStart = listPageChild + listLimitChild;
                ArrayList<HashMap<String, String>> newRecords;
                if (listConfigQuerySearchconfig != null) {
                    fileHelper.fileWriter("ListConfig Query : " + listConfigQuerySearchconfig, writer);
                    Log.d("ListConfig Query", listConfigQuerySearchconfig);
                    newRecords = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuerySearchconfig, limitStart, listLimitChild, MdtlistLimit);

                } else {
                    fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);
                    Log.d("ListConfig Query", listConfigQuery);
                    this.listConfigQuery = listConfigQuery;
                    newRecords = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, limitStart, listLimitChild, MdtlistLimit);

                }
                if (!newRecords.isEmpty()) {

                    listPageChild = limitStart;
                    try {
                        if (!listInsideForm) {
                            if (!Functions.isEmpty()) {


                                if (Functions.get(0).DesignType == 0) {
                                    ListconfigcustomChild listconfig = new ListconfigcustomChild(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                    listconfig.Listconfigcustom_Add(screenNameChild, nestedScrollViewArrayList.get(0), listConfigs, newRecords, linearLayoutArrayList.get(0), colorConfigsChild, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery);
                                } else if (Functions.get(0).DesignType == 1) {
                                    ListconfigcustomGrid listconfig = new ListconfigcustomGrid(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                    listconfig.Listconfigcustom_Add(screenNameChild, nestedScrollViewArrayList.get(0), listConfigs, newRecords, linearLayoutArrayList.get(0), colorConfigsChild, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount);
                                } else {
                                    ListconfigcustomChild listconfig = new ListconfigcustomChild(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                    listconfig.Listconfigcustom_Add(screenNameChild, nestedScrollViewArrayList.get(0), listConfigs, newRecords, linearLayoutArrayList.get(0), colorConfigsChild, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery);

                                }
                            } else {
                                ListconfigcustomChild listconfig = new ListconfigcustomChild(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listconfig.Listconfigcustom_Add(screenNameChild, nestedScrollViewArrayList.get(0), listConfigs, newRecords, linearLayoutArrayList.get(0), colorConfigsChild, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery);

                            }
                        } else {
                            if (!Functions.isEmpty()) {

                                if (Functions.get(0).DesignType == 0) {
                                    ListconfigcustomChild listConfigCustom = new ListconfigcustomChild(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                    listConfigCustom.Listconfigcustom_Add(screenNameChild, nestedScrollViewArrayList.get(0), listConfigs, newRecords, linearLayoutArrayList.get(0), colorConfigsChild, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery);
                                } else if (Functions.get(0).DesignType == 1) {

                                    listConfigHeader.setVisibility(View.GONE);
                                    zerothCardview.setVisibility(View.GONE);
                                    ListconfigcustomGrid listConfigCustom = new ListconfigcustomGrid(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                } else {
                                    ListconfigcustomChild listConfigCustom = new ListconfigcustomChild(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                    listConfigCustom.Listconfigcustom_Add(screenNameChild, nestedScrollViewArrayList.get(0), listConfigs, newRecords, linearLayoutArrayList.get(0), colorConfigsChild, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery);

                                }
                            } else {
                                ListconfigcustomChild listConfigCustom = new ListconfigcustomChild(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listConfigCustom.Listconfigcustom_Add(screenNameChild, nestedScrollViewArrayList.get(0), listConfigs, newRecords, linearLayoutArrayList.get(0), colorConfigsChild, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCount, listcheckboxHashmap, mDTCheckBoxes, this.listConfigQuery);

                            }
                            linearLayoutArrayList.get(0).invalidate();
                            llValues.invalidate();

                        }

                    } catch (Exception e) {
                        e.printStackTrace();

                    }

                    rtn = true;

                }
            }
        }

        return rtn;
    }

    private void notifyLastRecord(int recordCount) {
        Toast.makeText(getApplicationContext(), "All record(s) have been displayed.", Toast.LENGTH_SHORT).show();
//        allLoad = true;
    }

    public void createFormMultipleImageRating(LinearLayout
                                                      formContent, BE_FormConfig
                                                      config, String screen) {

        ArrayList<BE_MultipleImageRating> rtn = new ArrayList<BE_MultipleImageRating>();
        queryFormConfig = da_queryConfig.getQueryConfig(screen + "_FORM_MULTIPLEIMAGERATING_" + config.FieldName);
        String query = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
        fileHelper.fileWriter("formQuery : " + query, writer);
        if (!query.equals("")) {
            fileHelper.fileWriter("getMultipleImageRating Query : " + query, writer);
            rtn = (ArrayList<BE_MultipleImageRating>) da_dynamics.getMultipleImageRating(query);
        }


        HorizontalScrollView horizontalscrollview = new HorizontalScrollView(this);
        horizontalscrollview.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT, .2f));
        horizontalscrollview.setFillViewport(false);
        horizontalscrollview.setHorizontalScrollBarEnabled(false);


        LinearLayout linearLayout = new LinearLayout(this);
        linearLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        linearLayout.setOrientation(LinearLayout.HORIZONTAL);

        LayoutInflater mInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        LinearLayout llChildLayout = null;
        horizontalscrollview.removeAllViews();
        for (int i = 0; i < rtn.size(); i++) {
            llChildLayout = new LinearLayout(this);
            llChildLayout.setOrientation(LinearLayout.HORIZONTAL);
            View view = mInflater.inflate(R.layout.custom_multipleimagerating, null);
            ViewHolder holderView = new ViewHolder();
            holderView.imageview = (ImageView) view.findViewById(R.id.imageview);
            holderView.title = (TextView) view.findViewById(R.id.title);
            holderView.ratingBar = (RatingBar) view.findViewById(R.id.rating);

            holderView.title.setText(rtn.get(i).Title);
            holderView.ratingBar.setRating(Float.parseFloat(rtn.get(i).Rating));

            llChildLayout.addView(view);
            linearLayout.addView(llChildLayout);

        }
        horizontalscrollview.addView(linearLayout);
        formContent.addView(horizontalscrollview);
    }

    public class ViewHolder {
        ImageView imageview;
        TextView title;
        RatingBar ratingBar;
    }

    public void createFormContentCardview(LinearLayout formContent, BE_FormConfig config) {

        GridView GridCardview;
        ArrayList<BE_Cardview> cardFunctions = new ArrayList<BE_Cardview>();
        queryFormConfig = da_queryConfig.getQueryConfig(screen + "_FORM_CARDVIEW_" + config.FieldName);
        String query = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
        if (!query.equals("")) {
            fileHelper.fileWriter("getCardviewValues Query : " + query, writer);
            cardFunctions = (ArrayList<BE_Cardview>) da_dynamics.getCardviewValues(query);
        }

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

    }

    public void createFormContentFormView(String screen, LinearLayout formContent, BE_FormConfig config, String MainWidget) {

        ArrayList<HashMap<String, String>> formviewValues = null;
        String screenName;
        if (MainWidget.isEmpty()) {
            screenName = screen + FC_FORM + FC_FORMVIEW + "_" + config.FieldName;
        } else {
            screenName = screen + FC_FORM + FC_FORMVIEW + "_" + config.FieldName + "_" + MainWidget;
        }

        System.out.println("FormView screenName : " + screenName);

        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenName);

        DA_FormConfig da_formConfig = new DA_FormConfig(this);
        ArrayList<BE_FormConfig> formviewFormConfigs = da_formConfig.getFormConfigs(screenName, language);

        System.out.println("formviewFormConfigs : " + formviewFormConfigs);

        String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
        System.out.println("query : " + query);

        if (query != null && !query.isEmpty()) {
            formviewValues = new ArrayList<HashMap<String, String>>();
            fileHelper.fileWriter("FormWidget Query : " + query, writer);
            Log.d("FormWidget Query", query);
            formviewValues = da_dynamics.getFormviewConfigValues(query);
        }

        System.out.println("formviewValues : " + formviewValues);

        try {
            if (widgetcontent != null) {
                widgetcontent.removeAllViews();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        int width = (int) Math.round(config.ValueWidth * (screenWidth / 100.0));

        widgetcontent = new LinearLayout(MainActivity.this);
        widgetcontent.setOrientation(LinearLayout.HORIZONTAL);
        widgetcontent.setLayoutParams(new LinearLayout.LayoutParams(width, ViewGroup.LayoutParams.WRAP_CONTENT));
        widgetcontent.setTag(config.FieldName.toUpperCase());
        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        if (config.HeaderWidth > 0) {
            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.HFontSize * size;

            TextView label = ut_view.generateFormTextView(textPadding, contentHeight, config.HeaderWidth, (screenWidth / 100.0),
                    ut_common.translateColor(config.HBackColor), ut_common.translateColor(config.HForeColor),
                    config.NewText, textsize, config.HFontStyle, config.HAlignment, 0, "", typeFace, config.DataMemberType, config.ValueWidth);

            widgetcontent.addView(label);
        }

        if (config.ValueWidth > 0) {

            float size = Float.parseFloat(String.valueOf(fontsize));
            float textsize = config.VFontSize * size;

            NestedScrollView value = ut_view.generateFormView(MainActivity.this, textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                    config.VBackColorName, config.VForeColorName, config.DefaultValue, textsize, config.FieldName, config.VFontStyle,
                    config.VAlignment, config.ShowBorder, formviewValues, size, config.HFontSize, config.VFontSize, formviewFormConfigs, screenName);

            widgetcontent.addView(value);
        }

        if (config.HeaderHeight == 0 && config.ValueHeight == 0) {
            widgetcontent.setVisibility(View.GONE);  //GONE
        }
        ViewGroup.MarginLayoutParams marginParams = (ViewGroup.MarginLayoutParams) widgetcontent.getLayoutParams();
        marginParams.topMargin = DEFAULT_MARGIN;

        formContent.addView(widgetcontent);

    }


    public void createFormStaticViews(LinearLayout formContent, BE_FormConfig
            config, String screen) {

        GridView GridCardview;
        ArrayList<BE_StaicViews> cardFunctions = new ArrayList<BE_StaicViews>();
        queryFormConfig = da_queryConfig.getQueryConfig(screen + "_FORM_STATICVIEWS_" + config.FieldName);
        String query = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
        if (!query.equals("")) {
            fileHelper.fileWriter("getStaicViewsValues Query : " + query, writer);
            cardFunctions = (ArrayList<BE_StaicViews>) da_dynamics.getStaicViewsValues(query);
        }


        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

    }

    public void createDashBoards(BE_FormConfig config) {

        DA_WorkFlowConfig da_workFlowConfig = new DA_WorkFlowConfig(this);
        workFlowConfigs = da_workFlowConfig.getWorkFlowConfig(screen, ut_sp.getStringValue(SP_ACCESS_LEVEL));

        if (!workFlowConfigs.isEmpty()) {

            /* ----- Create WorkFlow -------- */

            LinearLayout linearLayout = new LinearLayout(this);
            linearLayout.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            linearLayout.setOrientation(LinearLayout.VERTICAL);

            String vcolor = ut_common.translateColor(config.VForeColor);


            WorkFlow workFlow = new WorkFlow();
            linearLayout = workFlow.generateFlow(MainActivity.this, typeFace, workFlowConfigs, linearLayout, config, vcolor);

            formContent.addView(linearLayout);

        } else {

            /* ------ DashBoatd ----- */

            Dashboard dashboard = new Dashboard();
            dashboard.createDashBoard(MainActivity.this, config, da_dynamics, queryFormConfig, da_queryConfig, screen, ut_common, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, pageName, ut_sp, language, typeFace, cellWidth, cellHeight, iconWidth, iconHeight, Functions, ut_image, fileHelper);


        }


    }

    public void onDashBoardClick(String PageName, BE_GridFunctions grid) {


        if (grid.FunctionName != null) {

            if (!grid.FunctionName.equals("") && !grid.FunctionName.equalsIgnoreCase(FN_FOLDER)) {

                System.out.println("DashboardIconClicked Screen Name : " + grid.ScreenName);
                System.out.println("DashboardIconClicked FunctionName : " + grid.FunctionName);
                executeActionConfig(grid.ScreenName, AN_DASHBOARDICONCLICKED, "");

                if (!actionPerformed) {
                    actionPerformed = true;
                    Intent intent = new Intent(MainActivity.this, MainActivity.class);
                    intent.putExtra(IN_SCREEN_NAME, grid.ScreenName);
                    intent.putExtra(IN_PARAMETERS, parameters);
                    intent.putExtra(IN_PARAM_FORM, formValues);
                    intent.putExtra(IN_PARAM_LIST, selectedListValues);
                    intent.putExtra(IN_PARAM_ROOT, "MAIN");
                    intent.putExtra(IN_AppBarShow, "");
                    startActivity(intent);
                }

            } else if (grid.FunctionName.equalsIgnoreCase(FN_FOLDER)) {
                accessFolder = true;
                if (!actionPerformed) {
                    actionPerformed = true;
                    Intent intent = new Intent(MainActivity.this, MainActivity.class);
                    intent.putExtra(IN_SCREEN_NAME, grid.FunctionText);
                    intent.putExtra(IN_PARAMETERS, parameters);
                    intent.putExtra(IN_PARAM_FORM, formValues);
                    intent.putExtra(IN_PARAM_LIST, selectedListValues);
                    intent.putExtra(IN_PARAM_ROOT, "MAIN");
                    intent.putExtra(IN_AppBarShow, "");
                    startActivity(intent);
                }
            }
        }

        if (grid.FunctionName.equals(BILIST) && grid.FunctionText.equals("Analysis")) {

            Intent intent = new Intent(MainActivity.this, MainActivity.class);
            intent.putExtra(IN_SCREEN_NAME, grid.FunctionName);
            intent.putExtra(IN_PARAMETERS, parameters);
            intent.putExtra(IN_PARAM_FORM, formValues);
            intent.putExtra(IN_PARAM_LIST, selectedListValues);
            intent.putExtra(IN_PARAM_ROOT, "MAIN");
            intent.putExtra(IN_AppBarShow, "");
            startActivity(intent);

        }


    }

    public void refreshDashBoard() {

        ArrayList<BE_GridFunctions> gridFunctions = da_gridFunctions.getGridFunctions(pageName, ut_sp.getStringValue(SP_ACCESS_LEVEL), language);
        //  ad_dashBoard = new AD_DashBoard(this, pageName, gridFunctions, cellWidth, cellHeight, iconWidth, iconHeight, ut_sp, transconfig);
        //gridView.setAdapter(ad_dashBoard); 

    }

    public void showErrorMessage(String message) {
        ut_dialog.showAlert("Error", message, new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ut_dialog.dialog.dismiss();
            }
        }, "Ok");
    }

    public boolean executeActionConfig(String FieldName, String
            ActionName, String ActionIndex) {

        String name = screen;

        fileHelper.fileWriter("ActionIndex : " + FieldName + " -- " + ActionName + " -- " + ActionIndex, writer);
        System.out.println("ActionIndex : " + FieldName + " -- " + ActionName + " -- " + ActionIndex);
        System.out.println("ActionIndex ScreenName2 : " + screen);
        System.out.println("ActionIndex actionConfigs : " + actionConfigs);


        if (actionConfigs.isEmpty()) {
            DA_ActionConfig da_actionConfig = new DA_ActionConfig(this);
            actionConfigs = da_actionConfig.getActionConfigs(name, ut_sp.getStringValue(SP_ACCESS_LEVEL));
        }

        System.out.println("SolutionName SolutionName : " + SolutionName);
        if (SolutionName.equals("SALES"))

        System.out.println("actionConfigs : " + actionConfigs);


        for (BE_ActionConfig actionConfig : actionConfigs) {

            if (actionConfig.FieldName.equalsIgnoreCase(FieldName) && actionConfig.ActionName.equalsIgnoreCase(ActionName)) {
                bCancel = false;
                if (ActionName.equals(AN_ALERTDIALOGCLICK)) {
                    if (ActionIndex.equals("1")) {
                        actionPerformed = false;
                    } else {
                        actionPerformed = true;
                    }

                    if (actionConfig.ActionIndex.equals(ActionIndex)) {
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                doActionType(FieldName, actionConfig, screen);
                                System.out.println("doActionType : " + FieldName);
                            }
                        });
                    }

                } else {
                    System.out.println("runOnUiThread : ");

                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {

                            System.out.println("Indicator : " + indicatorShow);

//                            if (indicatorShow) {
//                                final Handler handler = new Handler(Looper.getMainLooper());
//                                handler.postDelayed(new Runnable() {
//                                    @Override
//                                    public void run() {
//                                        doActionType(FieldName, actionConfig, screen);
//                                    }
//                                }, 1000);
//                            } else {
                            doActionType(FieldName, actionConfig, screen);
//                            }
                        }
                    });
                }
            }


            if (actionConfig.FieldName.equalsIgnoreCase(FieldName) && ActionName.equalsIgnoreCase("")) {
                Focus = false;
            }

        }
        System.out.println("bCancel : " + bCancel);
        if (bCancel) {
            finish();
        }

        return true;
    }

    public boolean executeActionConfigList(String FieldName, String
            ActionName, String ActionIndex, String screen) {

        String names = screen;

        fileHelper.fileWriter("ActionIndex : " + FieldName + " -- " + ActionName + " -- " + ActionIndex, writer);
        System.out.println("ActionIndex : " + FieldName + " -- " + ActionName + " -- " + ActionIndex);
        System.out.println("ActionIndex ScreenName2 : " + screen);
        System.out.println("ActionIndex actionConfigs : " + actionConfigs);


        if (actionConfigs.isEmpty()) {
            DA_ActionConfig da_actionConfig = new DA_ActionConfig(this);
            actionConfigs = da_actionConfig.getActionConfigs(names, ut_sp.getStringValue(SP_ACCESS_LEVEL));
        }


        if (SolutionName.equals("SALES")) {
            if (ActionIndex.equals("0") || ActionIndex.equals("1")) {
                try {
                    if (nextDisable) {
                        item_next.setVisible(true);
                        nextDisable = false;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        System.out.println("actionConfigs : " + actionConfigs);


        for (BE_ActionConfig actionConfig : actionConfigs) {

            if (actionConfig.FieldName.equalsIgnoreCase(FieldName) && actionConfig.ActionName.equalsIgnoreCase(ActionName)) {
                bCancel = false;
                if (ActionName.equals(AN_ALERTDIALOGCLICK)) {
                    if (ActionIndex.equals("1")) {
                        actionPerformed = false;
                    } else {
                        actionPerformed = true;
                    }

                    if (actionConfig.ActionIndex.equals(ActionIndex)) {
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                doActionType(FieldName, actionConfig, screen);
                            }
                        });
                    }

                } else {
                    System.out.println("runOnUiThread : ");

                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {

                            System.out.println("Indicator : " + indicatorShow);
                            doActionType(FieldName, actionConfig, screen);
                        }
                    });
                }
            }


            if (actionConfig.FieldName.equalsIgnoreCase(FieldName) && ActionName.equalsIgnoreCase("")) {
                Focus = false;
            }

        }
        System.out.println("bCancel : " + bCancel);
        if (bCancel) {
            finish();
        }

        return true;
    }

    public boolean executeActionConfigChild(String FieldName, String
            ActionName, String ActionIndex) {

        String name = screenNameChild;

        fileHelper.fileWriter("ActionIndex : " + FieldName + " -- " + ActionName + " -- " + ActionIndex, writer);
        System.out.println("ActionIndex : " + FieldName + " -- " + ActionName + " -- " + ActionIndex);
        System.out.println("ActionIndex ScreenName2 : " + screenNameChild);
        System.out.println("ActionIndex actionConfigs : " + da_actionConfig_child);


        if (da_actionConfig_child.isEmpty()) {
            DA_ActionConfig da_actionConfig = new DA_ActionConfig(this);
            da_actionConfig_child = da_actionConfig.getActionConfigs(name, ut_sp.getStringValue(SP_ACCESS_LEVEL));
        }


        if (SolutionName.equals("SALES")) {
            if (ActionIndex.equals("0") || ActionIndex.equals("1")) {
                try {
                    if (nextDisable) {
                        item_next.setVisible(true);
                        nextDisable = false;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        System.out.println("actionConfigs : " + da_actionConfig_child);


        for (BE_ActionConfig actionConfigs : da_actionConfig_child) {

            if (actionConfigs.FieldName.equalsIgnoreCase(FieldName) && actionConfigs.ActionName.equalsIgnoreCase(ActionName)) {
                bCancel = false;
                if (ActionName.equals(AN_ALERTDIALOGCLICK)) {
                    if (ActionIndex.equals("1")) {
                        actionPerformed = false;
                    } else {
                        actionPerformed = true;
                    }

                    if (actionConfigs.ActionIndex.equals(ActionIndex)) {
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                doActionTypeChild(FieldName, actionConfigs, screenNameChild);
                            }
                        });
                    }

                } else {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {

                            System.out.println("Indicator : " + indicatorShow);

                            if (indicatorShow) {
                                final Handler handler = new Handler(Looper.getMainLooper());
                                handler.postDelayed(new Runnable() {
                                    @Override
                                    public void run() {
                                        doActionTypeChild(FieldName, actionConfigs, screenNameChild);
                                    }
                                }, 1000);
                            } else {
                                doActionTypeChild(FieldName, actionConfigs, screenNameChild);
                            }
                        }
                    });
                }
            }


            if (actionConfigs.FieldName.equalsIgnoreCase(FieldName) && ActionName.equalsIgnoreCase("")) {
                Focus = false;
            }

        }
        System.out.println("bCancel : " + bCancel);
        if (bCancel) {
            finish();
        }

        return true;
    }

    public boolean executeActionConfigx(String FieldName, String
            ActionName, String ActionIndex, ArrayList<BE_ActionConfig> actionConfigs) {
        String name = screen;

        fileHelper.fileWriter("ActionIndex 2 : " + FieldName + " -- " + ActionName + " -- " + ActionIndex, writer);

        System.out.println("ActionIndex 2 : " + FieldName + " -- " + ActionName + " -- " + ActionIndex);

        System.out.println("actionConfigs 2 : " + actionConfigs);
        fileHelper.fileWriter("ActionCONFIG 2 : " + actionConfigs, writer);

        if (SolutionName.equals("SALES")) {
            if (ActionIndex.equals("0") || ActionIndex.equals("1")) {
                try {
                    if (nextDisable) {
                        item_next.setVisible(true);
                        nextDisable = false;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        for (BE_ActionConfig actionConfig : actionConfigs) {

            if (actionConfig.FieldName.equalsIgnoreCase(FieldName) && actionConfig.ActionName.equalsIgnoreCase(ActionName)) {
                bCancel = false;
                if (ActionName.equals(AN_ALERTDIALOGCLICK)) {

                    if (ActionIndex.equals("1")) {
                        actionPerformed = false;
                    } else {
                        actionPerformed = true;
                    }

                    if (actionConfig.ActionIndex.equals(ActionIndex)) {
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                doActionType(FieldName, actionConfig, screen);
                            }
                        });
                    }

                } else {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            doActionType(FieldName, actionConfig, screen);
                        }
                    });
                }
            }


            if (actionConfig.FieldName.equalsIgnoreCase(FieldName) && ActionName.equalsIgnoreCase("")) {
                Focus = false;
            }

        }
        if (bCancel) {
            finish();
        }

        return true;
    }

    Timer timer;

    @SuppressLint("MissingPermission")
    public void doActionType(String FieldName, BE_ActionConfig actionConfig, String mScreenName) {

        System.out.println("ACTION TYPE : " + actionConfig.ActionType);
        fileHelper.fileWriter("ACTION TYPE : " + actionConfig.ActionType, writer);


        if (actionConfig.ActionType.equalsIgnoreCase(AT_FORM)) {

            timer3 = new Timer();
            timer3.schedule(new TimerTask() {
                @Override
                public void run() {
                    System.gc();
                    deleteCache(getApplicationContext());
                }
            }, 0, 300000);


            if (actionConfig.ActionValue.contains("{")) {

                int start = actionConfig.ActionValue.indexOf("{");
                int end;
                String key;
                end = actionConfig.ActionValue.indexOf("}");
                key = actionConfig.ActionValue.substring(start + 1, end);
                System.out.println("KEY1234: " + key);
                System.out.println("start : " + start);

                String query = ut_common.getQueryForm(actionConfig.ActionValue, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                System.out.println(" FORM QUERY : " + query);
                query = query.replace("'", "");

                goToForm(actionConfig.ActionPlan, query);


//                if (start == 0) {
//                    goToForm(actionConfig.ActionPlan, selectedListValues.get(key.split("[.]")[1].toUpperCase()));
////                    goToForm(actionConfig.ActionPlan, query);
//                } else {
//                    goToForm(actionConfig.ActionPlan, actionConfig.ActionValue.split(" ")[0] + " " + selectedListValues.get(key.split("[.]")[1].toUpperCase()));
////                    goToForm(actionConfig.ActionPlan, actionConfig.ActionValue.split(" ")[0] + " " + query);
//                }

            } else {
                goToForm(actionConfig.ActionPlan, actionConfig.ActionValue);

            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CLEARFORMFIELDS)) {

            for (int i = 0; i < formConfigs.size(); i++) {

                if (screen.contains("FORM-LOGIN")) {

                    if (ut_sp.getStringValue(UT_Constants.XML_SOLUTION_NAME).equalsIgnoreCase("WMS")) {
                        if (formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_PASSWORD)
                                || formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_TEXT_BOX)) {
                            View view = formContent.findViewWithTag(formConfigs.get(i).FieldName.toUpperCase());

                            if (view instanceof CheckBox) {
                                CheckBox checkBox = (CheckBox) view;
                                checkBox.setChecked(false);

                            } else if (view instanceof MaterialButton) {
                                MaterialButton button = (MaterialButton) view;
                                //   button.setText("");

                            } else if (view instanceof TextInputEditText) {
                                EditText textView = (EditText) view;
                                textView.setText("");

                            } else if (view instanceof MaterialEditText) {
                                MaterialEditText editText = (MaterialEditText) view;
                                editText.setValue("");
                                formValues.put(view.getTag().toString(), "");

                            } else if (view instanceof MaterialEditText_back) {
                                MaterialEditText_back editText = (MaterialEditText_back) view;
                                editText.setValue("");
                                formValues.put(view.getTag().toString(), "");

                            } else if (view instanceof EditText) {
                                EditText editText = (EditText) view;
                                editText.setText("");

                            } else if (view instanceof AutoCompleteTextView) {
                                AutoCompleteTextView editText = (AutoCompleteTextView) view;
                                editText.setText("");
                            } else if (view instanceof MaterialEditTextPassword) {
                                MaterialEditTextPassword editText = (MaterialEditTextPassword) view;
                                editText.setText("");
                            }
                            try {
                                formValues.put(formConfigs.get(i).FieldName.toUpperCase(), "");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }
                    } else {

                        if (formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_PASSWORD)) {
                            View view = formContent.findViewWithTag(formConfigs.get(i).FieldName.toUpperCase());

                            if (view instanceof CheckBox) {
                                CheckBox checkBox = (CheckBox) view;
                                checkBox.setChecked(false);

                            } else if (view instanceof MaterialButton) {
                                MaterialButton button = (MaterialButton) view;
                                //   button.setText("");

                            } else if (view instanceof TextInputEditText) {
                                EditText textView = (EditText) view;
                                textView.setText("");

                            } else if (view instanceof MaterialEditText) {
                                MaterialEditText editText = (MaterialEditText) view;
                                editText.setValue("");
                                formValues.put(view.getTag().toString(), "");

                            } else if (view instanceof MaterialEditText_back) {
                                MaterialEditText_back editText = (MaterialEditText_back) view;
                                editText.setValue("");
                                formValues.put(view.getTag().toString(), "");

                            } else if (view instanceof EditText) {
                                EditText editText = (EditText) view;
                                editText.setText("");

                            } else if (view instanceof AutoCompleteTextView) {
                                AutoCompleteTextView editText = (AutoCompleteTextView) view;
                                editText.setText("");
                            } else if (view instanceof MaterialEditTextPassword) {
                                MaterialEditTextPassword editText = (MaterialEditTextPassword) view;
                                editText.setText("");
                            }

                            try {
                                formValues.put(formConfigs.get(i).FieldName.toUpperCase(), "");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }
                    }
                } else {
                    if (formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_TEXT_BOX) || formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_TEXTAREA) || formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_PASSWORD)) {

                        View view = formContent.findViewWithTag(formConfigs.get(i).FieldName.toUpperCase());

                        if (view instanceof CheckBox) {
                            CheckBox checkBox = (CheckBox) view;
                            checkBox.setChecked(false);

                        } else if (view instanceof MaterialButton) {
                            MaterialButton button = (MaterialButton) view;
                            //   button.setText("");

                        } else if (view instanceof TextInputEditText) {
                            EditText textView = (EditText) view;
                            textView.setText("");
                            formValues.put(view.getTag().toString(), "");

                        } else if (view instanceof EditText) {
                            EditText editText = (EditText) view;
                            editText.setText("");

                        } else if (view instanceof AutoCompleteTextView) {
                            AutoCompleteTextView editText = (AutoCompleteTextView) view;
                            editText.setText("");
                        } else if (view instanceof MaterialEditTextPassword) {
                            MaterialEditTextPassword editText = (MaterialEditTextPassword) view;
                            editText.setText("");
                        }
                        try {
                            formValues.put(formConfigs.get(i).FieldName.toUpperCase(), "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    } else if (formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_DATEPICKER) || formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_LABEL)) {
                        View view = formContent.findViewWithTag(formConfigs.get(i).FieldName.toUpperCase());
                        if (view instanceof TextInputEditText) {
                            TextView textView = (TextView) view;
                            textView.setText("");

                        }
                        try {
                            formValues.put(formConfigs.get(i).FieldName.toUpperCase(), "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_EXECUTE)) {

            executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_EXECUTE_LIST)) {

            executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_EXECUTE_JAVASCRIPT)) {

            if (webViewJavaScript == null) {
                webViewJavaScript = findViewById(R.id.webView);
            }

            webViewJavaScript.addJavascriptInterface(new WebAppInterface(MainActivity.this, formValues, selectedListValues, paramFormValues,
                    paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, da_dynamics), "app");

            webViewJavaScript.getSettings().setJavaScriptEnabled(true);
            webViewJavaScript.loadUrl("file:///android_asset/rad-bk.html");
//            webViewJavaScript.loadUrl("file:///android_asset/rad-bk24122024(2).html");

            if (actionConfig.ActionValue != null && !actionConfig.ActionValue.isEmpty()) {
                jsFieldname = actionConfig.ActionValue;
            } else {
                jsFieldname = actionConfig.FieldName;
            }


            int start = actionConfig.ActionPlan.indexOf("{");
            int end;
            String key;
            int trial = 0;
            String actionvalue = null;
            //  while (start > -1 && trial < 100) {
            end = actionConfig.ActionPlan.indexOf("}");
            key = actionConfig.ActionPlan.substring(start + 1, end);

            String rtn = "";
            String split[] = actionConfig.ActionPlan.split("\\(", 2);
            String valueSplit[] = split[1].split(",");
            ArrayList<String> listView = new ArrayList<>();
            System.out.println("valueSplit:" + valueSplit.toString());
            fileHelper.fileWriter("valueSplit : " + valueSplit.toString(), writer);
            for (String item : valueSplit) {
                System.out.println("valueSplit:" + item);
                String value = item.substring(1, item.length() - 1);
                listView.add(value);
            }


            if (formValues != null) {
                Log.i("Execute Java Script", split[0]);
                System.out.println("Java Scrip:" + formValues);
                System.out.println("Java Scrip:" + selectedListValues);
                String finalvalue = "";
                String value = "";
                for (int b = 0; b < listView.size(); b++) {
                    String[] temp = listView.get(b).split("[.]");
                    if (temp.length > 1) {
                        System.out.println("Javascript:" + temp[0] + " " + temp[1]);
                        if (temp[0].equalsIgnoreCase("FormView")) {
                            System.out.println("Javascript:" + temp[1]);
                            String value2 = temp[1].toUpperCase();
                            if (temp[1].toUpperCase().contains("}")) {
                                value2 = temp[1].toUpperCase().replace("}", "");
                            }
                            value = addSingleQuote(formValues.get(value2));
                            System.out.println("Java Script formValues :" + formValues.get(value2));

                        } else if (temp[0].equalsIgnoreCase("ListView")) {
                            String value2 = temp[1].toUpperCase();
                            if (temp[1].toUpperCase().contains("}")) {
                                value2 = temp[1].toUpperCase().replace("}", "");
                            }
                            value = addSingleQuote(selectedListValues.get(value2));
                            System.out.println("Java Script value2 :" + value2);
                            System.out.println("Java Script selectedListValues :" + selectedListValues);
                        } else if (temp[0].equalsIgnoreCase("System")) {

                            ArrayList<BE_SystemList> systemLists2 = new ArrayList<>();
                            DA_System da_system2 = new DA_System(this);
                            systemLists2 = da_system2.getSystems();

                            for (int i = 0; i < systemLists2.size(); i++) {
                                if (systemLists2.get(i).Code.equalsIgnoreCase(temp[1].toString())) {
                                    value = addSingleQuote(systemLists2.get(i).SystemValue);
                                }
                            }

                        } else if (temp[0].equalsIgnoreCase("SystemList")) {
                            String values = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = '" + temp[1] + "'");
                            value = addSingleQuote(values);
                        }
                        if (finalvalue.isEmpty()) {
                            finalvalue = value;
                        } else {
                            finalvalue = finalvalue + "," + value;
                        }
                    }
                }

                fileHelper.fileWriter("Execute JavaScript: " + split[0] + "(" + finalvalue + ")", writer);
                Log.i("Execute Java Script", split[0] + "(" + finalvalue + ")");
                webViewJavaScript.loadUrl("javascript:window.app.setResult(" + split[0] + "(" + finalvalue + "))");
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATEDOCNO)) {

            ut_common.updateDocNo();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CLEARSIGN)) {

            doClearSignature(actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ALERT)) {

            actionPerformed = true;
            showAlert(FieldName, actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_VALIDATE)) {

            validateCondition(FieldName, actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_REMOVEBACKSTACK)) {
            String[] screenList = actionConfig.ActionPlan.split(",");
            for (String name : screenList) {
                removeStack(name);
            }
            bCancel = true;

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_BACK)) {

            if (mScreenName.equalsIgnoreCase("FORM-LOGOFF")) {
                for (String name : hasStack(mScreenName)) {
                    removeStack(name);
                }
            }

            if (mScreenName.contains("Form-LOGIN") || actionConfig.ActionValue.equalsIgnoreCase("AppClose")) {
                finishAffinity();
            } else if (actionConfig.ActionPlan != null && !actionConfig.ActionPlan.isEmpty()) {
                ArrayList<String> screenList = new ArrayList<>();
                for (BE_QueryConfig query : actionConfigQueries) {
                    if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                        String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        screenList = da_dynamics_syscon.showFormFielfdexecuteQuery(completeQuery);
                    }
                }

                fileHelper.fileWriter("Screen NameList : " + screenList, writer);
                String nameList = "";
                for (int i = 0; i < screenList.size(); i++) {
                    if (nameList.isEmpty()) {
                        nameList = screenList.get(i);
                    } else {
                        nameList = nameList + " , " + screenList.get(i);
                    }
                }

                ut_sp.setStringValue(SP_BACK_SCREENNAME, nameList);

                for (String name : screenList) {
                    removeStack(name);
                }

                finish();

            } else {
                finish();
                overridePendingTransition(0, 0);
            }


            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CANCEL)) {

            bCancel = true;
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_QRCODE)) {
            Toast.makeText(this, "qr_code", Toast.LENGTH_SHORT).show();
            callQRCode(actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_REFRESHSYSTEM)) {

            ut_sp.readSystemConfig(true);
            fileHelper.fileWriter("REFRESHSYSTEM Called", writer);

            readMessageConfig();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_READONLYENABLE)) {

            ReadOnlyEnableDisble(actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_READONLYDISABLE)) {

            ReadOnlyEnableDisble(actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_STARTCAPTUREGPS)) {
            LocationManager lm = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
            boolean gps_enabled = false;
            try {
                gps_enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);
            } catch (Exception ex) {
            }
            String gpsIntervalCode = "GPS   Interval";

            DA_SystemList da_systemList = new DA_SystemList(this);

            BE_SystemList systemList = da_systemList.getSystemList(gpsIntervalCode);

            if (!systemList.SystemValue.equals("0") && !systemList.SystemValue.equals("null")) {

                if (boolean_permission) {
                    Intent intent = new Intent(getApplicationContext(), GpsLocationService.class);
                    startService(intent);

                } else {

                    Toast.makeText(getApplicationContext(), "Please enable the gps", Toast.LENGTH_SHORT).show();

                }
                fn_permission();

            }
            Log.v("Res GPs", AT_STARTCAPTUREGPS);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ENDCAPTUREGPS)) {
            Log.v("Res GPs", AT_ENDCAPTUREGPS);
            Intent intent = new Intent(this, GpsLocationService.class);
            stopService(intent);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SETTIMER)) {

            /*timer = new Timer();
            int settime = Integer.parseInt(actionConfig.ActionValue) * 6000;

            timer.scheduleAtFixedRate(new TimerTask() {
                @Override
                public void run() {

                    executeActionConfig(actionConfig.ActionPlan, AN_SETTIMERCALLED, "");

                }
            }, Long.parseLong(actionConfig.ActionValue), settime);
*/
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_BULKINSERT)) {

            String[] List = new String[0];

            if (actionConfig.ActionPlan != null) {

                List = actionConfig.ActionPlan.split(",");

            }

            for (String queryname : List) {

                executeQuery(queryname, FieldName, actionConfig);

            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_GOTOLOGIN)) {
            //     finish();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_AUTOLOGOUT)) {

            finish();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CLEARTIMER)) {

            if (timer != null) {
                timer.cancel();
                timer = null;
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_OPENCAMERA)) {

            String[] opencameraSplit = actionConfig.ActionValue.split("[.]");

            String cameraIndex = opencameraSplit[1];

            System.out.println("cameraIndex : " + cameraIndex);
            System.out.println("cameraIndex opencameraSplit : " + opencameraSplit[0]);

            if (opencameraSplit[0].equals("FormView")) {
                for (BE_FormConfig formConfig : formConfigs) {
                    if (formConfig.FieldName.equalsIgnoreCase(cameraIndex)) {

                        if (formConfig.FieldControl.equalsIgnoreCase(FC_TAKEPHOTO) || formConfig.FieldControl.equalsIgnoreCase(FC_IMAGE)) {

                            HashMap<String, String> rtn = new HashMap<>();
                            String screenSignature = mScreenName + "_" + formConfig.FieldName + "_SAVEPHOTO";
                            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                            String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                            System.out.println("NameQuery : " + query);
                            fileHelper.fileWriter("getFormConfigValues Query : " + query, writer);
                            rtn = da_dynamics.getFormConfigValues(query);
                            if (!rtn.isEmpty()) {
                                formCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                                formValues.put(formConfig.FieldName.toUpperCase(), formCameraFilename);
                            }

                            photosavepath = formConfig.DataMemberType;
                            if (!screen.contains("View Document")) {
                                startCamera(cameraIndex, formCameraFilename);
                            }
                        }

                    }
                }
            } else if (opencameraSplit[0].equals("Menu")) {

                HashMap<String, String> rtn = new HashMap<>();
                String screenSignature = mScreenName + "_" + actionConfig.FieldName + "_SAVEPHOTO";
                BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                System.out.println("NameQuery : " + query);
                fileHelper.fileWriter("getFormConfigValues Query : " + query, writer);
                rtn = da_dynamics.getFormConfigValues(query);
                if (!rtn.isEmpty()) {
                    formCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                    formValues.put(actionConfig.FieldName.toUpperCase(), formCameraFilename);
                }
                startMenuCamera(cameraIndex, formCameraFilename);
            } else {
                startListviewCamera(cameraIndex, listCameraFilename);
            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_FOCUS)) {

            Focus = true;

            EditText editText = (EditText) EditTextView;

            editText.setCursorVisible(true);

            editText.setFocusable(true);

            editText.requestFocus();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHECKLOCATION)) {

            CheckLocation checkLocation = new CheckLocation();
            checkLocation.checkLocation(MainActivity.this, actionConfig, ut_sp, formValues);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATEFOOTER)) {

            HashMap<String, String> rtn = new HashMap<String, String>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + completeQuery, writer);

                    rtn = da_dynamics.LastDocNoexecuteQuery(completeQuery);

                }
            }

            System.out.println("UPDATEFOOTER :321 " + rtn);
            fileHelper.fileWriter("UPDATEFOOTER 33: " + rtn, writer);

            updateFormValues(rtn, formContent, FieldName, listBottomvalue);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SHOWINDICATOR)) {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    try {
                        if (progressdialog != null) {
                            progressdialog.cancel();
                            progressdialog.dismiss();
                            progressdialog = null;
                        }

                        progressdialog = new Dialog(MainActivity.this);
                        progressdialog.setContentView(R.layout.loading_dialog);
                        progressdialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                        progressdialog.setCancelable(false);
                        progressdialog.setCanceledOnTouchOutside(false);
                        progressdialog.getWindow().getAttributes().windowAnimations = R.style.animation;
                        progressdialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);

                        loadingProgress = progressdialog.findViewById(R.id.loadingProgress);
                        percentage = progressdialog.findViewById(R.id.percentage);

                        progressdialog.show();
                        indicatorShow = true;

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
            });
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_HIDEINDICATOR)) {

            try {
                if (progressdialog != null) {
                    progressdialog.dismiss();
                }

                indicatorShow = false;
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SHOWPROGRESS)) {
            String message = "";
            if (!messageConfigs.isEmpty()) {
                for (BE_MessageConfig msg : messageConfigs) {
                    if (msg.MessageCode.toUpperCase().equals(actionConfig.ActionPlan.toUpperCase())) {
                        message = msg.MessageText;
                        break;
                    }
                }
            }

            if (message.equals("")) {
                message = actionConfig.ActionPlan;
            }

            if (message.contains(SQL_FORMVIEW)) {
                int firstBracket = message.indexOf('{');
                String contentOfBrackets = message.substring(firstBracket + 1, message.indexOf('}', firstBracket));
                String[] temp = contentOfBrackets.split("[.]");
                if (formValues.get(temp[1].toUpperCase()) != null) {
                    String value = formValues.get(temp[1].toUpperCase());
                    message = message.replace("{" + contentOfBrackets + "}", value);

                }
            }

            if (actionConfig.ActionPlan.contains("{")) {
                int start = actionConfig.ActionPlan.indexOf("{");
                int end;
                String key;
                int trial = 0;
                String actionvalue = null;
                System.out.println(" trial "+trial);
                while (start > -1 && trial < 100) {
                    end = actionConfig.ActionPlan.indexOf("}");
                    key = actionConfig.ActionPlan.substring(start + 1, end);
                    actionConfig.ActionPlan = actionConfig.ActionPlan.replace("{" + key + "}", addSingleQuote(ut_sp.getStringValue(key)));
                    start = actionConfig.ActionPlan.indexOf("{");
                    System.out.println(" trial "+trial);
                    trial++;
                }

                message = actionConfig.ActionPlan;

            } else if (actionConfig.ActionPlan.contains("Result") && actionConfig.ActionPlan.contains("'")) {
                message = actionConfig.ActionPlan;

                String[] split = message.split("'");
                message = split[0] + "'" + ut_sp.getStringValue(SQL_JAVASCRIPTRESULT) + "'";

            }

            if (actionConfig.ActionPlan.toUpperCase().startsWith("SELECT_")) {

                HashMap<String, String> rtn = new HashMap<>();
                for (BE_QueryConfig query : actionConfigQueries) {
                    if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                        String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        if (query.DBName != null) {
                            if (query.DBName.equalsIgnoreCase(SYSCONDB)) {
                                //     rtn = da_dynamics_syscon.LastDocNoexecuteQuery(completeQuery);
                            } else {
                                fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + completeQuery, writer);
                                rtn = da_dynamics.LastDocNoexecuteQuery(completeQuery);
                            }
                        }
                    }
                }
                if (!rtn.isEmpty()) {
                    message = rtn.get("Resultmessage".toUpperCase()).toString();
                }


            }


            ut_dialog.showProgressDialog(MainActivity.this, message);
            progressShow = true;

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_HIDEPROGRESS)) {

            try {
                ut_dialog.dialogProgress.dismiss();
            } catch (Exception e) {
                e.printStackTrace();
            }

            executeActionConfig("", actionConfig.ActionValue, "");

            progressShow = false;

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DOWNLOADTRANSCONFIG)) {

            if (!NetworkUtil.isOnline(MainActivity.this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");

                if (progressdialog != null) {
                    progressdialog.dismiss();
                }

            } else {

                String status = da_dynamics.getOfflineStatus();

                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_returnGetServiceEnd, "");
                } else {
                    transFieldname = actionConfig.FieldName;
                    String screenName = mScreenName;
                    if (!actionConfig.ActionValue.isEmpty()) {
                        screenName = actionConfig.ActionValue;
                    }

                    downloadTransconfig = new DownloadTransConfig(MainActivity.this, screenName);
                    downloadTransconfig.delegate = (UT_AsyncResponse) this;
                    downloadTransconfig.execute("");
                }

            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DOWNLOADTRANSCONFIGAUTO)) {

            if (!NetworkUtil.isOnline(MainActivity.this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");

                if (progressdialog != null) {
                    progressdialog.dismiss();
                }

            } else {
                System.out.println("TRans2");

                String status = da_dynamics.getOfflineStatus();

                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_returnGetServiceEnd, "");
                } else {
                    transFieldname = actionConfig.FieldName;
                    String screenName = mScreenName;
                    if (!actionConfig.ActionValue.isEmpty()) {
                        screenName = actionConfig.ActionValue;
                    }

                    t2 = new Timer();
                    String finalScreenName = screenName;
                    t2.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            DownloadTransConfigAuto downloadTransconfig = new DownloadTransConfigAuto(MainActivity.this, finalScreenName);
                            downloadTransconfig.delegate = (UT_AsyncResponse) MainActivity.this;
                            downloadTransconfig.execute("");
                        }
                    }, 0, 5000);

                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DATASYNCBACKGROUND)) {

            if (!NetworkUtil.isOnline(this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");
                progressdialog.dismiss();
            } else {

                String status = da_dynamics.getOfflineStatus();

                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_DataSyncSuccess, "");

                } else {
                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
                    DA_WebserviceConfig webserviceConfig = new DA_WebserviceConfig(this);
                    stringArrayList = webserviceConfig.getWebservicename(queryConfig.QueryText);

//                    IntentFilter intentFilter = new IntentFilter("REFRESH_DATA");
//                    registerReceiver(broadcastReceiver, intentFilter);


                    Intent intent = new Intent("REFRESH_DATA");
                    intent.putExtra("FieldName", actionConfig.FieldName);
                    intent.putExtra("POSTURL", POSTURL);
                    sendBroadcast(intent);

                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPLOADPHOTO)) {
            if (!NetworkUtil.isOnline(this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");
                try {
                    if (progressdialog != null) {
                        progressdialog.dismiss();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                NetworkUtil.showNoConnectionDialog(this);

            } else {
                String ACTIONVALUE_DATASYNC = ut_sp.getStringValue(UT_Constants.ACTIONVALUE_DATASYNC);

                UploadPhotoToserver uploadPhotoToserver = new UploadPhotoToserver(MainActivity.this);
                uploadPhotoToserver.uploadPhotoAsync("UploadPhoto", ut_sp, fileHelper, ACTIONVALUE_DATASYNC, writer, actionConfig);

            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DATASYNC)) {
//            Disposable d = Single.timer((long) 500, TimeUnit.MILLISECONDS)
//                    .subscribeOn(Schedulers.io())
//                    .observeOn(AndroidSchedulers.mainThread())
//                    .subscribe(ignored -> {
            System.out.println("DataSync Called");
            if (!NetworkUtil.isOnline(this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");
                try {
                    if (progressdialog != null) {
                        progressdialog.dismiss();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                NetworkUtil.showNoConnectionDialog(this);

            } else {

                String status = da_dynamics.getOfflineStatus();

                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_DataSyncSuccess, "");
                } else {
                    if (!actionConfig.ActionPlan.isEmpty()) {

                        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
                        String Query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        HashMap<String, String> MDT = new HashMap<>();
                        fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + Query, writer);

                        MDT = da_dynamics.LastDocNoexecuteQuery(Query);

                        ut_sp.setStringValue(UT_Constants.SQL_MDTNO, MDT.get(SQL_MDTNO));

                        System.out.println("MDT :: " + MDT.get(SQL_MDTNO));
                        System.out.println("MDT :: " + ut_sp.getStringValue(UT_Constants.SQL_MDTNO));
                    }

                    ut_sp.setStringValue(ACTIONVALUE_DATASYNC, actionConfig.ActionValue);

                    DatasyncAsync dataSync = new DatasyncAsync(MainActivity.this, actionConfig.FieldName, POSTURL, da_queryConfig, ut_common, formValues, fileHelper);
                    dataSync.doSyncProcess();


                }

            }
//                    });
//            disposables.add(d);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SYNC_DATA)) {
            System.out.println("DataSync Called");
            if (!NetworkUtil.isOnline(this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");
                try {
                    if (progressdialog != null) {
                        progressdialog.dismiss();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                NetworkUtil.showNoConnectionDialog(this);

            } else {

                String status = da_dynamics.getOfflineStatus();

                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_DataSyncSuccess, "");
                } else {
                    if (!actionConfig.ActionPlan.isEmpty()) {

                        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
                        String Query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        HashMap<String, String> MDT = new HashMap<>();
                        fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + Query, writer);

                        MDT = da_dynamics.LastDocNoexecuteQuery(Query);

                        ut_sp.setStringValue(UT_Constants.SQL_MDTNO, MDT.get(SQL_MDTNO));

                        System.out.println("MDT :: " + MDT.get(SQL_MDTNO));
                        System.out.println("MDT :: " + ut_sp.getStringValue(UT_Constants.SQL_MDTNO));
                    }

                    ut_sp.setStringValue(ACTIONVALUE_DATASYNC, actionConfig.ActionValue);

                    DatasyncAsyncCustom dataSync = new DatasyncAsyncCustom(MainActivity.this, actionConfig.FieldName, POSTURL, da_queryConfig, ut_common, formValues, fileHelper, actionConfig.ActionPlan, selectedListValues);
                    dataSync.doSyncProcess();
                }

            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SENDDATA)) {

            if (!NetworkUtil.isOnline(this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");
                // executeActionConfig(actionConfig.FieldName, AN_SendDataFailed, "");
                NetworkUtil.showNoConnectionDialog(this);
            } else {

                String status = da_dynamics.getOfflineStatus();

                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_SendDataSuccess, "");
                } else {
                    SendData sendData = new SendData();
                    sendData.SendDataObj(MainActivity.this, actionConfig.FieldName);
                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SETALLCONFIG)) {

            setAllConfigs();

            Toast.makeText(getApplicationContext(), "Set All config", Toast.LENGTH_SHORT).show();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_NEXTBUTTONDISABLE)) {
            NextmenuDisable = false;
            //     nextButton.setVisibility(View.GONE);
            invalidateOptionsMenu();
            svbtn.setVisibility(View.GONE);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_BACKBUTTONDISABLE)) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(false);
            getSupportActionBar().setHomeButtonEnabled(false);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_NEXTBUTTONENABLE)) {

            if (actionConfig.ActionValue.isEmpty()) {
                NextmenuDisable = true;
                invalidateOptionsMenu();
                svbtn.setVisibility(View.GONE);
            } else {
                buttonroot = "NEXT";
                svbtn.setVisibility(View.VISIBLE);
                svbtn.setText(actionConfig.ActionValue);
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_POPUPWINDOW)) {

            ut_dialog.ShowPopupWindow(MainActivity.this,
                    actionConfig, ut_sp, formValues, selectedListValues, paramFormValues, paramSelectedListValues, fileHelper, actionConfigs);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_POPUPWINDOWINFO)) {

            ut_dialog.ShowPopupWindowInfo(MainActivity.this,
                    actionConfig, ut_sp, formValues, selectedListValues, paramFormValues, paramSelectedListValues, fileHelper, actionConfigs);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_HIDEPOPUPWINDOW)) {
            ut_dialog.popupWindow.dismiss();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_POPUP)) {
            String title = actionConfig.ActionPlan;
            if (actionConfig.ActionPlan.toUpperCase().startsWith("SELECT")) {
                String screenSignature = actionConfig.ActionPlan;
                BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                title = da_dynamics.NoexecuteQuery(query);
            }

            System.out.println("FormValues : " + formValues);
            ut_dialog.ShowAlertview(MainActivity.this, actionConfig, formValues, title);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DROPDOWN)) {
            executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);
            String temp[] = actionConfig.ActionValue.split(".");

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_FINDADDRESS)) {

            LocationManager manager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
            boolean statusOfGPS = manager.isProviderEnabled(LocationManager.GPS_PROVIDER);

            String locationBlock = da_dynamics.getDeviceSystemValue("select SystemValue from SystemList WHERE code='LocationBlock'");
            String locationStatus = da_dynamics.getLocationOfflineStatus();

//            if (!NetworkUtil.isOnline(this)) {
//                formValues.put(SQL_LATITUDEFINDER, "0.0");
//                formValues.put(SQL_LONGITUDEFINDER, "0.0");
//                executeActionConfig(actionConfig.FieldName, AN_LocationOff, "");
//                executeActionConfig(actionConfig.FieldName, AN_FINDADDRESSEND, "");
//            } else {

            System.out.println("statusOfGPS : " + statusOfGPS);
            System.out.println("locationStatus : " + locationStatus);
            if (!statusOfGPS) {

                boolean denied = isLocationPermissionGranted();
                boolean permanetlydenied = isLocationPermissionGranted2();

                System.out.println("denied : " + denied);
                System.out.println("twoo : " + permanetlydenied);

                if (denied) {
                    //FindAddressGpsOff
                    formValues.put(SQL_LATITUDEFINDER, "0.0");
                    formValues.put(SQL_LONGITUDEFINDER, "0.0");
                    executeActionConfig(actionConfig.FieldName, AN_FindAddressGpsOff, "");
                } else if (permanetlydenied) {
                    //FindAddressDeniedForever
                    formValues.put(SQL_LATITUDEFINDER, "0.0");
                    formValues.put(SQL_LONGITUDEFINDER, "0.0");
                    executeActionConfig(actionConfig.FieldName, AN_FindAddressDeniedForever, "");
                } else {
                    //FindAddressDenied
                    formValues.put(SQL_LATITUDEFINDER, "0.0");
                    formValues.put(SQL_LONGITUDEFINDER, "0.0");
                    executeActionConfig(actionConfig.FieldName, AN_FindAddressDenied, "");
                }

                if (locationStatus != null) {
                    if (locationStatus.equals("1")) {
                        openlocationAlertDialog();
                    }
                }

//                    if (locationStatus != null) {
//                        if (locationStatus.equals("1")) {
//                            openlocationAlertDialog();
//                        } else {
//                            formValues.put(SQL_LATITUDEFINDER, "0.0");
//                            formValues.put(SQL_LONGITUDEFINDER, "0.0");
//                            executeActionConfig(actionConfig.FieldName, AN_LocationOff, "");
//                            executeActionConfig(actionConfig.FieldName, AN_FINDADDRESSEND, "");
//                        }
//                    } else {
//                        formValues.put(SQL_LATITUDEFINDER, "0.0");
//                        formValues.put(SQL_LONGITUDEFINDER, "0.0");
//                        executeActionConfig(actionConfig.FieldName, AN_LocationOff, "");
//                        executeActionConfig(actionConfig.FieldName, AN_FINDADDRESSEND, "");
//                    }
            } else {
                locationFinder = new FindAddress(MainActivity.this, actionConfig, formValues, fileHelper, writer);
                locationFinder.Search();
            }

//            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SENDMESSAGE)) {

            executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_MESSAGEBUTTONENABLE)) {

            MessagemenuEnable = true;
            invalidateOptionsMenu();
            svbtn.setVisibility(View.GONE);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SAVEBUTTONENABLE)) {

            if (actionConfig.ActionValue.isEmpty()) {
                NextmenuDisable = false;
                saveEnable = true;
                invalidateOptionsMenu();
                svbtn.setVisibility(View.GONE);
            } else {
                buttonroot = "SAVE";
                svbtn.setVisibility(View.VISIBLE);
                svbtn.setText(actionConfig.ActionValue);
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SAVEBUTTONDISABLE)) {
            saveEnable = false;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_MESSAGEBUTTONDISABLE)) {

            MessagemenuEnable = false;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_VALIDATEFORMFIELDS)) {
            int mfieldscnt = 0;
            String mfieldname = "";
            String mNewText = "";
            boolean bCheckIsMandatory = true;

            String language = da_dynamics.getSystemLanguage();

            String query = "SELECT Fieldname,NewText,FieldControl FROM FormConfig WHERE Screenname ='" + mScreenName + "' and IsMandatory = 1 and Language='" + language + "' order by DisplayNo"; //and ishidden=0 and valuewidth <> 0

            System.out.println("query : " + query);

            ArrayList<BE_FormConfig> rtn = new ArrayList<>();
            rtn = da_dynamics_syscon.getValidateFormfields(query);

            System.out.println("rtn : " + rtn);
            System.out.println("formValues : " + formValues);

            String fieldNameMultiCombobox = "";


            for (int i = 0; i < rtn.size(); i++) {

                if (rtn.get(i).FieldControl.equals(FC_MULTICOMBOBOX)) {
                    fieldNameMultiCombobox = rtn.get(i).FieldName;
                }

                if (formValues.get("sign".toUpperCase()) != null) {
//
                    if (!signDone) {
                        bCheckIsMandatory = false;
                        mfieldname += "," + rtn.get(i).FieldName.replaceFirst(",", "");
                        mNewText += "," + rtn.get(i).NewText.replaceFirst(",", "");
                        mfieldscnt = mfieldscnt + 1;
                    }
                }

                if (!rtn.get(i).FieldName.equalsIgnoreCase("Blank")) {
                    if (fieldNameMultiCombobox.isEmpty()) {
                        if (formValues.get(rtn.get(i).FieldName.toUpperCase()) == null
                                || formValues.get(rtn.get(i).FieldName.toUpperCase()).isEmpty()) {
                            bCheckIsMandatory = false;
                            mfieldname += "," + rtn.get(i).FieldName.replaceFirst(",", "");
                            mNewText += "," + rtn.get(i).NewText.replaceFirst(",", "");
                            mfieldscnt = mfieldscnt + 1;
                        }
                    } else {

                        String vall = formValues.get("MULTICOMBOBOX." + rtn.get(i).FieldName.toUpperCase());
                        System.out.println("vall : " + vall);

                        if (formValues.get("MULTICOMBOBOX." + rtn.get(i).FieldName.toUpperCase()) == null
                                || formValues.get("MULTICOMBOBOX." + rtn.get(i).FieldName.toUpperCase()).isEmpty()) {
                            bCheckIsMandatory = false;
                            mfieldname += "," + rtn.get(i).FieldName.replaceFirst(",", "");
                            mNewText += "," + rtn.get(i).NewText.replaceFirst(",", "");
                            mfieldscnt = mfieldscnt + 1;
                            fieldNameMultiCombobox = "";
                        }
                    }
                }
            }
            mfieldname = mfieldname.replaceFirst(",", "");
            mNewText = mNewText.replaceFirst(",", "");

            if (bCheckIsMandatory) {

                executeActionConfig(FieldName, actionConfig.ActionValue, "");

            } else if (!bCheckIsMandatory) {

                String languages = ut_sp.getStringValue(SP_LANGUAGE);
                String langtext = "are mandatory";

                DA_MessageConfig da_messageConfig = new DA_MessageConfig(this);
                String messageText = da_messageConfig.getMessageConfigs(screen, languages, langtext);


                if (mfieldscnt > 1) {

                    String title = "";
                    if (ut_sp.getStringValue(UT_Constants.XML_SOLUTION_NAME).equals("WMS")) {
                        title = "Simplr Solutions";
                    } else {
                        title = "Simplr Sales";
                    }


                    showAlertOneButton(title, mNewText + " " + messageText, "OK", actionConfig.ActionPlan);

                } else {
                    String title = "";
                    if (ut_sp.getStringValue(UT_Constants.XML_SOLUTION_NAME).equals("WMS")) {
                        title = "Simplr Solutions";
                    } else {
                        title = "Simplr Sales";
                    }

                    showAlertOneButton(title, mNewText + " " + messageText, "OK", actionConfig.ActionPlan);

                }

                if (!actionConfig.ActionFailedValue.equals("")) {
                    executeActionConfig(FieldName, actionConfig.ActionFailedValue, "");
                    bCheckIsMandatory = true;
                }


            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_LOCATIONVALIDATE)) {

            LocationFinder locationFinder = new LocationFinder();
            locationFinder.ValidatelatandLon(MainActivity.this, actionConfig, da_queryConfig, ut_common, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, da_dynamics);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATEGRIDVIEW)) {

            String[] TempActionvalue = actionConfig.ActionPlan.split(",");

            if (TempActionvalue[0].equalsIgnoreCase("Folder") || TempActionvalue[1].equalsIgnoreCase("FolderBack")) {

                String Code = "sDashboardPageName";

                if (TempActionvalue[0].equalsIgnoreCase("Folder")) {
                    fileHelper.fileWriter("executeQuery Query : " + "DELETE From SystemList WHERE lower(Code) = lower(" + Code + ")", writer);

                    da_dynamics.executeQuery("DELETE From SystemList WHERE lower(Code) = lower(" + Code + ")");

                    fileHelper.fileWriter("executeQuery Query : " + "INSERT INTO SystemList (Code, SystemValue, SystemDataType) VALUES (" + Code + ", " + TempActionvalue[2] + ", '')", writer);
                    da_dynamics.executeQuery("INSERT INTO SystemList (Code, SystemValue, SystemDataType) VALUES (" + Code + ", " + TempActionvalue[2] + ", '')");

                } else if (TempActionvalue[1].equalsIgnoreCase("FolderBack")) {

                    DA_SystemList da_systemList = new DA_SystemList(this);
                    BE_SystemList systemList = da_systemList.getSystemList(Code);

                    if (systemList.Code.equalsIgnoreCase("sDashboardPageName")) {
                        String value = systemList.SystemValue.toString();
                        String[] Tempvalue = value.split("-");
                        fileHelper.fileWriter("executeQuery Query : " + "DELETE From SystemList WHERE lower(Code) = lower(" + Code + ")", writer);

                        da_dynamics.executeQuery("DELETE From SystemList WHERE lower(Code) = lower(" + Code + ")");
                        fileHelper.fileWriter("executeQuery Query : " + "INSERT INTO SystemList (Code, SystemValue, SystemDataType) VALUES (" + Code + ", " + Tempvalue[0] + ", '')", writer);

                        da_dynamics.executeQuery("INSERT INTO SystemList (Code, SystemValue, SystemDataType) VALUES (" + Code + ", " + Tempvalue[0] + ", '')");
                    }

                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHANGEPAGECONTENT)) {

            String tempActionvalue = actionConfig.ActionValue;

            WS_StartUp ws_startUp = new WS_StartUp(MainActivity.this);
            ws_startUp.getDimensions();
            System.out.println("tempActionvalue : " + tempActionvalue);

            initActivity(formContent, tempActionvalue);
            initUI(formContent, tempActionvalue);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_LASTDOCNO)) {

            executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_INTENTVIEW)) {
            Intent myIntent = new Intent(Intent.ACTION_VIEW);
            File tempUri = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/Images/Items/" + actionConfig.ActionValue);
            myIntent.setData(Uri.fromFile(tempUri));
            Intent j = Intent.createChooser(myIntent, "Choose an application to open with:");
            startActivity(j);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SYNCBUTTONENABLE)) {
            SyncmenuEnable = true;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SYNCBUTTONDISABLE)) {
            SyncmenuEnable = false;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ENABLEPRINTICON)) {
            PrintmenuEnable = true;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ENABLEACTIVATED)) {
            actiavtedEnable = true;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_REFRESHBUTTONENABLE)) {
            refreshEnable = true;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_REFRESHBUTTONDISABLE)) {
            refreshEnable = false;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SHAREBUTTONENABLE)) {
            shareEnable = true;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SHAREBUTTONDISABLE)) {
            shareEnable = false;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHECKNETWORK)) {
            actionPerformed = true;
            if (!NetworkUtil.isOnline(this)) {
                NetworkUtil.showNoConnectionDialog(this);
            } else {
                DA_MessageConfig da_messageConfig = new DA_MessageConfig(this);
                String messageText = da_messageConfig.getMessageConfigs(screen, language, "Connection successful");
                ut_dialog.InternetAlert(messageText, this);
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHECKCONNECTION)) {
            actionPerformed = true;
            if (!NetworkUtil.isOnline(this)) {
                executeActionConfig(actionConfig.FieldName, AN_ConnectionFailed, "");
            } else {
                executeActionConfig(actionConfig.FieldName, AN_ConnectionSuccess, "");
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_BLUETOOTH)) {

            bluetoothLoad = true;
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_LOGINCOUNT)) {
            LoginCount loginCount = new LoginCount();
            loginCount.LoginCount(UPDATELOGINCOUNT, formValues, ut_sp, da_dynamics);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SYNC)) {

            if (!NetworkUtil.isOnline(MainActivity.this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailed, "");
            } else {
                String status = da_dynamics.getOfflineStatus();
                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_SyncFailed, "");

                } else {
                    Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe(ignored -> {

                                AdminSync adminSync = new AdminSync(MainActivity.this, da_dynamics, actionConfig, da_queryConfig, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, fileHelper);
                                adminSync.syncProcess();

                            });
                    disposables.add(d);
                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_COPYFILE)) {
            executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DELETEFILE)) {
            executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_GET)) {

            if (!NetworkUtil.isOnline(MainActivity.this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailed, "");
            } else {
                String status = da_dynamics.getOfflineStatus();
                if (status != null && !status.isEmpty() && status.equals("1")) {

                } else {
                    Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe(ignored -> {
                                HttpGet httpGet = new HttpGet();
                                httpGet.GETFunction(MainActivity.this, ut_sp, actionConfig, da_queryConfig, ut_common, da_dynamics, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system);
                            });
                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_POST)) {
            if (!NetworkUtil.isOnline(MainActivity.this)) {

                NetworkUtil.showNoConnectionDialog(MainActivity.this);

            } else {
                String status = da_dynamics.getOfflineStatus();
                if (status != null && !status.isEmpty() && status.equals("1")) {

                } else {
                    executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);

                    //Header
                    BE_QueryConfig queryConfig_Header = da_queryConfig.getQueryConfig(actionConfig.ActionPlan + "_HEADER");
                    String Headerquery = ut_common.getQuery(queryConfig_Header, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    HashMap<String, String> HeaderValue = new HashMap<>();
                    fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + Headerquery, writer);
                    HeaderValue = da_dynamics.LastDocNoexecuteQuery(Headerquery);

                    // Params
                    BE_QueryConfig queryConfig_params = da_queryConfig.getQueryConfig(actionConfig.ActionPlan + "_PARAMS");
                    String Paramquery = ut_common.getQuery(queryConfig_params, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    HashMap<String, String> ParamValue = new HashMap<>();
                    fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + Paramquery, writer);

                    ParamValue = da_dynamics.LastDocNoexecuteQuery(Paramquery);


                    HttpFunction httpFunction = new HttpFunction();
                    String Response = httpFunction.POST(AT_POSTURL, HeaderValue, ParamValue);
                    Log.v("Res response", Response);
                }
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ADDFORMLISTVIEWROW)) {

            if (formListScreenName.endsWith("_REFRESHFORMLIST")) {
                formListScreenName = formListScreenName.replace("_REFRESHFORMLIST", "");
            }

            String[] split = actionConfig.ActionValue.split("FormView.ListView.");
            for (int i = 0; i < formConfigs.size(); i++) {
                if (formConfigs.get(i).FieldName.equalsIgnoreCase(split[1].toUpperCase())) {
                    queryListConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan + "_USER_ADDROW");
                    String query = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("ADD ROW QUERY : " + query, writer);
                    listConfigs = da_listConfig.getListConfigs(screen, language, screenWidth);
                    fileHelper.fileWriter("ListConfig Query : " + query, writer);
                    ArrayList<HashMap<String, String>> formListValues = da_dynamics.getListConfigValues(screen, listConfigs, query, 0, 0, MdtlistLimit);  //load all values
                    fileHelper.fileWriter("ADD ROW QUERY VALUES : " + formListValues, writer);
                    Listconfigcustom listConfigCustom = new Listconfigcustom(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                    listConfigCustom.initConfiguration(query, null, listConfigs, formListValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer, "", "");

                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ADDMAINLISTVIEWROW)) {

            if (formListScreenName.endsWith("_REFRESHFORMLIST")) {
                formListScreenName = formListScreenName.replace("_REFRESHFORMLIST", "");
            }

            queryListConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
            String query = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            fileHelper.fileWriter("ADD ROW QUERY : " + query, writer);
            listConfigs = da_listConfig.getListConfigs(formListScreenName, language, screenWidth);
            fileHelper.fileWriter("ListConfig Query : " + query, writer);
            ArrayList<HashMap<String, String>> formListValues = da_dynamics.getListConfigValues(screen, listConfigs, query, 0, 0, MdtlistLimit);  //load all values
            fileHelper.fileWriter("ADD ROW QUERY VALUES : " + formListValues, writer);
//            FormList_llValues = new LinearLayout(this);
//            FormList_llValues.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
//            FormList_llValues.setOrientation(LinearLayout.VERTICAL);

//            initAddmainList(formListScreenName, listConfigs, formListValues, FormList_llValues, actionConfig, listConfigQuery);
            initAddmainListRefresh(formListScreenName, listConfigs, formListValues, FormList_llValues, actionConfig, listConfigQuery);


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ADDFORMLISTVIEWROWNEW)) {

            if (formListScreenName.endsWith("_REFRESHFORMLIST")) {
                formListScreenName = formListScreenName.replace("_REFRESHFORMLIST", "");
            }

//            String[] split = actionConfig.ActionValue.split("FormView.ListView.");
//
//            for (int i = 0; i < formConfigs.size(); i++) {
//                if (formConfigs.get(i).FieldName.equalsIgnoreCase(split[1].toUpperCase())) {
//                    queryListConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
//                    String query = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
//                    fileHelper.fileWriter("ADD ROW QUERY : " + query, writer);
//                    listConfigs = da_listConfig.getListConfigs(screen, language, screenWidth);
//                    fileHelper.fileWriter("ListConfig Query : " + query, writer);
//                    ArrayList<HashMap<String, String>> formListValues = da_dynamics.getListConfigValues(screen, listConfigs, query, 0, 0, MdtlistLimit);  //load all values
//                    fileHelper.fileWriter("ADD ROW QUERY VALUES : " + formListValues, writer);
//
////                    Listconfigcustom listConfigCustom = new Listconfigcustom(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
////                    listConfigCustom.initConfiguration(query, null, listConfigs, formListValues, llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer, "", "");
//
//                    Listconfigcustom listConfigCustom = new Listconfigcustom(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
//                    listConfigCustom.Listconfigcustom_AddROW(screen, nsValues, listConfigs, formListValues, llValues, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCountrefresh, null, null, listConfigQuery, "", "");
//
//                }
//            }

            if (actionConfig.ActionValue != null && !actionConfig.ActionValue.isEmpty()) {
                BE_QueryConfig queryListConfig = da_queryConfig.getQueryConfig(actionConfig.ActionValue);
                String query = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                ArrayList<String> poss = da_dynamics.showFormFielfdexecuteQuery(query);
                if (poss != null && !poss.isEmpty()) {
                    listselectpos = Integer.parseInt(poss.get(0));
                }
            }

            queryListConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
            String query = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            listConfigs = da_listConfig.getListConfigs(screen, language, screenWidth);
            fileHelper.fileWriter("ListConfig Query : " + query, writer);
            ArrayList<HashMap<String, String>> formListValues = da_dynamics.getListConfigValues(screen, listConfigs, query, 0, 0, MdtlistLimit);  //load all values
            fileHelper.fileWriter("ADD ROW QUERY VALUES : " + formListValues, writer);
            System.out.println("formListValues : " + formListValues);

            Listconfigcustom listConfigCustom = new Listconfigcustom(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
            listConfigCustom.Listconfigcustom_AddROW(screen, nsValues, listConfigs, formListValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCountrefresh, null, null, listConfigQuery, "", "");


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ADDMAINLISTVIEWROWNEW)) {

            if (formListScreenName != null && formListScreenName.endsWith("_REFRESHFORMLIST")) {
                formListScreenName = formListScreenName.replace("_REFRESHFORMLIST", "");
            }

            if (actionConfig.ActionValue != null && !actionConfig.ActionValue.isEmpty()) {
                BE_QueryConfig queryListConfig = da_queryConfig.getQueryConfig(actionConfig.ActionValue);
                String query = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                ArrayList<String> poss = da_dynamics.showFormFielfdexecuteQuery(query);
                if (poss != null && !poss.isEmpty()) {
                    listselectpos = Integer.parseInt(poss.get(0));
                }
            }

            queryListConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
            String query = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            listConfigs = da_listConfig.getListConfigs(screen, language, screenWidth);
            fileHelper.fileWriter("ListConfig Query : " + query, writer);
            ArrayList<HashMap<String, String>> formListValues = da_dynamics.getListConfigValues(screen, listConfigs, query, 0, 0, MdtlistLimit);  //load all values
            fileHelper.fileWriter("ADD ROW QUERY VALUES : " + formListValues, writer);
            System.out.println("formListValues : " + formListValues);

            Listconfigcustom listConfigCustom = new Listconfigcustom(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
            listConfigCustom.Listconfigcustom_AddROW(screen, nsValues, listConfigs, formListValues, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCountrefresh, null, null, listConfigQuery, "", "");


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DELMAINLISTVIEWROW)) {

//            BE_QueryConfig queryListConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
//            String query = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system);
//            fileHelper.fileWriter("DEL ROW QUERY : " + query, writer);
//            ArrayList<BE_ListConfig> formListConfigs = da_listConfig.getListConfigs(formListScreenName, language, screenWidth);
//            ArrayList<HashMap<String, String>> DelformListValues = da_dynamics.getListConfigValues(formListConfigs, query, 0, 0);  //load all values
//            fileHelper.fileWriter("DEL ROW QUERY VALUES : " + DelformListValues, writer);
//
//            LinearLayout FormList_llValues = new LinearLayout(this);
//            FormList_llValues.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
//            FormList_llValues.setOrientation(LinearLayout.VERTICAL);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHANGELIST)) {
            //List config
            da_listConfig = new DA_ListConfig(this);
            queryListConfig = da_queryConfig.getQueryConfig(actionConfig.ActionValue);
            listConfigQuery = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            initListView(screen);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SENDDB) || actionConfig.ActionType.equalsIgnoreCase(AT_UPLOADDB)) {
            if (!NetworkUtil.isOnline(MainActivity.this)) {
                NetworkUtil.showNoConnectionDialog(MainActivity.this);
            } else {
                String status = da_dynamics.getOfflineStatus();
                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_SENDDBSUCCESS, "");

                } else {
                    HttpFunction httpFunction = new HttpFunction();
                    httpFunction.SENDDB(MainActivity.this, ut_sp.getStringValue(XML_POST_URL), "UploadFile", ut_sp, fileHelper, actionConfig.FieldName);
                }
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SENDLOG)) {
            if (!NetworkUtil.isOnline(MainActivity.this)) {
                NetworkUtil.showNoConnectionDialog(MainActivity.this);
            } else {

                String status = da_dynamics.getOfflineStatus();
                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_SENDLOGSUCCESS, "");
                } else {
                    SendLog sendLog = new SendLog();
                    sendLog.SENDLOG(MainActivity.this, ut_sp.getStringValue(XML_POST_URL), "UploadFile", ut_sp, fileHelper, actionConfig.FieldName);
                }
            }
        }

//        Action Refresh Token
        else if (actionConfig.ActionType.equalsIgnoreCase(AT_REFRESHBUTTON)) {

            transFieldname = actionConfig.FieldName;
            downloadTransconfig = new DownloadTransConfig(MainActivity.this, mScreenName);
            downloadTransconfig.delegate = (UT_AsyncResponse) this;
            downloadTransconfig.execute("");
            // RefreshconfigLoop(actionConfig, progressdialog);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DOWNLOADURL)) {
//            downloadURL();


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHECKVERSION)) {
            System.out.println("CHECK VERSION CALLED");
            for (BE_QueryConfig query : actionConfigQueries) {
                System.out.println("ScreenName : " + query.ScreenName + " - " + actionConfig.ActionPlan);

                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("NoexecuteQuery Query : " + completeQuery, writer);
                    String systemNewVersionValue = da_dynamics.NoexecuteQuery(completeQuery);
                    if (systemNewVersionValue == null || systemNewVersionValue.equals("")) {
                        systemNewVersionValue = "0";
                    }

                    CompareVersion(systemVersionValue, systemNewVersionValue, actionConfig.ActionValue, actionConfig.FieldName);

                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DEVICEINFO)) {
            ut_sp.setStringValue(SQL_SYSTEM + "OSVersion", Build.VERSION.RELEASE);
            ut_sp.setStringValue(SQL_SYSTEM + "MODEL", Build.MODEL);

            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("executeQuery Query : " + completeQuery, writer);

                    da_dynamics.executeQuery(completeQuery);
                }

            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ENABLEAUTOLOGOUT)) {

            String rtn = null;
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionValue)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("NoexecuteQuery Query : " + completeQuery, writer);

                    rtn = da_dynamics.NoexecuteQuery(completeQuery);
                }

            }
            inActiveTimer = parseInt(rtn) * 1000;
            ((TimeOutApp) getApplication()).setTimerValue(inActiveTimer);
            ((TimeOutApp) getApplication()).setActionValue(actionConfig);
            ((TimeOutApp) getApplication()).registerSessionListener(this);
            ((TimeOutApp) getApplication()).startUserSession(inActiveTimer, actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_STOPLOGOFFTIMER)) {
            ((TimeOutApp) getApplication()).cancelTimer();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_POPUPOPTIONS)) {
            ut_dialog.ShowPopupOptionWindow(MainActivity.this, screen);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHECKAUTODATEENABLED)) {

            if (NetworkUtil.isAutoTimeDate(MainActivity.this) == 0 || ut_sp.getStringValue(SP_AUTODATETIME).equalsIgnoreCase("0")) {
                startActivity(new Intent(Settings.ACTION_DATE_SETTINGS));
                formValues.put("AUTODATETIME", String.valueOf(NetworkUtil.isAutoTimeDate(MainActivity.this)));

            } else {
                formValues.put("AUTODATETIME", String.valueOf(NetworkUtil.isAutoTimeDate(MainActivity.this)));

            }

            formValues.put("AUTODATETIME", String.valueOf(NetworkUtil.isAutoTimeDate(MainActivity.this)));

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_GENERATEDOCNO)) {

            System.out.println("Screen Name : " + screen);
            System.out.println("actionConfig : " + actionConfig);
            try {
                fileHelper.fileWriter("getFormConfigValues Query : " + "select * from noseries where Doctype =" + "'" + actionConfig.ActionPlan + "'", writer);
                HashMap<String, String> values = da_dynamics.getFormConfigValues("select * from noseries where Doctype =" + "'" + actionConfig.ActionPlan + "'");
                int lastNumber = parseInt(Objects.requireNonNull(values.get("LASTNUMBER").toUpperCase())) + 1;
                int length = parseInt(Objects.requireNonNull(values.get("NOLENGTH").toUpperCase())) - values.get("PREFIX").toUpperCase().length();
                int size = length - values.get("PREFIX").toUpperCase().length();
                System.out.println("lastNumber : " + lastNumber + " , length : " + length + " , size : " + size);
                String vall = StringUtils.leftPad(String.valueOf(lastNumber), length, '0');
                runningNo = values.get("PREFIX").toUpperCase() + "" + vall;
                System.out.println("lastNumber 2 : " + runningNo);

                ut_sp.setStringValue(SQL_GENERATEDOCNO, runningNo.toString());
            } catch (Exception e) {
                e.printStackTrace();
                ut_dialog.exceptionAlert(e, MainActivity.this);
            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATESERIESNO)) {
            HashMap<String, String> queryvalue = null;
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("getFormConfigValues Query : " + completeQuery, writer);
                    queryvalue = da_dynamics.getFormConfigValues(completeQuery);
                }

            }

            String lastNumber = queryvalue.get("LASTNUMBER");
            int length = parseInt(queryvalue.get("NOLENGTH"));
            int size = length - queryvalue.get("PREFIX").length();
            String leftp = StringUtils.leftPad(lastNumber, size, "0");
            runningNo = queryvalue.get("PREFIX") + leftp;
            ut_sp.setStringValue(SQL_GENERATEDOCNO, runningNo.toString());


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ACCESSLEVEL)) {

            String rtn = null;
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("NoexecuteQuery Query : " + completeQuery, writer);
                    rtn = da_dynamics.NoexecuteQuery(completeQuery);
                    String access = "(Access is NULL OR Access =" + rtn + ")";
                    ut_sp.setStringValue(SP_ACCESS_LEVEL, access);
                    ut_sp.setStringValue(SP_ACCESS_LEVEL_TEMP, rtn);
                }

            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_FOCUSLINEFIELD)) {

            HashMap<String, String> rtn = new HashMap<>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + completeQuery, writer);
                    rtn = da_dynamics.LastDocNoexecuteQuery(completeQuery);

                }

            }
            String key = null;
            String value = null;
            for (String str : rtn.keySet()) {
                key = str;
                value = rtn.get(str);
            }

            for (int i = 0; i < listConfigValues.size(); i++) {

                if (listConfigValues.get(i).get(key).equals(value)) {
                    // View view = FormList_llValues.findViewWithTag(actionConfig.ActionValue.toString().toUpperCase() + "#" + i);
                    View view = null;

                    if (formlist) {
                        if (FormList_llValues != null) {
                            view = FormList_llValues.findViewWithTag(actionConfig.ActionValue.toString().toUpperCase() + "#" + i);
                        } else {
                            view = listConfigView.findViewWithTag(actionConfig.ActionValue.toString().toUpperCase() + "#" + i);
                        }
                    } else {
                        if (listConfigView.getChildCount() >= 2) {
                            view = listConfigView.findViewWithTag(actionConfig.ActionValue.toString().toUpperCase() + "#" + i);
                        } else {
                            if (FormList_llValues != null) {
                                view = FormList_llValues.findViewWithTag(actionConfig.ActionValue.toString().toUpperCase() + "#" + i);
                            } else {
                                view = listConfigView.findViewWithTag(actionConfig.ActionValue.toString().toUpperCase() + "#" + i);
                            }
                        }
                    }

                    EditText editText = (EditText) view;
                    editText.setCursorVisible(true);
                    editText.setFocusable(true);
                    editText.requestFocus();

                }

            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SHOWFORMFIELDS)) {

            ArrayList<String> rtn = new ArrayList<>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    rtn = da_dynamics_syscon.showFormFielfdexecuteQuery(completeQuery);
                    showformfileds = da_dynamics_syscon.showFormFielfdexecuteQuery(completeQuery);
                }
            }

            System.out.println("rtn : " + rtn);

            if (!rtn.isEmpty()) {
                for (int i = 0; i < formContent.getChildCount(); i++) {
                    View temp = formContent.getChildAt(i);
                    if (temp instanceof LinearLayout) {
                        LinearLayout linearLayout = (LinearLayout) temp;
                        for (int j = 0; j < linearLayout.getChildCount(); j++) {

                            View view = linearLayout.getChildAt(j);
//                            System.out.println("temp child view : " + view);

                            if (view != null) {

                                if (view instanceof CheckBox || view instanceof MaterialButton || view instanceof TextInputLayout || view instanceof TextInputEditText ||
                                        view instanceof MaterialEditText || view instanceof MaterialSpinner ||
                                        view instanceof TextView || view instanceof ImageView || view instanceof MaterialEditTextArea || view instanceof MaterialEditTextAreaBack ||
                                        view instanceof WebView || view instanceof MaterialEditText_back || view instanceof MaterialSpinnerBack || view instanceof MaterialSpinnerBackNew) {
                                    try {


                                        if (view.getTag() != null) {
                                            if (rtn.contains(view.getTag().toString().toUpperCase())) {
                                                view.setVisibility(View.VISIBLE);

                                                if (view instanceof MaterialSpinner) {
                                                    View view1 = linearLayout.findViewWithTag(view.getTag().toString().toUpperCase());
                                                    view1.setVisibility(View.VISIBLE);
                                                }
                                                if (view instanceof MaterialSpinnerBack) {
                                                    View view1 = linearLayout.findViewWithTag(view.getTag().toString().toUpperCase());
                                                    view1.setVisibility(View.VISIBLE);
                                                }
                                                if (view instanceof MaterialSpinnerBackNew) {
                                                    View view1 = linearLayout.findViewWithTag(view.getTag().toString().toUpperCase());
                                                    view1.setVisibility(View.VISIBLE);
                                                }

                                            } else {
                                                view.setVisibility(View.GONE);
                                                if (view instanceof MaterialSpinner) {
                                                    View view1 = linearLayout.findViewWithTag(view.getTag().toString().toUpperCase());
                                                    view1.setVisibility(View.GONE);

                                                } else if (view instanceof MaterialSpinnerBack) {
                                                    View view1 = linearLayout.findViewWithTag(view.getTag().toString().toUpperCase());
                                                    view1.setVisibility(View.GONE);

                                                } else if (view instanceof MaterialSpinnerBackNew) {
                                                    View view1 = linearLayout.findViewWithTag(view.getTag().toString().toUpperCase());
                                                    view1.setVisibility(View.GONE);

                                                }
                                            }
                                        }

                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                } else if (view instanceof LinearLayout || view instanceof NestedScrollView || view instanceof HorizontalScrollView) {
                                    try {

                                        if (view.getTag() != null) {

                                            if (rtn.contains(view.getTag().toString().toUpperCase())) {
                                                view.setVisibility(View.VISIBLE);
                                            } else {
                                                view.setVisibility(View.GONE);
                                            }
                                        } else {

                                            if (view instanceof LinearLayout) {
                                                LinearLayout layout = (LinearLayout) view;

                                                for (int y = 0; y < layout.getChildCount(); y++) {

                                                    if (layout.getChildAt(y).getTag() != null) {
                                                        if (layout.getChildAt(y).getTag().toString().isEmpty()) {
                                                            View layout2 = (LinearLayout) layout.getChildAt(y);
                                                        } else {
                                                            if (rtn.contains(layout.getChildAt(y).getTag().toString().toUpperCase())) {
                                                                layout.setVisibility(View.VISIBLE);
                                                            } else {
                                                                layout.setVisibility(View.GONE);
                                                            }
                                                        }
                                                    }
                                                }
                                            }


                                        }

                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }

                                    try {
                                        LinearLayout linearLayout1 = (LinearLayout) view;

                                        for (int a = 0; a < linearLayout1.getChildCount(); a++) {
                                            View view2 = linearLayout1.getChildAt(a);

                                            if (view2 != null) {
                                                if (view2.getTag() != null) {
                                                    if (view2 instanceof ImageView) {
                                                        try {

                                                            if (rtn.contains(view2.getTag().toString().toUpperCase())) {
                                                                view2.setVisibility(View.VISIBLE);
                                                            } else {
                                                                view2.setVisibility(View.GONE);
                                                            }

                                                        } catch (Exception e) {
                                                            e.printStackTrace();
                                                        }
                                                    }
                                                } else {
                                                    if (view2 instanceof LinearLayout) {
                                                        LinearLayout layout = (LinearLayout) view2;

                                                        for (int y = 0; y < layout.getChildCount(); y++) {

                                                            if (layout.getChildAt(y).getTag() != null) {
                                                                System.out.println("TAG view : " + layout.getChildAt(y));
                                                                System.out.println("TAG : " + layout.getChildAt(y).getTag());
                                                                if (rtn.contains(layout.getChildAt(y).getTag().toString().toUpperCase())) {
                                                                    layout.setVisibility(View.VISIBLE);
                                                                } else {
                                                                    layout.setVisibility(View.GONE);
                                                                }
                                                            }
                                                        }
                                                    }

                                                }
                                            }


                                        }


                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        }
                    }


                }
            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ENABLELOCATION)) {

            getEnableLocation();
            Toast.makeText(getApplicationContext(), "Enable Map Current Location", Toast.LENGTH_SHORT).show();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CURRENTLOCATION)) {
            if (googleMap != null) {
                googleMap.currentLocation(mCurrentLocation);
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_TODAYROUTE)) {
            System.out.println("actionConfigQueries : " + actionConfigQueries);
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    MapLatLongRtn = da_dynamics.getLatLongValues(completeQuery);

                    System.out.println("MapLatLongRtn 1 : " + MapLatLongRtn);
                    System.out.println("googleMap : " + googleMap);
                    System.out.println("mCurrentLocation : " + mCurrentLocation);

                    if (googleMap != null) {

                        LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                        Criteria criteria = new Criteria();
                        provider = locationManager.getBestProvider(criteria, false);
                        Location location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
                        mCurrentLocation = location;

                        googleMap.currentLocation(mCurrentLocation);
                        googleMap.CustomerLocations(MapLatLongRtn);
                    }

                }

            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_NEARBY)) {
            try {
                for (BE_QueryConfig query : actionConfigQueries) {
                    if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                        String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        fileHelper.fileWriter("NoexecuteQuery Query : " + completeQuery, writer);
                        String radius = da_dynamics.NoexecuteQuery(completeQuery);

                        if (googleMap != null) {
                            googleMap.Circle(radius);
                        }

                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_REFRESHCHART)) {


            if (actionConfig.ActionPlan.endsWith("chart")) {

                for (BE_QueryConfig query : actionConfigQueries) {
                    if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                        chartQuery = query.QueryText;
                    }
                }

                if (mainDashboardActivated.equals("MainWidget_ACTIVATED")) {
                    mainDashboardActivated = "MainWidget";
                } else {
                    mainDashboardActivated = "MainWidget_ACTIVATED";
                }
                initFormContentMultiDisplayNo(formContent, formConfigs, formValues, mScreenName);

            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_NOTIFICATION)) {
            FirebaseApp.initializeApp(this);
            firebase = new FirebaseInitialize(this, fileHelper, writer);
            firebase.fcmInitConfig();
            firebase.notifyTapped();
            firebase.fcmChennalSubscription();
            firebase.getFCMRegisterToken();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_FLOWCOLOR)) {
            ArrayList<String> rtn = new ArrayList<>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    rtn = da_dynamics_syscon.showFormFielfdexecuteQuery(completeQuery);
                }
            }

            for (int i = 0; i < formContent.getChildCount(); i++) {
                View temp = formContent.getChildAt(i);
                if (temp instanceof LinearLayout) {
                    LinearLayout linearLayout = (LinearLayout) temp;
                    for (int j = 0; j < linearLayout.getChildCount(); j++) {
                        View view = linearLayout.getChildAt(j);
                        if (view instanceof MaterialButton) {
                            if (rtn.contains(view.getTag())) {
                                view.setBackgroundColor(Color.BLUE);
                            }
                        }
                    }
                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATESERVER)) {


            String status = da_dynamics.getOfflineStatus();

            UpdateToserver serverUpdate = new UpdateToserver(this, actionConfig, ut_sp, fileHelper);
            HashMap<String, String> rtn = new HashMap<>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("getUpdateserverConfigValues Query : " + completeQuery, writer);
                    rtn = da_dynamics.getUpdateserverConfigValues(completeQuery);

                }
            }
            fileHelper.fileWriter("getUpdateserverConfigValues Query Value : " + rtn, writer);
            serverUpdate.Servercallnew(rtn);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATESERVERUNIQUE)) {

            String status = da_dynamics.getOfflineStatus();

            UpdateToserver serverUpdate = new UpdateToserver(this, actionConfig, ut_sp, fileHelper);
            HashMap<String, String> rtn = new HashMap<>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("getUpdateserverConfigValues Query unique : " + completeQuery, writer);
                    rtn = da_dynamics.getUpdateserverConfigValues(completeQuery);
                }
            }
            fileHelper.fileWriter("getUpdateserverConfigValues Query Value unique : " + rtn, writer);
            serverUpdate.ServercallUPDATESERVERUNIQUE(rtn);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SHOWLOCATION)) {


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_WSAPRINT)) {

            Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(ignored -> {

                        try {

                            String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");

                            String savedMac = da_dynamics.getMacAddress();
                            fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);
                            Connection con = new com.zebra.sdk.comm.BluetoothConnection(savedMac);
                            con.open();
                            printer = ZebraPrinterFactory.getInstance(con);


                            ArrayList<HashMap<String, String>> values = new ArrayList<HashMap<String, String>>();
                            for (BE_QueryConfig query : actionConfigQueries) {
                                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                                    System.out.println("completeQuery : " + completeQuery);

                                    values = da_dynamics.getMapListValues(completeQuery);
                                }

                            }

                            int printSize = 1;

                            if (PrintCopy != null && !PrintCopy.isEmpty() && !PrintCopy.equals("0")) {
                                printSize = parseInt(PrintCopy);
                            }

                            for (int j = 0; j < printSize; j++) {


                                fileHelper.fileWriter("values : " + values, writer);

                                for (int a = 0; a < values.size(); a++) {

                                    String lineNo = values.get(a).get("LINENO");
                                    String itemNo = values.get(a).get("ITEMNO");
                                    String qty = values.get(a).get("QTY");
                                    String description = values.get(a).get("DESCRIPTION");
                                    String barcode = values.get(a).get("BARCODE");
                                    String altno = values.get(a).get("ALTNO");

                                    boolean result = verifycode(barcode);

                                    printer.sendCommand("^XA^LL240^XZ");

                                    if (result) {
                                        String zplData = "^XA^LL240^LS0" +
                                                "^FT15,35" +
                                                "^CF0,16" +
                                                "^FH^CI12^FDLine:" + lineNo + "^FS^CI0" +
                                                "^BY2" +
                                                "^FT120,50" +
                                                "^BCN,40,Y,N" +
                                                "^FD" + itemNo + "^FS" +
                                                "^FT20,90" +
                                                "^CF1,20" +
                                                "^FH^CI12^FD" + description + "^FS^CI0" +
                                                "^FT25,160^BY2" +
                                                "^BEN,60,Y,N" +
                                                "^FD" + barcode + "^FS" +
                                                "^FT240,210" +
                                                "^CF0,16" +
                                                "^FH^CI15" +
                                                "^FDQTY:^FS" +
                                                "^CI0^BY1" +
                                                "^FT290,210" +
                                                "^BCN,50,Y,N" +
                                                "^FD" + qty + "^FS" +
                                                "^FT15,330" +
                                                "^FB200,7,J,0" +
                                                "^CF0,20" +
                                                "^FD" + altno + "^FS" +
                                                "^XZ";
                                        fileHelper.fileWriter("zplData : " + zplData, writer);
                                        printer.sendCommand(zplData);
                                    } else {
                                        String zplData = "^XA^LL240^LS0" +
                                                "^FT15,35" +
                                                "^CF0,16" +
                                                "^FH^CI12^FDLine:" + lineNo + "^FS^CI0" +
                                                "^BY2" +
                                                "^FT90,50" +
                                                "^BCN,40,Y,N" +
                                                "^FD" + itemNo + "^FS" +
                                                "^FT20,90" +
                                                "^CF1,20" +
                                                "^FH^CI12^FD" + description + "^FS^CI0" +
                                                "^FT20,160^BY2" +
                                                "^BCN,60,Y,N" +
                                                "^FD" + barcode + "^FS" +
                                                "^FT240,210" +
                                                "^CF0,16" +
                                                "^FH^CI15" +
                                                "^FDQTY:^FS" +
                                                "^CI0^BY1" +
                                                "^FT290,215" +
                                                "^BCN,50,Y,N" +
                                                "^FD" + qty + "^FS" +
                                                "^FT15,330" +
                                                "^FB200,7,J,0" +
                                                "^CF0,20" +
                                                "^FD" + altno + "^FS" +
                                                "^XZ";
                                        fileHelper.fileWriter("zplData : " + zplData, writer);
                                        printer.sendCommand(zplData);
                                    }

                                }

                            }

                            con.close();
                            executeActionConfig("", AN_PrintSuccess, "");

                        } catch (ConnectionException e) {
                            e.printStackTrace();
                            executeActionConfig("Connection", AN_PrintFailed, "");
                            fileHelper.fileWriter("ConnectionException : " + e.getLocalizedMessage(), writer);

                        } catch (ZebraPrinterLanguageUnknownException e) {
                            e.printStackTrace();
                            executeActionConfig("Language", AN_PrintFailed, "");
                            fileHelper.fileWriter("ZebraPrinterLanguageUnknownException : " + e.getLocalizedMessage(), writer);

                        } catch (Exception e) {
                            e.printStackTrace();
                            executeActionConfig("Error", AN_PrintFailed, "");
                            fileHelper.fileWriter("Final Exception : " + e.getLocalizedMessage(), writer);

                        }
                    });

            disposables.add(d);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_PRINTER)) {

            ArrayList<HashMap<String, String>> tbl_print = new ArrayList<HashMap<String, String>>();
            try {
                tbl_print = da_dynamics.getTblPrint();
            } catch (Exception e) {
                e.printStackTrace();
            }


            fileHelper.fileWriter("ActionPlan : " + actionConfig.ActionPlan, writer);

            DA_System da_system = new DA_System(this);
            String printerWidth = da_system.getSystemvals("PrinterWidth");
            final int[] width = {3};
            if (actionConfig.ActionPlan.equalsIgnoreCase("ESCPOS_NEW")) {  //New
                try {
                    if (progressdialog != null) {
                        progressdialog.cancel();
                        progressdialog.dismiss();
                        progressdialog = null;
                    }

                    progressdialog = new Dialog(MainActivity.this);
                    progressdialog.setContentView(R.layout.loading_dialog);
                    progressdialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                    progressdialog.setCancelable(false);
                    progressdialog.setCanceledOnTouchOutside(false);
                    progressdialog.getWindow().getAttributes().windowAnimations = R.style.animation;
                    progressdialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);

                    loadingProgress = progressdialog.findViewById(R.id.loadingProgress);
                    percentage = progressdialog.findViewById(R.id.percentage);

                    progressdialog.show();

                } catch (Exception e) {
                    e.printStackTrace();
                }


                da_listConfig = new DA_ListConfig(this);
                this.language = language;
                ArrayList<BE_PrintConfig> updatedPrintConfig = printConfigs;

                if (!actionConfig.ActionValue.isEmpty()) {
                    String queryName = actionConfig.ActionValue;

                    HashMap<String, String> rtn = new HashMap<>();
                    for (BE_QueryConfig query : actionConfigQueries) {
                        if (query.ScreenName.equalsIgnoreCase(queryName)) {
                            String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                            fileHelper.fileWriter("getGroupId Query : " + completeQuery, writer);
                            System.out.println("getGroupId Query : " + completeQuery);
                            rtn = da_dynamics.getgroupId(completeQuery);

                        }
                    }

                    System.out.println("rtn : " + rtn);

                    String groupId = "0";
                    if (rtn != null && !rtn.isEmpty()) {
//                        groupId = groupId + "," + rtn.get("FormatID");
                        groupId = rtn.get("FormatID");
                    }


                    DA_FormConfig da_formConfig = new DA_FormConfig(this);
                    updatedPrintConfig = da_formConfig.getPrintConfigsGroupID(screen, language, groupId);   // Used only for Print
                }

                ArrayList<HashMap<String, String>> printFormList = new ArrayList<HashMap<String, String>>();
                ArrayList<HashMap<String, String>> printListvalues = new ArrayList<HashMap<String, String>>();


                if (finalselectvalues.isEmpty()) {
                    selectedListValues = formValues;
                    paramSelectedListValues = formValues;

                    String formQuery = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("formQuery : " + formQuery, writer);
                    System.out.println("formQuery :: " + formQuery);
                    formValues = new HashMap<>();
                    formSpinners = new HashMap<>();
                    if (!formQuery.equals("")) {
                        fileHelper.fileWriter("getFormConfigValues Query : " + formQuery, writer);
                        formValues = da_dynamics.getFormConfigValues(formQuery);
                        System.out.println("formValues :: " + formValues);
                    }

                    printFormList.add(formValues);
                    printListvalues.add(selectedListValues);
                } else {
                    for (int b = 0; b < finalselectvalues.size(); b++) {

                        selectedListValues = finalselectvalues.get(b);
                        paramSelectedListValues = selectedListValues;

                        String formQuery = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        fileHelper.fileWriter("formQuery : " + formQuery, writer);
                        System.out.println("formQuery :: " + formQuery);
                        formValues = new HashMap<>();
                        formSpinners = new HashMap<>();
                        if (!formQuery.equals("")) {
                            fileHelper.fileWriter("getFormConfigValues Query : " + formQuery, writer);
                            formValues = da_dynamics.getFormConfigValues(formQuery);
                            System.out.println("formValues :: " + formValues);
                        }

                        printFormList.add(formValues);
                        printListvalues.add(selectedListValues);

                    }
                }


                PDFGeneratorUtil pdf = new PDFGeneratorUtil(this, da_listConfig, this.language,
                        "sample.pdf", updatedPrintConfig, formValues, screen, selectedListValues, paramFormValues,
                        paramSelectedListValues, system, 2, printFormList, printListvalues);

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {

                    File file = pdf.generatePDF();
                    fileHelper.fileWriter("file : " + file, writer);

                    String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");
                    System.out.println("PrintCopy : " + PrintCopy);
                    fileHelper.fileWriter("PrintCopy : " + PrintCopy, writer);

                    String savedMac = da_dynamics.getMacAddress();
                    fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);
                    ArrayList<String> path = new ArrayList<>();
                    path.add(file.getPath());
                    Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe(ignored -> {
                                printESCPOS(savedMac, path, actionConfig, width[0]);
//                                printESCPOSScript(savedMac, pdf.generateESCPOSScript(maxLength), actionConfig, width[0]);
                            });
                    disposables.add(d);


                }

            } else if (actionConfig.ActionPlan.equalsIgnoreCase("ESCPOS")) {
                try {

                    BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
                    if (mBluetoothAdapter == null) {
                        // Device does not support Bluetooth
                        System.out.println("Device does not support Bluetooth :(");
                        executeActionConfig(actionConfig.FieldName, AN_BluetoothNotSupport, "");
                    } else if (!mBluetoothAdapter.isEnabled()) {
                        // Bluetooth is not enabled :)
                        System.out.println("Bluetooth is not enabled :(");
                        executeActionConfig(actionConfig.FieldName, AN_BluetoothNotEnabled, "");
                    } else {
                        System.out.println("Bluetooth is enabled :)");
                        try {
                            if (progressdialog != null) {
                                progressdialog.cancel();
                                progressdialog.dismiss();
                                progressdialog = null;
                            }

                            progressdialog = new Dialog(MainActivity.this);
                            progressdialog.setContentView(R.layout.loading_dialog);
                            progressdialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                            progressdialog.setCancelable(false);
                            progressdialog.setCanceledOnTouchOutside(false);
                            progressdialog.getWindow().getAttributes().windowAnimations = R.style.animation;
                            progressdialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);

                            loadingProgress = progressdialog.findViewById(R.id.loadingProgress);
                            percentage = progressdialog.findViewById(R.id.percentage);

                            progressdialog.show();

                        } catch (Exception e) {
                            e.printStackTrace();
                        }


                        da_listConfig = new DA_ListConfig(this);
                        this.language = language;
                        ArrayList<BE_PrintConfig> updatedPrintConfig = printConfigs;

                        if (!actionConfig.ActionValue.isEmpty()) {
                            String queryName = actionConfig.ActionValue;

                            HashMap<String, String> rtn = new HashMap<>();
                            for (BE_QueryConfig query : actionConfigQueries) {
                                if (query.ScreenName.equalsIgnoreCase(queryName)) {
                                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                                    fileHelper.fileWriter("getGroupId Query : " + completeQuery, writer);
                                    System.out.println("getGroupId Query : " + completeQuery);
                                    rtn = da_dynamics.getgroupId(completeQuery);

                                }
                            }

                            System.out.println("rtn : " + rtn);

                            String groupId = "0";
                            if (rtn != null && !rtn.isEmpty()) {
//                        groupId = groupId + "," + rtn.get("FormatID");
                                groupId = rtn.get("FormatID");
                            }


                            DA_FormConfig da_formConfig = new DA_FormConfig(this);
                            updatedPrintConfig = da_formConfig.getPrintConfigsGroupID(screen, language, groupId);   // Used only for Print
                        }

                        ArrayList<HashMap<String, String>> printFormList = new ArrayList<HashMap<String, String>>();
                        ArrayList<HashMap<String, String>> printListvalues = new ArrayList<HashMap<String, String>>();

                        System.out.println("tbl_print : " + tbl_print);

                        if (tbl_print != null && !tbl_print.isEmpty()) {

                            String formQuery = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                            fileHelper.fileWriter("formQuery : " + formQuery, writer);
                            System.out.println("formQuery :: " + formQuery);
                            formValuess = new ArrayList<HashMap<String, String>>();
                            formSpinners = new HashMap<>();
                            if (!formQuery.equals("")) {
                                fileHelper.fileWriter("getFormConfigValues Query : " + formQuery, writer);
                                formValuess = da_dynamics.getFormConfigValuesList(formQuery);
                                System.out.println("formValues :: " + formValuess);
                                System.out.println("formValues size :: " + formValuess.size());
                            }

                            for (int a = 0; a < formValuess.size(); a++) {
                                formValues = formValuess.get(a);
                                printFormList.add(formValues);
                                printListvalues.add(selectedListValues);
                            }

                        } else {
                            if (finalselectvalues.isEmpty()) {
                                selectedListValues = formValues;
                                paramSelectedListValues = formValues;

                                String formQuery = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                                fileHelper.fileWriter("formQuery : " + formQuery, writer);
                                System.out.println("formQuery :: " + formQuery);
                                formValues = new HashMap<>();
                                formSpinners = new HashMap<>();
                                if (!formQuery.equals("")) {
                                    fileHelper.fileWriter("getFormConfigValues Query : " + formQuery, writer);
                                    formValues = da_dynamics.getFormConfigValues(formQuery);
                                    System.out.println("formValues :: " + formValues);
                                }

                                printFormList.add(formValues);
                                printListvalues.add(selectedListValues);
                            } else {
                                for (int b = 0; b < finalselectvalues.size(); b++) {

                                    selectedListValues = finalselectvalues.get(b);
                                    paramSelectedListValues = selectedListValues;

                                    String formQuery = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                                    fileHelper.fileWriter("formQuery : " + formQuery, writer);
                                    System.out.println("formQuery :: " + formQuery);
                                    formValues = new HashMap<>();
                                    formSpinners = new HashMap<>();
                                    if (!formQuery.equals("")) {
                                        fileHelper.fileWriter("getFormConfigValues Query : " + formQuery, writer);
                                        formValues = da_dynamics.getFormConfigValues(formQuery);
                                        System.out.println("formValues :: " + formValues);
                                    }

                                    printFormList.add(formValues);
                                    printListvalues.add(selectedListValues);

                                }
                            }
                        }


                        PDFGeneratorUtil pdf = new PDFGeneratorUtil(this, da_listConfig, this.language,
                                "sample.pdf", updatedPrintConfig, formValues, screen, selectedListValues, paramFormValues,
                                paramSelectedListValues, system, 2, printFormList, printListvalues);

                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {

                            File file = pdf.generatePDF();
                            fileHelper.fileWriter("file : " + file, writer);

                            String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");
                            System.out.println("PrintCopy : " + PrintCopy);
                            fileHelper.fileWriter("PrintCopy : " + PrintCopy, writer);

                            String savedMac = da_dynamics.getMacAddress();
                            fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);

                            ArrayList<String> filePaths = new ArrayList<>();
                            filePaths.add(file.getPath());

                            Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                                    .subscribeOn(Schedulers.io())
                                    .observeOn(AndroidSchedulers.mainThread())
                                    .subscribe(ignored -> {
                                        printESCPOS(savedMac, filePaths, actionConfig, width[0]);
                                    });
                            disposables.add(d);


                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (actionConfig.ActionPlan.equalsIgnoreCase("ESCPOS_OBSOLET")) {//ESCPOS

                String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");
                System.out.println("PrintCopy : " + PrintCopy);

                String savedMac = da_dynamics.getMacAddress();
                fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);

                ArrayList<String> filePaths = new ArrayList<>();
                try {
                    for (int a = 0; a < webViewArrayList.size(); a++) {

                        int pageWidth = 72 * 2;
                        if (printerWidth != null && !printerWidth.isEmpty()) {
                            width[0] = parseInt(printerWidth);
                            pageWidth = 72 * width[0];
                        }

                        int contentHeight = (int) Math.ceil(pageWidth * webViewArrayList.get(a).getMeasuredHeight() / webViewArrayList.get(a).getMeasuredWidth());

                        // Create a PDF document
                        PdfDocument document = new PdfDocument();
                        PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                        PdfDocument.Page page2 = document.startPage(pageInfo);

                        // Draw the WebView content to the PDF page
                        Canvas canvas = page2.getCanvas();
                        float scale = (float) pageWidth / webViewArrayList.get(a).getWidth();
                        canvas.scale(scale, scale);
                        webViewArrayList.get(a).draw(canvas);
                        document.finishPage(page2);

                        document.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf"));
                        document.close();
                        File file = new File(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf");
                        if (file.exists()) {
                            filePaths.add(file.getPath());
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    fileHelper.fileWriter("Printer Exception 1 : " + e.getLocalizedMessage(), writer);

                }
                fileHelper.fileWriter("Printer filePaths : " + filePaths, writer);

                printESCPOS(savedMac, filePaths, actionConfig, width[0]);

                if (!actionConfig.ActionValue.isEmpty()) {

                    LinearLayout linearLayout = new LinearLayout(this);

                    String queryName = actionConfig.ActionValue;

                    HashMap<String, String> rtn = new HashMap<>();
                    for (BE_QueryConfig query : actionConfigQueries) {
                        if (query.ScreenName.equalsIgnoreCase(queryName)) {
                            String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                            fileHelper.fileWriter("getGroupId Query : " + completeQuery, writer);
                            System.out.println("getGroupId Query : " + completeQuery);
                            rtn = da_dynamics.getgroupId(completeQuery);

                        }
                    }

                    System.out.println("rtn : " + rtn);

                    String groupId = "0";
                    if (rtn != null && !rtn.isEmpty()) {
//                        groupId = groupId + "," + rtn.get("FormatID");
                        groupId = rtn.get("FormatID");
                    }


                    DA_FormConfig da_formConfig = new DA_FormConfig(this);
                    printConfigs = da_formConfig.getPrintConfigsGroupID(screen, language, groupId);   // Used only for Print

                    webViewArrayList = new ArrayList<WebView>();

                    if (finalselectvalues != null && !finalselectvalues.isEmpty()) {
                        System.out.println("finalselectvalues : " + finalselectvalues);

                        for (int i = 0; i < this.finalselectvalues.size(); i++) {

                            selectedListValues = finalselectvalues.get(i);
                            paramSelectedListValues = selectedListValues;

                            String formQuery = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                            fileHelper.fileWriter("formQuery : " + formQuery, writer);
                            System.out.println("formQuery :: " + formQuery);
                            formValues = new HashMap<>();
                            formSpinners = new HashMap<>();
                            if (!formQuery.equals("")) {
                                fileHelper.fileWriter("getFormConfigValues Query : " + formQuery, writer);
                                formValues = da_dynamics.getFormConfigValues(formQuery);
                                System.out.println("formValues :: " + formValues);
                            }

//                                WebView webView = new WebView(this);
                            WebView webView = findViewById(R.id.webView2);
                            webView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                            webView.setVisibility(View.VISIBLE);
                            webView.getSettings().setLoadWithOverviewMode(true);
                            webView.getSettings().setUseWideViewPort(true);
                            webView.getSettings().setBuiltInZoomControls(true);
                            webView.getSettings().setSupportZoom(true);

                            System.out.println("printListConfig 1 : " + printListConfig);
                            HtmlfileViewer htmlFile = new HtmlfileViewer();
                            linesPrinted = htmlFile.htmlFileCreate(MainActivity.this, screen, printConfigs, printListConfig, da_dynamics, da_queryConfig, system, ut_common, formValues, selectedListValues, paramFormValues, paramSelectedListValues, fileHelper, i, language, (screenWidth / 100.0));
                            webView.setWebViewClient(new WebViewClient());
                            webView.getSettings().setAllowContentAccess(true);
                            webView.getSettings().setAllowFileAccess(true);
                            webView.getSettings().setJavaScriptEnabled(true);

                            String folder = "Report/";
                            String file_name = "Html_" + i;
                            String file_format = ".html";
                            File root = new File(fileHelper.getSalesDirectoryPath(), folder);
                            String fullName = root + "/" + file_name + file_format;

                            if (new File(fullName).exists()) {
                                webView.loadUrl(fullName);
                            }

                            int finalI = i;
                            int finalI1 = i;
                            webView.setWebViewClient(new WebViewClient() {
                                @Override
                                public void onPageCommitVisible(WebView view, String url) {
                                    super.onPageCommitVisible(view, url);
                                }

                                @Override
                                public void onPageFinished(WebView view, String url) {
                                    super.onPageFinished(view, url);

                                    webViewArrayList.add(view);

                                    Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                                            .subscribeOn(Schedulers.io())
                                            .observeOn(AndroidSchedulers.mainThread())
                                            .subscribe(ignored -> {
                                                printMultiformat(printerWidth, width, savedMac, webViewArrayList, actionConfig);
                                            });
                                    disposables.add(d);
                                }


                            });

//                                linearLayout.addView(webView);

                        }

                    }

                }
            } else if (actionConfig.ActionPlan.contains("SUNMI")) {

                ArrayList<String> filePaths = new ArrayList<>();
                try {
                    for (int a = 0; a < webViewArrayList.size(); a++) {

                        int pageWidth = 72 * 3;

                        if (printerWidth != null && !printerWidth.isEmpty()) {
                            width[0] = parseInt(printerWidth);
                            pageWidth = 72 * width[0];
                        }

                        int contentHeight = (int) Math.ceil(pageWidth * webViewArrayList.get(a).getMeasuredHeight() / webViewArrayList.get(a).getMeasuredWidth());

                        // Create a PDF document
                        PdfDocument document = new PdfDocument();
                        PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                        PdfDocument.Page page2 = document.startPage(pageInfo);

                        // Draw the WebView content to the PDF page
                        Canvas canvas = page2.getCanvas();
                        float scale = (float) pageWidth / webViewArrayList.get(a).getWidth();
                        canvas.scale(scale, scale);
                        webViewArrayList.get(a).draw(canvas);
                        document.finishPage(page2);

                        document.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf"));
                        document.close();
                        File file = new File(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf");
                        if (file.exists()) {
                            filePaths.add(file.getPath());
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    fileHelper.fileWriter("Printer Exception 1 : " + e.getLocalizedMessage(), writer);

                }
                fileHelper.fileWriter("Printer filePaths : " + filePaths, writer);

                printSunmi(filePaths, actionConfig, this.getApplicationContext(), width[0]);
            } else if (actionConfig.ActionPlan.contains("HONEYWELL")) {
                String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");
                System.out.println("PrintCopy : " + PrintCopy);

                String savedMac = da_dynamics.getMacAddress();
                fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);
                ArrayList<String> filePaths = new ArrayList<>();
                try {
                    for (int a = 0; a < webViewArrayList.size(); a++) {

                        int pageWidth = 72 * 4;
                        if (printerWidth != null && !printerWidth.isEmpty()) {
                            width[0] = parseInt(printerWidth);
                            pageWidth = 72 * width[0];
                        }

                        int contentHeight = (int) Math.ceil(pageWidth * webViewArrayList.get(a).getMeasuredHeight() / webViewArrayList.get(a).getMeasuredWidth());

                        // Create a PDF document
                        PdfDocument document = new PdfDocument();
                        PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                        PdfDocument.Page page2 = document.startPage(pageInfo);

                        // Draw the WebView content to the PDF page
                        Canvas canvas = page2.getCanvas();
                        float scale = (float) pageWidth / webViewArrayList.get(a).getWidth();
                        canvas.scale(scale, scale);
                        webViewArrayList.get(a).draw(canvas);
                        document.finishPage(page2);

                        document.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf"));
                        document.close();
                        File file = new File(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf");
                        if (file.exists()) {
                            filePaths.add(file.getPath());
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    fileHelper.fileWriter("Printer Exception 1 : " + e.getLocalizedMessage(), writer);

                }
                fileHelper.fileWriter("Printer filePaths : " + filePaths, writer);

                printOneil(savedMac, filePaths, actionConfig, width[0]);
            } else if (actionConfig.ActionPlan.equalsIgnoreCase("vida")) {

                Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                        .subscribeOn(Schedulers.io())
                        .observeOn(AndroidSchedulers.mainThread())
                        .subscribe(ignored -> {

                            try {

                                String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");
                                System.out.println("PrintCopy : " + PrintCopy);

                                String savedMac = da_dynamics.getMacAddress();
                                System.out.println("savedMac : " + savedMac);

                                fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);
                                Connection con = new com.zebra.sdk.comm.BluetoothConnection(savedMac);
                                con.open();

//                                SGD.SET("device.languages", "ZPL", con);
                                printer = ZebraPrinterFactory.getInstance(con);
//                                printer.sendCommand("! U1 setvar \"device.languages\" \"zpl\"\r\n");


                                for (int a = 0; a < webViewArrayList.size(); a++) {

                                    //72 is 1 inch
                                    int pageWidth = 72 * 4;
                                    if (printerWidth != null && !printerWidth.isEmpty()) {
                                        width[0] = parseInt(printerWidth);
                                        pageWidth = 72 * width[0];
                                    }

                                    int contentHeight = (int) Math.ceil(pageWidth * webViewArrayList.get(a).getMeasuredHeight() / webViewArrayList.get(a).getMeasuredWidth());

                                    // Create a PDF document
                                    PdfDocument document = new PdfDocument();
                                    PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                                    PdfDocument.Page page2 = document.startPage(pageInfo);

                                    // Draw the WebView content to the PDF page
                                    Canvas canvas = page2.getCanvas();
                                    float scale = (float) pageWidth / webViewArrayList.get(a).getWidth();
                                    canvas.scale(scale, scale);
                                    webViewArrayList.get(a).draw(canvas);
                                    document.finishPage(page2);

                                    document.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf"));
                                    document.close();


                                    int printSize = 1;

                                    if (PrintCopy != null && !PrintCopy.isEmpty() && !PrintCopy.equals("0")) {
                                        printSize = parseInt(PrintCopy);
                                    }

                                    //I assume for now its zebra only for now
                                    File file = new File(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf");
                                    if (file.exists()) {

                                        ParcelFileDescriptor pfd = ParcelFileDescriptor.open(
                                                file,
                                                ParcelFileDescriptor.MODE_READ_ONLY
                                        );

                                        PdfRenderer renderer = new PdfRenderer(pfd);
                                        int paperWidth = 576;
                                        if (width != null && !width.toString().isEmpty()) {
                                            paperWidth = 192 * width[0];
                                        }

                                        for (int j = 0; j < printSize; j++) {
                                            for (int i = 0; i < renderer.getPageCount(); i++) {
                                                PdfRenderer.Page page = renderer.openPage(i);
                                                int paperHeight = page.getHeight() * paperWidth / page.getWidth();
                                                Bitmap bmp = Bitmap.createBitmap(
                                                        paperWidth,
                                                        paperHeight,
                                                        Bitmap.Config.ARGB_8888
                                                );
                                                Canvas canvasWhite = new Canvas(bmp);
                                                canvasWhite.drawColor(Color.WHITE);
                                                page.render(
                                                        bmp,
                                                        null,
                                                        null,
                                                        PdfRenderer.Page.RENDER_MODE_FOR_PRINT
                                                );
                                                ZebraImageAndroid image = new ZebraImageAndroid(bmp);
                                                double llHeight = Math.ceil(paperHeight * 203 / 192);

                                                printer.sendCommand("^XA^LL" + llHeight + "^XZ");
                                                printer.printImage(image, 0, 0, paperWidth, paperHeight, false);
//                                                printer.sendCommand("^XA^FD  ^FS^XZ");
                                                bmp.recycle();
                                                page.close();
                                            }
                                        }

                                        renderer.close();
                                    }
                                }

                                con.close();
                                executeActionConfig("", AN_PrintSuccess, "");

                            } catch (ZebraPrinterLanguageUnknownException e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("ZebraPrinterLanguageUnknownException : " + e.getLocalizedMessage(), writer);

                            } catch (ConnectionException e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("ConnectionException : " + e.getLocalizedMessage(), writer);

                            } catch (IOException e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("IOException : " + e.getLocalizedMessage(), writer);

                            } catch (Exception e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("Exception : " + e.getLocalizedMessage(), writer);

                            }
                        });

                disposables.add(d);
            } else if (actionConfig.ActionPlan.equals("ZEBRA")) {

                Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                        .subscribeOn(Schedulers.io())
                        .observeOn(AndroidSchedulers.mainThread())
                        .subscribe(ignored -> {

                            try {

                                String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");
                                System.out.println("PrintCopy : " + PrintCopy);

                                String savedMac = da_dynamics.getMacAddress();
                                fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);
                                Connection con = new com.zebra.sdk.comm.BluetoothConnection(savedMac);
                                con.open();

//                                SGD.SET("device.languages", "ZPL", con);
                                printer = ZebraPrinterFactory.getInstance(con);
//                                printer.sendCommand("! U1 setvar \"device.languages\" \"zpl\"\r\n");


                                for (int a = 0; a < webViewArrayList.size(); a++) {

                                    //72 is 1 inch
                                    int pageWidth = 72 * 3;
                                    if (printerWidth != null && !printerWidth.isEmpty()) {
                                        width[0] = parseInt(printerWidth);
                                        pageWidth = 72 * width[0];
                                    }

                                    int contentHeight = (int) Math.ceil(pageWidth * webViewArrayList.get(a).getMeasuredHeight() / webViewArrayList.get(a).getMeasuredWidth());

                                    // Create a PDF document
                                    PdfDocument document = new PdfDocument();
                                    PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                                    PdfDocument.Page page2 = document.startPage(pageInfo);

                                    // Draw the WebView content to the PDF page
                                    Canvas canvas = page2.getCanvas();
                                    float scale = (float) pageWidth / webViewArrayList.get(a).getWidth();
                                    canvas.scale(scale, scale);
                                    webViewArrayList.get(a).draw(canvas);
                                    document.finishPage(page2);

                                    document.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf"));
                                    document.close();


                                    int printSize = 1;

                                    if (PrintCopy != null && !PrintCopy.isEmpty() && !PrintCopy.equals("0")) {
                                        printSize = parseInt(PrintCopy);
                                    }

                                    //I assume for now its zebra only for now
                                    File file = new File(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf");
                                    if (file.exists()) {

                                        ParcelFileDescriptor pfd = ParcelFileDescriptor.open(
                                                file,
                                                ParcelFileDescriptor.MODE_READ_ONLY
                                        );

                                        PdfRenderer renderer = new PdfRenderer(pfd);
                                        int paperWidth = 576;

                                        if (!width.toString().isEmpty()) {
                                            paperWidth = 192 * width[0];
                                        }

                                        for (int j = 0; j < printSize; j++) {
                                            for (int i = 0; i < renderer.getPageCount(); i++) {
                                                PdfRenderer.Page page = renderer.openPage(i);
                                                int paperHeight = page.getHeight() * paperWidth / page.getWidth();
                                                Bitmap bmp = Bitmap.createBitmap(
                                                        paperWidth,
                                                        paperHeight,
                                                        Bitmap.Config.ARGB_8888
                                                );
                                                Canvas canvasWhite = new Canvas(bmp);
                                                canvasWhite.drawColor(Color.WHITE);
                                                page.render(
                                                        bmp,
                                                        null,
                                                        null,
                                                        PdfRenderer.Page.RENDER_MODE_FOR_PRINT
                                                );
                                                ZebraImageAndroid image = new ZebraImageAndroid(bmp);
                                                double llHeight = Math.ceil(paperHeight * 203 / 192);


                                                printer.sendCommand("^XA^LL" + llHeight + "^XZ");
                                                printer.printImage(image, 0, 0, paperWidth, paperHeight, false);
//                                                printer.sendCommand("^XA^FD  ^FS^XZ");
                                                bmp.recycle();
                                                page.close();
                                            }
                                        }

                                        renderer.close();
                                    }
                                }

                                con.close();
                                executeActionConfig("", AN_PrintSuccess, "");

                            } catch (ZebraPrinterLanguageUnknownException e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("ZebraPrinterLanguageUnknownException : " + e.getLocalizedMessage(), writer);

                            } catch (ConnectionException e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("ConnectionException : " + e.getLocalizedMessage(), writer);

                            } catch (IOException e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("IOException : " + e.getLocalizedMessage(), writer);

                            } catch (Exception e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("Exception : " + e.getLocalizedMessage(), writer);

                            }
                        });

                disposables.add(d);
            } else if (actionConfig.ActionPlan.equalsIgnoreCase("DASCOM")) {
                runOnUiThread(() -> {
                    try {
                        if (progressdialog != null) {
                            progressdialog.cancel();
                            progressdialog.dismiss();
                            progressdialog = null;
                        }

                        progressdialog = new Dialog(MainActivity.this);
                        progressdialog.setContentView(R.layout.loading_dialog);
                        progressdialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                        progressdialog.setCancelable(false);
                        progressdialog.setCanceledOnTouchOutside(false);
                        progressdialog.getWindow().getAttributes().windowAnimations = R.style.animation;
                        progressdialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);

                        loadingProgress = progressdialog.findViewById(R.id.loadingProgress);
                        percentage = progressdialog.findViewById(R.id.percentage);

                        progressdialog.show();

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                });

                String savedMac = da_dynamics.getMacAddress();
                if (savedMac != null) {
                    if (!savedMac.isEmpty()) {
                        BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
                        BluetoothDevice bluetoothDevice =
                                bluetoothAdapter.getRemoteDevice(savedMac);
                        if (bluetoothDevice != null) {

                            Disposable disp = Single.fromCallable(() -> {
                                        if (connection == null) {
                                            connection = new BluetoothConnection(bluetoothDevice);
                                        }
                                        if (!connection.isConnected()) {
                                            connection.connect();
                                        }
                                        try {
                                            while (!connection.isConnected()) {
                                                Thread.sleep(100);
                                            }
                                            ZPL dascomPrint = new ZPL(connection);
                                            for (int a = 0; a < webViewArrayList.size(); a++) {
                                                //72 is 1 inch
                                                int pageWidth = 72 * 3;
                                                if (printerWidth != null && !printerWidth.isEmpty()) {
                                                    width[0] = parseInt(printerWidth);
                                                    pageWidth = 72 * width[0];
                                                }

                                                int contentHeight = (int) Math.ceil(pageWidth * webViewArrayList.get(a).getMeasuredHeight() / webViewArrayList.get(a).getMeasuredWidth());

                                                // Create a PDF document
                                                PdfDocument document = new PdfDocument();
                                                PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                                                PdfDocument.Page page2 = document.startPage(pageInfo);

                                                // Draw the WebView content to the PDF page
                                                Canvas canvas = page2.getCanvas();
                                                float scale = (float) pageWidth / webViewArrayList.get(a).getWidth();
                                                canvas.scale(scale, scale);
                                                webViewArrayList.get(a).draw(canvas);
                                                document.finishPage(page2);

                                                document.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf"));
                                                document.close();


                                                int printSize = 1;

                                                //I assume for now its zebra only for now
                                                File file = new File(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf");
                                                if (file.exists()) {
                                                    ParcelFileDescriptor pfd = ParcelFileDescriptor.open(
                                                            file, ParcelFileDescriptor.MODE_READ_ONLY
                                                    );
                                                    PdfRenderer renderer = new PdfRenderer(pfd);
                                                    for (int i = 0; i < renderer.getPageCount(); i++) {

                                                        PdfRenderer.Page page = renderer.openPage(i);
                                                        int width2 = (int) (65 * 203 / 25.4);
                                                        int height = page.getHeight() * width2 / page.getWidth();
                                                        Bitmap bitmap = Bitmap.createBitmap(width2, height, Bitmap.Config.ARGB_8888);
                                                        page.render(bitmap, null, null, PdfRenderer.Page.RENDER_MODE_FOR_PRINT);

                                                        try {
                                                            dascomPrint.printBitmap(0, 0, bitmap, true);
                                                        } catch (Exception e) {

                                                        }
//                                                        List<Bitmap> images = chunkImage(bitmap, bitmap.getHeight(), 500);
//                                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
//                                                            images.forEach(bitmap1 -> {
//                                                                try {
//                                                                    dascomPrint.printBitmap(0, 0, bitmap1, true);
//                                                                } catch (Exception e) {
//
//                                                                }
//                                                            });
//                                                        }
                                                        page.close();
                                                    }
                                                    renderer.close();
                                                }
                                            }
//                                connection.disconnect();
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                        return "success";
                                    }).subscribeOn(Schedulers.io())
                                    .observeOn(AndroidSchedulers.mainThread())
                                    .subscribe(result -> {
                                        fileHelper.fileWriter("result : " + result, writer);

                                        if (result.equals("success")) {
                                            if (progressdialog != null) {
                                                progressdialog.dismiss();
                                            }

                                            executeActionConfig("", AN_PrintSuccess, "");
                                        } else {
                                            if (progressdialog != null) {
                                                progressdialog.dismiss();
                                            }
                                            executeActionConfig("", AN_PrintFailed, "");
                                        }
                                    });
                            ;
                            disposables.add(disp);
                        }
                    }
                }
            } else {
                for (int i = 0; i < finalselectvalues.size(); i++) {

                    if (actionConfig.ActionPlan.equalsIgnoreCase("Woosim")) {
                        processData(i);
                    }

                }
            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DELETESYSCON)) {

            deletesysconfile();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DELETEPHOTO)) {

            deletePhotofile();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DELETEXML)) {
            deletexmlfile();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DELETESALESDB)) {
//            deleteSalesDB();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SHARE)) {

            for (int a = 0; a < webViewArrayList.size(); a++) {
                try {

                    PrintAttributes.Builder printAttributesBuilder = new PrintAttributes.Builder();
                    printAttributesBuilder.setMediaSize(PrintAttributes.MediaSize.ISO_A4); // Change this to your desired media size

                    int marginLeft = 0;
                    int marginTop = 0;
                    int marginRight = 0;
                    int marginBottom = 0;

                    PrintAttributes.Margins margins = new PrintAttributes.Margins(marginLeft, marginTop, marginRight, marginBottom);
                    printAttributesBuilder.setMinMargins(margins);
                    printAttributesBuilder.setResolution(new PrintAttributes.Resolution("RESOLUTION_ID", "RESOLUTION_ID", 100, 100));

                    PrintAttributes printAttributes = printAttributesBuilder.build();
                    PdfDocument pdfDocument = new PrintedPdfDocument(MainActivity.this, printAttributes);


                    // Create a PDF document
                    PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(webViewArrayList.get(a).getWidth(), webViewArrayList.get(a).getMeasuredHeight(), 1).create();
                    PdfDocument.Page page2 = pdfDocument.startPage(pageInfo);

                    // Draw the WebView content to the PDF page
                    Canvas canvas = page2.getCanvas();
                    webViewArrayList.get(a).draw(canvas);
                    pdfDocument.finishPage(page2);
                    try {
                        if (pdfFilename != null && !pdfFilename.isEmpty()) {
                            if (pdfFilename.get(a) != null) {
                                pdfDocument.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/" + pdfFilename.get(a) + ".pdf"));
                                pdfDocument.close();
                            } else {
                                String name = screen + "_ShareFilename";

                                System.out.println("name : " + name);
                                BE_QueryConfig queryConfigs = da_queryConfig.getQueryConfig(name);

                                if (queryConfigs.ScreenName.equalsIgnoreCase(name)) {
                                    System.out.println("query : " + queryConfigs);

                                    String completeQuery = ut_common.getQuery(queryConfigs, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                                    String fileName = da_dynamics.NoexecuteQuery(completeQuery);

                                    pdfDocument.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/" + fileName + ".pdf"));
                                    pdfDocument.close();

                                }
                            }
                        } else {
                            String name = screen + "_ShareFilename";

                            System.out.println("name : " + name);
                            BE_QueryConfig queryConfigs = da_queryConfig.getQueryConfig(name);

                            if (queryConfigs.ScreenName.equalsIgnoreCase(name)) {
                                System.out.println("query : " + queryConfigs);

                                String completeQuery = ut_common.getQuery(queryConfigs, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                                String fileName = da_dynamics.NoexecuteQuery(completeQuery);

                                pdfDocument.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/" + fileName + ".pdf"));
                                pdfDocument.close();

                            }

                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                        String name = screen + "_ShareFilename";
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }


            ArrayList<Uri> uriArrayList = new ArrayList<>();

            System.out.println("putParcelableArrayListExtra : " + finalselectvalues.size());
            System.out.println("pdfFilename : " + pdfFilename);

            if (!finalselectvalues.isEmpty()) {

                for (int i = 0; i < finalselectvalues.size(); i++) {

                    String file = fileHelper.getSalesDirectoryPath() + "/Report/" + pdfFilename.get(i) + ".pdf";
                    System.out.println("PDFPATH : " + file);
                    Uri photoURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".fileprovider", new File(file));
                    uriArrayList.add(photoURI);

                }
            } else {
                String name = screen + "_ShareFilename";

                System.out.println("name : " + name);
                BE_QueryConfig queryConfigs = da_queryConfig.getQueryConfig(name);

                if (queryConfigs.ScreenName.equalsIgnoreCase(name)) {
                    System.out.println("query : " + queryConfigs);

                    String completeQuery = ut_common.getQuery(queryConfigs, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    String fileName = da_dynamics.NoexecuteQuery(completeQuery);
                    String file = fileHelper.getSalesDirectoryPath() + "/Report/" + fileName + ".pdf";
                    System.out.println("PDFPATH : " + file);
                    Uri photoURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".fileprovider", new File(file));
                    uriArrayList.add(photoURI);
                }


            }

            Intent intent = new Intent(Intent.ACTION_SEND_MULTIPLE);
            intent.setType("application/pdf");
            intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, uriArrayList);
            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            startActivity(Intent.createChooser(intent, "Choose"));

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_REFRESHCONFIG)) {
            DA_ActionConfig da_actionConfig = new DA_ActionConfig(this);
            da_actionConfig_child = da_actionConfig.getActionConfigs(mScreenName, ut_sp.getStringValue(SP_ACCESS_LEVEL));
            fileHelper.fileWriter("REFRESHCONFIG Called", writer);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SOUNDPASS)) {
            ToneGenerator toneGen1 = new ToneGenerator(AudioManager.STREAM_MUSIC, 100);
            toneGen1.startTone(ToneGenerator.TONE_CDMA_ONE_MIN_BEEP, 150);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SOUNDFAIL)) {
            ToneGenerator toneGen1 = new ToneGenerator(AudioManager.STREAM_MUSIC, 100);
            toneGen1.startTone(ToneGenerator.TONE_CDMA_CALLDROP_LITE, 250);
            Toast.makeText(getApplicationContext(), "FAILED", Toast.LENGTH_SHORT).show();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATESERVERACCESS)) {

            String status = da_dynamics.getOfflineStatus();
            System.out.println("AT_UPDATESERVERACCESS :: " + status);


            UpdateToserver serverUpdate = new UpdateToserver(this, actionConfig, ut_sp, fileHelper);
            HashMap<String, String> rtn = new HashMap<>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("getUpdateserverConfigValues Query UPDATESERVERACCESS : " + completeQuery, writer);
                    rtn = da_dynamics.getUpdateserverConfigValues(completeQuery);
                }
            }
            fileHelper.fileWriter("getUpdateserverConfigValues value UPDATESERVERACCESS : " + rtn, writer);

            serverUpdate.ServercallAccess(rtn);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_AUTOSYNC)) {
            if (!NetworkUtil.isOnline(this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");
                progressdialog.dismiss();

                //   executeActionConfig(actionConfig.FieldName, AN_SyncFailed, "");
                NetworkUtil.showNoConnectionDialog(this);

            } else {

                String status = da_dynamics.getOfflineStatus();

                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_DataSyncSuccess, "");
                } else {
                    if (!actionConfig.ActionPlan.isEmpty()) {

                        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
                        String Query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        HashMap<String, String> MDT = new HashMap<>();
                        fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + Query, writer);
                        MDT = da_dynamics.LastDocNoexecuteQuery(Query);

                        ut_sp.setStringValue(UT_Constants.SQL_MDTNO, MDT.get(SQL_MDTNO));
                    }

                    ut_sp.setStringValue(ACTIONVALUE_DATASYNC, actionConfig.ActionValue);

                    int a = parseInt(actionConfig.ActionValue);
                    int b = 1000 * a;

                    t = new Timer();
                    t.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            DatasyncAsync dataSync = new DatasyncAsync(MainActivity.this, actionConfig.FieldName, POSTURL, da_queryConfig, ut_common, formValues, fileHelper);
                            dataSync.doSyncProcess();
                        }
                    }, 0, b);
                }
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_TIMERSTOP)) {
            System.out.println("TIMER STOP CALLED : " + countDownTimer);
            try {

                if (countDownTimer != null) {
                    countDownTimer.cancel();
                    countDownTimer = null;

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATEXMLFILE)) {
            updatexml();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_FINDBLUETOOTH)) {

            bluetoothFieldName = actionConfig.FieldName;

            if (Build.VERSION.SDK_INT >= 31) {

                String[] permission = new String[3];
                permission[0] = Manifest.permission.BLUETOOTH_SCAN;
                permission[1] = Manifest.permission.BLUETOOTH_CONNECT;
                permission[2] = Manifest.permission.ACCESS_FINE_LOCATION;
                int blueToothPermission = ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN);
                int blueToothPermission2 = ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT);
                int blueToothPermission3 = ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION);

                try {
                    if (broadcastReceiver != null) {
                        unregisterReceiver(broadcastReceiver);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }


                if (blueToothPermission != PackageManager.PERMISSION_GRANTED ||
                        blueToothPermission2 != PackageManager.PERMISSION_GRANTED ||
                        blueToothPermission3 != PackageManager.PERMISSION_GRANTED) {
                    // We don't have permission so prompt the user
                    ActivityCompat.requestPermissions(
                            this, permission, REQUEST_BLUETOOTH
                    );
                } else {
                    fileHelper.fileWriter("executeQuery Query : " + "delete from tbl_PrintBluetooth", writer);
                    da_dynamics.executeQuery("delete from tbl_PrintBluetooth");
                    broadcast = da_dynamics.getBroadcast();
                    System.out.println("BroadCast :: " + broadcast);
                    fileHelper.fileWriter("BroadCast : " + broadcast, writer);

                    IntentFilter filter = new IntentFilter();
                    filter.addAction(BluetoothDevice.ACTION_FOUND);
//                    filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);
//                    filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
                    filter.setPriority(100);


                    Set<BluetoothDevice> data = BluetoothUtils.getBondedDevices();
                    System.out.println("Bluetooth Data : " + data);

                    BluetoothAdapter BA = BluetoothAdapter.getDefaultAdapter();
                    BA.startDiscovery();


                    registerReceiver(broadcastReceiver, filter, Context.RECEIVER_VISIBLE_TO_INSTANT_APPS);

                }
            } else {
                fileHelper.fileWriter("executeQuery Query : " + "delete from tbl_PrintBluetooth", writer);
                da_dynamics.executeQuery("delete from tbl_PrintBluetooth");
                broadcast = da_dynamics.getBroadcast();
                System.out.println("BroadCast 22 :: " + broadcast);
                fileHelper.fileWriter("BroadCast : " + broadcast, writer);

                IntentFilter filter = new IntentFilter();
                if (broadcast.isEmpty()) {
                    filter.addAction(BluetoothDevice.ACTION_FOUND);
                } else {
                    for (int i = 0; i < broadcast.size(); i++) {
                        filter.addAction(broadcast.get(i).ActionName);
                    }
                }
                filter.setPriority(100);

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                    registerReceiver(broadcastReceiver, filter, Context.RECEIVER_NOT_EXPORTED);
                } else {
                    registerReceiver(broadcastReceiver, filter);
                }

                BluetoothAdapter BA = BluetoothAdapter.getDefaultAdapter();
                BA.startDiscovery();

                Set<BluetoothDevice> data = BluetoothUtils.getBondedDevices();

                System.out.println("Bluetooth data : " + data);


            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CLOSEALERTDIALOG)) {

            try {
                if (ut_dialog.dialogone.isShowing()) {
                    dialogShow = false;
                    ut_dialog.dialogone.dismiss();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if (ut_dialog.dialog.isShowing()) {
                    ut_dialog.dialog.dismiss();
                    alertdialogShow = false;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_PRINTJSON)) {
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQueryClean(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    if (query.DBName != null) {
                        ArrayList<String> map = da_dynamics.getJsonList(completeQuery);
                        System.out.println("map : " + map);
                        ArrayList<BE_Dascom1145> listPrint = new ArrayList<>();
                        for (int i = 0; i < map.size(); i++) {
                            String record = map.get(i);
                            Gson gson = new Gson();
                            BE_Dascom1145 person = gson.fromJson(record, BE_Dascom1145.class);
                            listPrint.add(person);
                        }
                        if (!listPrint.isEmpty()) {
                            ArrayList<ArrayList<BE_Dascom1145_Dtl>> groupDetails = new ArrayList<>();
                            ArrayList<BE_Dascom1145_Dtl> details = new ArrayList<>();
                            for (int i = 0; i < listPrint.size(); i++) {
                                String description = listPrint.get(i).getItemDesc();
                                int wordLength = 27;
                                if (description.length() < wordLength) {
                                    BE_Dascom1145_Dtl detail = new BE_Dascom1145_Dtl();
                                    detail.setItemAmount(listPrint.get(i).getItemAmount());
                                    detail.setItemDesc(listPrint.get(i).getItemDesc());
                                    detail.setItemNo(listPrint.get(i).getItemNo());
                                    detail.setItemPrice(listPrint.get(i).getItemPrice());
                                    detail.setItemQty(listPrint.get(i).getItemQty());
                                    if (details.size() >= printLine) {
                                        groupDetails.add(details);
                                        details = new ArrayList<>();
                                    }
                                    details.add(detail);
                                    detail = null;
                                } else {
                                    String[] words = description.split(" ");
                                    ArrayList<String> rows = new ArrayList<>();
                                    String row = "";
                                    for (int j = 0; j < words.length; j++) {
                                        String word = words[j];
                                        if (row.length() + word.length() < wordLength) {
                                            row += word + " ";
                                        } else {
                                            rows.add(row);
                                            row = word + " ";
                                        }
                                    }
                                    if (!row.isEmpty()) {
                                        rows.add(row);
                                    }
                                    if (details.size() + rows.size() > printLine) {
                                        groupDetails.add(details);
                                        details = new ArrayList<>();
                                    }
                                    for (int j = 0; j < rows.size(); j++) {
                                        if (j == 0) {
                                            BE_Dascom1145_Dtl detail = new BE_Dascom1145_Dtl();
                                            detail.setItemAmount(listPrint.get(i).getItemAmount());
                                            detail.setItemDesc(rows.get(j));
                                            detail.setItemNo(listPrint.get(i).getItemNo());
                                            detail.setItemPrice(listPrint.get(i).getItemPrice());
                                            detail.setItemQty(listPrint.get(i).getItemQty());
                                            details.add(detail);
                                            detail = null;
                                        } else {
                                            BE_Dascom1145_Dtl detail = new BE_Dascom1145_Dtl();
                                            detail.setItemAmount("");
                                            detail.setItemDesc(rows.get(j));
                                            detail.setItemNo("");
                                            detail.setItemPrice("");
                                            detail.setItemQty("");
                                            details.add(detail);
                                            detail = null;
                                        }
                                    }
                                }
                            }
                            groupDetails.add(details);
                            details = null;
                            BE_Dascom1145_Hdr hdr = new BE_Dascom1145_Hdr();
                            hdr.setDetail(groupDetails);
                            hdr.setInvoiceDO(listPrint.get(0).getInvoiceDO());
                            hdr.setInvoiceDate(listPrint.get(0).getInvoiceDate());
                            hdr.setInvoiceNumber(listPrint.get(0).getInvoiceNumber());
                            hdr.setTerms(listPrint.get(0).getTerms());
                            hdr.setTotal(listPrint.get(0).getTotal());
                            hdr.setSubTotal(listPrint.get(0).getSubTotal());
                            hdr.setAddGST(listPrint.get(0).getAddGST());
                            hdr.setCustomerID(listPrint.get(0).getCustomerID());
                            hdr.setSalesRepID(listPrint.get(0).getSalesRepID());
                            hdr.setDeli1(listPrint.get(0).getDeli1());
                            hdr.setDeli2(listPrint.get(0).getDeli2());
                            hdr.setDeli3(listPrint.get(0).getDeli3());
                            hdr.setDeli4(listPrint.get(0).getDeli4());
                            hdr.setSold1(listPrint.get(0).getSold1());
                            hdr.setSold2(listPrint.get(0).getSold2());
                            hdr.setSold3(listPrint.get(0).getSold3());
                            hdr.setSold4(listPrint.get(0).getSold4());
                            printDascomJson(hdr);
                        } else {
                            Toast.makeText(this, "No Data", Toast.LENGTH_SHORT).show();
                        }
                    }
                }
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SALESPRINT)) {

            WebView webView = new WebView(this);

            HtmlfileViewer htmlFile = new HtmlfileViewer();
            linesPrinted = htmlFile.htmlFileCreate2(MainActivity.this, mScreenName, printConfigs, printListConfig, da_dynamics, da_queryConfig, system, ut_common, formValues, selectedListValues, paramFormValues, paramSelectedListValues, fileHelper, 0, language, webView, (screenWidth / 100.0));

            try {

                String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");
                System.out.println("PrintCopy : " + PrintCopy);

                String savedMac = da_dynamics.getMacAddress();
                fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);
                Connection con = new com.zebra.sdk.comm.BluetoothConnection(savedMac);

                try {
                    con.open();
                    printer = ZebraPrinterFactory.getInstance(con);
                } catch (ConnectionException |
                         ZebraPrinterLanguageUnknownException e) {
                    e.printStackTrace();
                    executeActionConfig("", AN_PrintFailed, "");
                    fileHelper.fileWriter("ConnectionException : " + e.getLocalizedMessage(), writer);

                }

                //72 is 1 inch
                int pageWidth = 72 * 3;
                int contentHeight = (int) Math.ceil(pageWidth * webView.getMeasuredHeight() / webView.getMeasuredWidth());

                // Create a PDF document
                PdfDocument document = new PdfDocument();
                PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                PdfDocument.Page page2 = document.startPage(pageInfo);

                // Draw the WebView content to the PDF page
                Canvas canvas = page2.getCanvas();
                float scale = (float) pageWidth / webView.getWidth();
                canvas.scale(scale, scale);
                webView.draw(canvas);
                document.finishPage(page2);
                try {
                    document.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/SalesPrint.pdf"));
                    document.close();
                } catch (IOException e) {
                    e.printStackTrace();
                    fileHelper.fileWriter("IOException : " + e.getLocalizedMessage(), writer);
                }


                //I assume for now its zebra only for now
                File file = new File(fileHelper.getSalesDirectoryPath() + "/Report/SalesPrint.pdf");
                if (file.exists()) {
                    try {
                        if (PrintCopy != null) {
                            if (!PrintCopy.isEmpty() && !PrintCopy.trim().equals("0")) {

                                int printSize = parseInt(PrintCopy.trim());

                                for (int j = 0; j < printSize; j++) {
                                    ParcelFileDescriptor pfd = ParcelFileDescriptor.open(
                                            file,
                                            ParcelFileDescriptor.MODE_READ_ONLY
                                    );

                                    PdfRenderer renderer = new PdfRenderer(pfd);
                                    int paperWidth = 576;
                                    for (int i = 0; i < renderer.getPageCount(); i++) {
                                        PdfRenderer.Page page = renderer.openPage(i);
                                        int paperHeight = page.getHeight() * paperWidth / page.getWidth();
                                        Bitmap bmp = Bitmap.createBitmap(
                                                paperWidth,
                                                paperHeight,
                                                Bitmap.Config.ARGB_8888
                                        );
                                        Canvas canvasWhite = new Canvas(bmp);
                                        canvasWhite.drawColor(Color.WHITE);
                                        page.render(
                                                bmp,
                                                null,
                                                null,
                                                PdfRenderer.Page.RENDER_MODE_FOR_PRINT
                                        );
                                        ZebraImageAndroid image = new ZebraImageAndroid(bmp);
                                        double llHeight = Math.ceil(paperHeight * 203 / 192);
                                        printer.sendCommand("^XA^LL" + llHeight + "^XZ");
                                        printer.printImage(image, 0, 0, paperWidth, paperHeight, false);
                                        bmp.recycle();
                                        page.close();
                                    }
                                    renderer.close();
                                }


                            } else {
                                ParcelFileDescriptor pfd = ParcelFileDescriptor.open(
                                        file,
                                        ParcelFileDescriptor.MODE_READ_ONLY
                                );

                                PdfRenderer renderer = new PdfRenderer(pfd);
                                int paperWidth = 576;
                                for (int i = 0; i < renderer.getPageCount(); i++) {
                                    PdfRenderer.Page page = renderer.openPage(i);
                                    int paperHeight = page.getHeight() * paperWidth / page.getWidth();
                                    Bitmap bmp = Bitmap.createBitmap(
                                            paperWidth,
                                            paperHeight,
                                            Bitmap.Config.ARGB_8888
                                    );
                                    Canvas canvasWhite = new Canvas(bmp);
                                    canvasWhite.drawColor(Color.WHITE);
                                    page.render(
                                            bmp,
                                            null,
                                            null,
                                            PdfRenderer.Page.RENDER_MODE_FOR_PRINT
                                    );
                                    ZebraImageAndroid image = new ZebraImageAndroid(bmp);
                                    double llHeight = Math.ceil(paperHeight * 203 / 192);
                                    printer.sendCommand("^XA^LL" + llHeight + "^XZ");
                                    printer.printImage(image, 0, 0, paperWidth, paperHeight, false);
                                    bmp.recycle();
                                    page.close();
                                }
                                renderer.close();
                            }
                        } else {
                            ParcelFileDescriptor pfd = ParcelFileDescriptor.open(
                                    file,
                                    ParcelFileDescriptor.MODE_READ_ONLY
                            );

                            PdfRenderer renderer = new PdfRenderer(pfd);
                            int paperWidth = 576;
                            for (int i = 0; i < renderer.getPageCount(); i++) {
                                PdfRenderer.Page page = renderer.openPage(i);
                                int paperHeight = page.getHeight() * paperWidth / page.getWidth();
                                Bitmap bmp = Bitmap.createBitmap(
                                        paperWidth,
                                        paperHeight,
                                        Bitmap.Config.ARGB_8888
                                );
                                Canvas canvasWhite = new Canvas(bmp);
                                canvasWhite.drawColor(Color.WHITE);
                                page.render(
                                        bmp,
                                        null,
                                        null,
                                        PdfRenderer.Page.RENDER_MODE_FOR_PRINT
                                );
                                ZebraImageAndroid image = new ZebraImageAndroid(bmp);
                                double llHeight = Math.ceil(paperHeight * 203 / 192);
                                printer.sendCommand("^XA^LL" + llHeight + "^XZ");
                                printer.printImage(image, 0, 0, paperWidth, paperHeight, false);
                                bmp.recycle();
                                page.close();
                            }
                            renderer.close();
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                        executeActionConfig("", AN_PrintFailed, "");
                        fileHelper.fileWriter("Exception : " + e.getLocalizedMessage(), writer);

                    }
                }

                try {
                    con.close();
                    executeActionConfig("", AN_PrintSuccess, "");

                } catch (ConnectionException e) {
                    e.printStackTrace();
                    executeActionConfig("", AN_PrintFailed, "");
                    fileHelper.fileWriter("ConnectionException : " + e.getLocalizedMessage(), writer);

                }
            } catch (Exception e) {
                e.printStackTrace();
                executeActionConfig("", AN_PrintFailed, "");
                fileHelper.fileWriter("Final Exception : " + e.getLocalizedMessage(), writer);

            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_MANTIMER)) {

            BE_QueryConfig query = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
            String timeValue = da_dynamics.NoexecuteQuery(query.QueryText);

            actionValueforTimer = timeValue;

            if (!Settings.canDrawOverlays(this)) {
                Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:" + getPackageName()));
                startActivityForResult(intent, 10);
            } else {
                if (!mIsFloatingViewAttached) {
                    opentimer(timeValue);
                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DARKMODE)) {
            ut_sp.setStringValue("THEME", "DARK");
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_LIGHTMODE)) {
            ut_sp.setStringValue("THEME", "LIGHT");
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_TABREFRESH)) {
            try {
                getSupportFragmentManager().beginTransaction().detach(tabFragmentList.get(0)).commit();
                getSupportFragmentManager().beginTransaction().attach(tabFragmentList.get(0)).commit();

            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_MANTIMERSTOP)) {
            LocalBroadcastManager.getInstance(MainActivity.this).unregisterReceiver(timerBroadcastReceiver);
            stopService(new Intent(MainActivity.this, FloatingViewService.class));
            executeActionConfig("", AN_ManTimerEnd, "");

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHECKMOCKLOCATION)) {
            checkMockLocation();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_REFRESHMULTILINE)) {
            refreshMultiline(actionConfig);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_PHONE)) {
            try {
                BE_QueryConfig query = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
                String Query = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                String number = da_dynamics.NoexecuteQuery(Query);
                System.out.println("number : " + number);
                Intent callIntent = new Intent(Intent.ACTION_CALL);
                callIntent.setData(Uri.parse("tel:" + number));
                startActivity(callIntent);

            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_EXTERNALURL)) {
            openUrltobrowser(actionConfig);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_OPENGALARY)) {

            String[] opencameraSplit = actionConfig.ActionValue.split("[.]");

            String cameraIndex = opencameraSplit[1];

            if (opencameraSplit[0].equals("FormView")) {
                for (BE_FormConfig formConfig : formConfigs) {
                    if (formConfig.FieldName.equalsIgnoreCase(cameraIndex)) {

                        if (formConfig.FieldControl.equalsIgnoreCase(FC_TAKEPHOTO) || formConfig.FieldControl.equalsIgnoreCase(FC_IMAGE)) {

                            HashMap<String, String> rtn = new HashMap<>();
                            String screenSignature = screen + "_" + formConfig.FieldName + "_SAVEPHOTO";
                            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                            String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                            System.out.println("NameQuery : " + query);
                            fileHelper.fileWriter("getFormConfigValues Query : " + query, writer);
                            rtn = da_dynamics.getFormConfigValues(query);
                            if (!rtn.isEmpty()) {
                                formCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                                formValues.put(formConfig.FieldName.toUpperCase(), formCameraFilename);
                            }

                            photosavepath = formConfig.DataMemberType;
                            try {
                                imageTakePhoto = (ImageView) formContent.findViewWithTag(cameraIndex.toUpperCase());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                            intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, "image/*");
                            startActivityForResult(intent, PICK_IMAGE_REQUEST);
                        }

                    }
                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_POSTPLANOGRAM)) {
            callPlanogramApi(actionConfig);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATETRANSSERVICE)) {

            String selectTableName = actionConfig.ActionValue;
            String insertTablename = actionConfig.ActionFailedValue;

            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
            String Query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

            ArrayList<HashMap<String, String>> tableValues = new ArrayList<HashMap<String, String>>();
            tableValues = da_dynamics.getTableValues(Query);

            System.out.println("tableValues : " + tableValues);

            updateTransservice(tableValues, selectTableName, insertTablename, actionConfig.FieldName);


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_STARTDELAYTIME)) {

            int period = 10;
            if (!actionConfig.ActionValue.isEmpty()) {
                period = parseInt(actionConfig.ActionValue);
            }

            int milliseconds = 1000 * period;

            delayTimer = new Timer();
            delayTimer.schedule(new TimerTask() {
                @Override
                public void run() {
                    executeActionConfig(actionConfig.FieldName, actionConfig.ActionPlan, "");
                }
            }, 1000, milliseconds);


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_STOPDELAYTIME)) {
            try {
                if (delayTimer != null) {
                    delayTimer.cancel();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_Startlocationstream)) {
            Startlocationstream = true;
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_MAPWAYPOINT)) {

            for (BE_QueryConfig query : actionConfigQueries) {

                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    MapLatLongRtn = da_dynamics.getLatLongValues(completeQuery);

                    System.out.println("MapLatLongRtn 1 : " + MapLatLongRtn);
                    System.out.println("googleMap : " + googleMap);

                    if (googleMap != null) {
                        googleMap.applyWaypoint(MapLatLongRtn);
                    }

                }

            }

        } else if (actionConfig.ActionType.equals(AT_CHATAPICALL)) {
            chatAPICall(actionConfig);
        } else if (actionConfig.ActionType.equals(AT_SAVEREPORT)) {
            Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(ignored -> {
                        System.out.println("SAVED : ");
                        saveReport();
                    });
            disposables.add(d);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SAVESIGN)) {
            savesign(actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_AUTOLOGOUTCUTOFTIME)) {

            String cutOffTime = da_systemList.getSystemValue("select SystemValue from SystemList where Code = 'AUTOLOGOUTCUTOFTIME'");

            if (cutOffTime != null && !cutOffTime.isEmpty()) {
                AlarmScheduler alarmScheduler = new AlarmScheduler();
                alarmScheduler.scheduleMidnightAlarm(getApplicationContext(), cutOffTime);
            }


            AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
            if (alarmManager != null) {
                boolean canSchedule = false;
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                    canSchedule = alarmManager.canScheduleExactAlarms();
                }
                System.out.println("AlarmManager: " + canSchedule);
            } else {
                System.out.println("AlarmManager is null");
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATEAPK)) {

            try {
                for (BE_QueryConfig query : actionConfigQueries) {
                    if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                        String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        fileHelper.fileWriter("NoexecuteQuery Query : " + completeQuery, writer);
                        String updateUrl = da_dynamics.NoexecuteQuery(completeQuery);
                        System.out.println("updateUrl : " + updateUrl);
                        upgradeAppTask(updateUrl);
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        }


    }


    private void chatAPICall(BE_ActionConfig actionConfig) {
        for (BE_QueryConfig query : actionConfigQueries) {

            HashMap<String, String> rtn = null;
            if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                rtn = da_dynamics.getFormConfigValues(completeQuery);
            }

            System.out.println("rtn : " + rtn);

            if (rtn != null) {
                String question = rtn.get("Question".toUpperCase());
                String territory_id = rtn.get("territory_id".toUpperCase());
                String customer_name = rtn.get("customer_name".toUpperCase());


                JSONArray jsonArray = new JSONArray();
                jsonArray.put(territory_id);

                JSONArray jsonArray2 = new JSONArray();
                jsonArray2.put(customer_name);

                JSONObject paramObject = new JSONObject();
                try {
                    paramObject.put("query", question);
                    paramObject.put("territory_id", jsonArray);
                    paramObject.put("customer_no", jsonArray2);

                } catch (JSONException e) {
                    throw new RuntimeException(e);
                }

                System.out.println("paramObject : " + paramObject);

                String CHATURL = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'CHATURL'");

                System.out.println("baseURL : " + CHATURL);

                if (CHATURL == null || CHATURL.isEmpty()) {
                    CHATURL = RetrofitInterface.CHATURL;
                }

                System.out.println("baseURL : " + CHATURL);

                ProgressDialog dialog = new ProgressDialog(this);
                dialog.setMessage("Loading...");
                dialog.setCanceledOnTouchOutside(false);
                dialog.setCancelable(false);
                dialog.show();

                try {
                    HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();
                    interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);

                    OkHttpClient client = new
                            OkHttpClient.Builder().addInterceptor(interceptor)
                            .connectTimeout(30, TimeUnit.SECONDS)
                            .readTimeout(30, TimeUnit.SECONDS)
                            .build();

                    ConnectionPool pool = client.connectionPool();
                    pool.evictAll();

                    Retrofit retrofit = new Retrofit.Builder().addConverterFactory(GsonConverterFactory.create())
                            .baseUrl(CHATURL)
                            .client(client)
                            .build();

                    RetrofitInterface api = retrofit.create(RetrofitInterface.class);

                    RequestBody requestBody = RequestBody.create(MediaType.parse("text/json"), paramObject.toString());

                    Call<ChatModel> call = api.getChatResponce(requestBody);
                    call.enqueue(new Callback<ChatModel>() {
                        @Override
                        public void onResponse(Call<ChatModel> call, Response<ChatModel> response) {
                            dialog.dismiss();

                            System.out.println("Responce : " + response.body());
                            String result = response.body().getResult();
                            if (result.contains("'")) {
                                result = result.replace("'", "''");
                            }
                            formValues.put("CHATRESULT", result);
                            executeActionConfig(actionConfig.FieldName, "PostChatSuccess", "");

                        }

                        @Override
                        public void onFailure(Call<ChatModel> call, Throwable t) {
                            dialog.dismiss();
                            System.out.println("Response OnFail : " + t.getLocalizedMessage());
                            executeActionConfig(actionConfig.FieldName, "PostChatFailed", "");
                        }
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                    dialog.dismiss();
                    executeActionConfig(actionConfig.FieldName, "PostChatFailed", "");
                }

            }

        }

    }

    private void printMultiformat(String printerWidth, int[] width, String savedMac, ArrayList<WebView> webViewArrayList, BE_ActionConfig actionConfig) {

        //start print------------------------------
        ArrayList<String> filePaths2 = new ArrayList<>();
        try {
            System.out.println("webViewArrayList size 2 : " + webViewArrayList.size());
            for (int a = 0; a < webViewArrayList.size(); a++) {

                int pageWidth = 72 * 2;
                if (printerWidth != null && !printerWidth.isEmpty()) {
                    width[0] = parseInt(printerWidth);
                    pageWidth = 72 * width[0];
                }
                System.out.println("getMeasuredHeight : " + webViewArrayList.get(a).getMeasuredHeight());
                System.out.println("getMeasuredWidth : " + webViewArrayList.get(a).getMeasuredWidth());
                int contentHeight = (int) Math.ceil(pageWidth * webViewArrayList.get(a).getMeasuredHeight() / webViewArrayList.get(a).getMeasuredWidth());
                System.out.println("pageWidth : " + pageWidth);
                System.out.println("contentHeight : " + contentHeight);

                // Create a PDF document
                PdfDocument document = new PdfDocument();
                PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                PdfDocument.Page page2 = document.startPage(pageInfo);

                // Draw the WebView content to the PDF page
                Canvas canvas = page2.getCanvas();
                float scale = (float) pageWidth / webViewArrayList.get(a).getMeasuredWidth();
                canvas.scale(scale, scale);
                webViewArrayList.get(a).draw(canvas);
                document.finishPage(page2);

                document.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf"));
                document.close();
                File file = new File(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf");
                if (file.exists()) {
                    filePaths2.add(file.getPath());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            fileHelper.fileWriter("Printer Exception 1 : " + e.getLocalizedMessage(), writer);

        }
        fileHelper.fileWriter("Printer filePaths : " + filePaths2, writer);

        printESCPOS(savedMac, filePaths2, actionConfig, width[0]);

    }

    private void saveReport() {
        try {

            DA_System da_system = new DA_System(this);
            String printerWidth = da_system.getSystemvals("PrinterWidth");
            final int[] width = {3};

            System.out.println("webViewArrayList : " + webViewArrayList);

            for (int a = 0; a < webViewArrayList.size(); a++) {

                int pageWidth = 72 * 3;

                if (printerWidth != null && !printerWidth.isEmpty()) {
                    width[0] = parseInt(printerWidth);
                    pageWidth = 72 * width[0];
                }
                int contentHeight = (int) Math.ceil(pageWidth * webViewArrayList.get(a).getMeasuredHeight() / webViewArrayList.get(a).getMeasuredWidth());


                PrintAttributes.Builder printAttributesBuilder = new PrintAttributes.Builder();
                printAttributesBuilder.setMediaSize(PrintAttributes.MediaSize.ISO_A4); // Change this to your desired media size

                int marginLeft = 10;
                int marginTop = 10;
                int marginRight = 10;
                int marginBottom = 10;

                PrintAttributes.Margins margins = new PrintAttributes.Margins(marginLeft, marginTop, marginRight, marginBottom);
                printAttributesBuilder.setMinMargins(margins);
                printAttributesBuilder.setResolution(new PrintAttributes.Resolution("RESOLUTION_ID", "RESOLUTION_ID", 100, 100));

                PrintAttributes printAttributes = printAttributesBuilder.build();
                PdfDocument pdfDocument = new PrintedPdfDocument(MainActivity.this, printAttributes);

                // Create a PDF document
                PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                PdfDocument.Page page2 = pdfDocument.startPage(pageInfo);

                // Draw the WebView content to the PDF page
                Canvas canvas = page2.getCanvas();
                float scale = (float) pageWidth / webViewArrayList.get(a).getWidth();
                float scale2 = (float) contentHeight / webViewArrayList.get(a).getHeight();
                canvas.scale(scale, scale2);
                webViewArrayList.get(a).draw(canvas);
                pdfDocument.finishPage(page2);

                String imageName = "Report";
                System.out.println("pdfFilename : " + pdfFilename);

                try {
                    if (pdfFilename != null && !pdfFilename.isEmpty()) {
                        if (pdfFilename.get(a) != null) {
                            imageName = pdfFilename.get(a);
                        } else {
                            String name = screen + "_ShareFilename";

                            System.out.println("name : " + name);
                            BE_QueryConfig queryConfigs = da_queryConfig.getQueryConfig(name);

                            if (queryConfigs.ScreenName.equalsIgnoreCase(name)) {
                                System.out.println("query : " + queryConfigs);

                                String completeQuery = ut_common.getQuery(queryConfigs, null, formValues, selectedListValues, paramFormValues,
                                        paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                                String fileName = da_dynamics.NoexecuteQuery(completeQuery);

                                System.out.println("fileName : " + fileName);

                                imageName = fileName;

                            }
                        }
                    } else {
                        String name = screen + "_ShareFilename";

                        System.out.println("name : " + name);
                        BE_QueryConfig queryConfigs = da_queryConfig.getQueryConfig(name);

                        if (queryConfigs.ScreenName.equalsIgnoreCase(name)) {
                            System.out.println("query : " + queryConfigs);

                            String completeQuery = ut_common.getQuery(queryConfigs, null, formValues, selectedListValues, paramFormValues,
                                    paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                            String fileName = da_dynamics.NoexecuteQuery(completeQuery);

                            System.out.println("fileName 2 : " + fileName);

                            imageName = fileName;
                        }

                    }

                    System.out.println("Final imageName : " + imageName);

                    pdfDocument.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Photo/" + imageName + ".pdf"));
                    pdfDocument.close();

                } catch (IOException e) {
                    e.printStackTrace();
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }


    private void captureAndSaveImage(WebView webView, String imageName) {
        try {
            // Measure the WebView and layout its content to determine the bitmap size
            webView.measure(View.MeasureSpec.makeMeasureSpec(
                            View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED),
                    View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
            webView.layout(0, 0, webView.getMeasuredWidth(), webView.getMeasuredHeight());

            // Create a bitmap with the dimensions of the WebView
            Bitmap bitmap = Bitmap.createBitmap(
                    webView.getMeasuredWidth(),
                    webView.getMeasuredHeight(),
                    Bitmap.Config.ARGB_8888);

            // Draw the WebView onto the bitmap
            webView.draw(new Canvas(bitmap));

            // Save the bitmap to a file
            File imagePath = null;
            imagePath = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS) + "/" + imageName + ".png");

            saveBitmapToFile(bitmap, imagePath);

        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }


    private static void saveBitmapToFile(Bitmap bitmap, File file) {
        FileOutputStream out = null;
        try {
            out = new FileOutputStream(file);
            bitmap.compress(Bitmap.CompressFormat.PNG, 100, out); // PNG format with maximum quality
            Log.d("WebViewToImage", "Image saved at " + file.getAbsolutePath());
        } catch (IOException e) {
            Log.e("WebViewToImage", "Error saving image", e);
        } finally {
            try {
                if (out != null) {
                    out.close();
                }
            } catch (IOException e) {
                Log.e("WebViewToImage", "Error closing output stream", e);
            }
        }
    }


    private void updateTransservice(ArrayList<HashMap<String, String>> tableValues, String selectTableName, String insertTablename, String fieldName) {

        try {
            da_dynamics_syscon.executeQuery("Delete from " + insertTablename);
            String keys = "";
            String values = "";
            for (HashMap<String, String> map : tableValues) {
                for (String key : map.keySet()) {
                    if (keys.isEmpty()) {
                        keys = key;
                    } else {
                        keys = keys + "," + key;
                    }
                }

                break;
            }

            String[] keyone = keys.split(",");

            for (HashMap<String, String> map : tableValues) {
                values = "";
                for (String key1 : keyone) {
                    if (values.isEmpty()) {
                        values = "'" + map.get(key1) + "'";
                    } else {
                        values = values + ",'" + map.get(key1) + "'";
                    }
                }
                String query = "INSERT INTO " + insertTablename + " (" + keys + ") VALUES (" + values + ")";
                fileHelper.fileWriter("UPDATETRANSSERVICE query : " + query, writer);
                int result = da_dynamics_syscon.executeQuery(query);
                if (result != 0) {
                    executeActionConfig(fieldName, AN_UPDATETRANSSERVICEFAILED, "");
                    break;
                }
            }


        } catch (Exception e) {
            e.printStackTrace();
            executeActionConfig(fieldName, AN_UPDATETRANSSERVICEFAILED, "");
        }


    }

    private void callPlanogramApi(BE_ActionConfig actionConfig) {

        String PLANOGRAMURL = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PLANOGRAMURL'");

        System.out.println("baseURL : " + PLANOGRAMURL);

        if (PLANOGRAMURL == null || PLANOGRAMURL.isEmpty()) {
            PLANOGRAMURL = RetrofitInterface.URL;
        }

        System.out.println("baseURL : " + PLANOGRAMURL);

        ProgressDialog dialog = new ProgressDialog(this);
        dialog.setMessage("Loading...");
        dialog.setCanceledOnTouchOutside(false);
        dialog.setCancelable(false);
        dialog.show();
        try {
            HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();
            interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);

            OkHttpClient client = new
                    OkHttpClient.Builder().addInterceptor(interceptor)
                    .connectTimeout(15, TimeUnit.SECONDS)
                    .readTimeout(15, TimeUnit.SECONDS)
                    .build();

            ConnectionPool pool = client.connectionPool();
            pool.evictAll();

            Retrofit retrofit = new Retrofit.Builder().addConverterFactory(GsonConverterFactory.create())
                    .baseUrl(PLANOGRAMURL)
                    .client(client)
                    .build();

            RetrofitInterface api = retrofit.create(RetrofitInterface.class);

            RequestBody requestBody = RequestBody.create(MediaType.parse("image/*"), masterImage);

            MultipartBody.Part masterimage = MultipartBody.Part.createFormData("master_planogram", masterImageName, requestBody);

            RequestBody requestBody2 = RequestBody.create(MediaType.parse("image/*"), transImage);

            MultipartBody.Part uploadimage = MultipartBody.Part.createFormData("image_to_score", transImageName, requestBody2);


            Call<ResponseModel> call = api.getResponse(uploadimage, masterimage);
            call.enqueue(new Callback<ResponseModel>() {
                @Override
                public void onResponse(Call<ResponseModel> call, Response<ResponseModel> response) {
                    dialog.dismiss();

                    System.out.println("Responce : " + response.body());
                    fileHelper.fileWriter("Responce : " + response.body().getStatus(), writer);

                    try {
                        if (response.body().getStatus().equalsIgnoreCase("success")) {

                            byte[] imageBytes = Base64.decode(response.body().getAnnotated_planogram(), Base64.DEFAULT);
                            InputStream in = new ByteArrayInputStream(imageBytes);
                            Bitmap bitmap = BitmapFactory.decodeStream(in);
                            formValues.put("PlanogramImageName".toUpperCase(), "FinalPlanogramImage.PNG");
                            fileHelper.saveTakePhoto(bitmap, "FinalPlanogramImage.PNG", fileHelper.getSalesDirectoryPath() + "/Photo/");

                            try {
                                String input = response.body().getScore();
                                double number = Double.parseDouble(input);
                                double b = number * 100;
                                int a = (int) b;
                                formValues.put("Score".toUpperCase(), a + "");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            executeActionConfig(actionConfig.FieldName, "PostPlanogramSuccess", "");

                        } else {
                            executeActionConfig(actionConfig.FieldName, "PostPlanogramFailed", "");

                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                        fileHelper.fileWriter("Exception one : " + e.getLocalizedMessage(), writer);
                        executeActionConfig(actionConfig.FieldName, "PostPlanogramFailed", "");
                    }

                }

                @Override
                public void onFailure(Call<ResponseModel> call, Throwable t) {
                    dialog.dismiss();
                    System.out.println("Response OnFail : " + t.getLocalizedMessage());
                    fileHelper.fileWriter("Response OnFail : " + t.getLocalizedMessage(), writer);
                    executeActionConfig(actionConfig.FieldName, "PostPlanogramFailed", "");
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            dialog.dismiss();
            fileHelper.fileWriter("Exception TWO : " + e.getLocalizedMessage(), writer);
            executeActionConfig(actionConfig.FieldName, "PostPlanogramNoImage", "");
        }

    }


    public void doActionTypeChild(String FieldName, BE_ActionConfig actionConfig, String mScreenName) {

        System.out.println("ACTION TYPE : " + actionConfig.ActionType);
        fileHelper.fileWriter("ACTION TYPE : " + actionConfig.ActionType, writer);


        if (actionConfig.ActionType.equalsIgnoreCase(AT_FORM)) {

            timer3 = new Timer();
            timer3.schedule(new TimerTask() {
                @Override
                public void run() {
                    System.gc();
                    deleteCache(getApplicationContext());
                }
            }, 0, 300000);


            AppBarShow = actionConfig.ActionPlan;

            if (actionConfig.ActionValue.contains("{")) {

                int start = actionConfig.ActionValue.indexOf("{");
                int end;
                String key;
                end = actionConfig.ActionValue.indexOf("}");
                key = actionConfig.ActionValue.substring(start + 1, end);
                System.out.println("KEY123 : " + key);
                System.out.println("start : " + start);

                String query = ut_common.getQueryForm(actionConfig.ActionValue, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                System.out.println(" FORM QUERY : " + query);
                query = query.replace("'", "");

                goToForm(actionConfig.ActionPlan, query);


//                if (start == 0) {
//                    goToForm(actionConfig.ActionPlan, selectedListValues.get(key.split("[.]")[1].toUpperCase()));
////                    goToForm(actionConfig.ActionPlan, query);
//                } else {
//                    goToForm(actionConfig.ActionPlan, actionConfig.ActionValue.split(" ")[0] + " " + selectedListValues.get(key.split("[.]")[1].toUpperCase()));
////                    goToForm(actionConfig.ActionPlan, actionConfig.ActionValue.split(" ")[0] + " " + query);
//                }

            } else {
                goToForm(actionConfig.ActionPlan, actionConfig.ActionValue);

            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CLEARFORMFIELDS)) {

            for (int i = 0; i < formConfigs.size(); i++) {

                if (screen.contains("FORM-LOGIN")) {

                    if (ut_sp.getStringValue(UT_Constants.XML_SOLUTION_NAME).equalsIgnoreCase("WMS")) {
                        if (formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_PASSWORD)
                                || formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_TEXT_BOX)) {
                            View view = formContent.findViewWithTag(formConfigs.get(i).FieldName.toUpperCase());

                            if (view instanceof CheckBox) {
                                CheckBox checkBox = (CheckBox) view;
                                checkBox.setChecked(false);

                            } else if (view instanceof MaterialButton) {
                                MaterialButton button = (MaterialButton) view;
                                //   button.setText("");

                            } else if (view instanceof TextInputEditText) {
                                EditText textView = (EditText) view;
                                textView.setText("");

                            } else if (view instanceof MaterialEditText) {
                                MaterialEditText editText = (MaterialEditText) view;
                                editText.setValue("");
                                formValues.put(view.getTag().toString(), "");

                            } else if (view instanceof MaterialEditText_back) {
                                MaterialEditText_back editText = (MaterialEditText_back) view;
                                editText.setValue("");
                                formValues.put(view.getTag().toString(), "");

                            } else if (view instanceof EditText) {
                                EditText editText = (EditText) view;
                                editText.setText("");

                            } else if (view instanceof AutoCompleteTextView) {
                                AutoCompleteTextView editText = (AutoCompleteTextView) view;
                                editText.setText("");
                            } else if (view instanceof MaterialEditTextPassword) {
                                MaterialEditTextPassword editText = (MaterialEditTextPassword) view;
                                editText.setText("");
                            }
                            try {
                                formValues.put(formConfigs.get(i).FieldName.toUpperCase(), "");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }
                    } else {

                        if (formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_PASSWORD)) {
                            View view = formContent.findViewWithTag(formConfigs.get(i).FieldName.toUpperCase());

                            if (view instanceof CheckBox) {
                                CheckBox checkBox = (CheckBox) view;
                                checkBox.setChecked(false);

                            } else if (view instanceof MaterialButton) {
                                MaterialButton button = (MaterialButton) view;
                                //   button.setText("");

                            } else if (view instanceof TextInputEditText) {
                                EditText textView = (EditText) view;
                                textView.setText("");

                            } else if (view instanceof MaterialEditText) {
                                MaterialEditText editText = (MaterialEditText) view;
                                editText.setValue("");
                                formValues.put(view.getTag().toString(), "");

                            } else if (view instanceof MaterialEditText_back) {
                                MaterialEditText_back editText = (MaterialEditText_back) view;
                                editText.setValue("");
                                formValues.put(view.getTag().toString(), "");

                            } else if (view instanceof EditText) {
                                EditText editText = (EditText) view;
                                editText.setText("");

                            } else if (view instanceof AutoCompleteTextView) {
                                AutoCompleteTextView editText = (AutoCompleteTextView) view;
                                editText.setText("");
                            } else if (view instanceof MaterialEditTextPassword) {
                                MaterialEditTextPassword editText = (MaterialEditTextPassword) view;
                                editText.setText("");
                            }

                            try {
                                formValues.put(formConfigs.get(i).FieldName.toUpperCase(), "");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }
                    }
                } else {
                    if (formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_TEXT_BOX) || formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_TEXTAREA) || formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_PASSWORD)) {

                        View view = formContent.findViewWithTag(formConfigs.get(i).FieldName.toUpperCase());

                        if (view instanceof CheckBox) {
                            CheckBox checkBox = (CheckBox) view;
                            checkBox.setChecked(false);

                        } else if (view instanceof MaterialButton) {
                            MaterialButton button = (MaterialButton) view;
                            //   button.setText("");

                        } else if (view instanceof TextInputEditText) {
                            EditText textView = (EditText) view;
                            textView.setText("");
                            formValues.put(view.getTag().toString(), "");

                        } else if (view instanceof EditText) {
                            EditText editText = (EditText) view;
                            editText.setText("");

                        } else if (view instanceof AutoCompleteTextView) {
                            AutoCompleteTextView editText = (AutoCompleteTextView) view;
                            editText.setText("");
                        } else if (view instanceof MaterialEditTextPassword) {
                            MaterialEditTextPassword editText = (MaterialEditTextPassword) view;
                            editText.setText("");
                        }
                        try {
                            formValues.put(formConfigs.get(i).FieldName.toUpperCase(), "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    } else if (formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_DATEPICKER) || formConfigs.get(i).FieldControl.equalsIgnoreCase(FC_LABEL)) {
                        View view = formContent.findViewWithTag(formConfigs.get(i).FieldName.toUpperCase());
                        if (view instanceof TextInputEditText) {
                            TextView textView = (TextView) view;
                            textView.setText("");

                        }
                        try {
                            formValues.put(formConfigs.get(i).FieldName.toUpperCase(), "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_EXECUTE)) {

            executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_EXECUTE_LIST)) {

            executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_EXECUTE_JAVASCRIPT)) {

            if (webViewJavaScript == null) {
                webViewJavaScript = findViewById(R.id.webView);
            }

            webViewJavaScript.addJavascriptInterface(new WebAppInterface(MainActivity.this, formValues, selectedListValues, paramFormValues,
                    paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, da_dynamics), "app");

            webViewJavaScript.getSettings().setJavaScriptEnabled(true);
            webViewJavaScript.loadUrl("file:///android_asset/rad-bk.html");
//            webViewJavaScript.loadUrl("file:///android_asset/rad-bk24122024(2).html");

            if (actionConfig.ActionValue != null && !actionConfig.ActionValue.isEmpty()) {
                jsFieldname = actionConfig.ActionValue;
            } else {
                jsFieldname = actionConfig.FieldName;
            }


            int start = actionConfig.ActionPlan.indexOf("{");
            int end;
            String key;
            int trial = 0;
            String actionvalue = null;
            //  while (start > -1 && trial < 100) {
            end = actionConfig.ActionPlan.indexOf("}");
            key = actionConfig.ActionPlan.substring(start + 1, end);

            String rtn = "";
            String split[] = actionConfig.ActionPlan.split("\\(", 2);
            String valueSplit[] = split[1].split(",");
            ArrayList<String> listView = new ArrayList<>();
            System.out.println("valueSplit:" + valueSplit.toString());
            fileHelper.fileWriter("valueSplit : " + valueSplit.toString(), writer);
            for (String item : valueSplit) {
                System.out.println("valueSplit:" + item);
                String value = item.substring(1, item.length() - 1);
                listView.add(value);
            }


            if (formValues != null) {
                Log.i("Execute Java Script", split[0]);
                System.out.println("Java Scrip:" + formValues);
                System.out.println("Java Scrip:" + selectedListValues);
                String finalvalue = "";
                String value = "";
                for (int b = 0; b < listView.size(); b++) {
                    String[] temp = listView.get(b).split("[.]");
                    if (temp.length > 1) {
                        System.out.println("Javascript:" + temp[0] + " " + temp[1]);
                        if (temp[0].equalsIgnoreCase("FormView")) {
                            System.out.println("Javascript:" + temp[1]);
                            String value2 = temp[1].toUpperCase();
                            if (temp[1].toUpperCase().contains("}")) {
                                value2 = temp[1].toUpperCase().replace("}", "");
                            }
                            value = addSingleQuote(formValues.get(value2));
                            System.out.println("Java Script formValues :" + formValues.get(value2));

                        } else if (temp[0].equalsIgnoreCase("ListView")) {
                            String value2 = temp[1].toUpperCase();
                            if (temp[1].toUpperCase().contains("}")) {
                                value2 = temp[1].toUpperCase().replace("}", "");
                            }
                            value = addSingleQuote(selectedListValues.get(value2));
                            System.out.println("Java Script value2 :" + value2);
                            System.out.println("Java Script selectedListValues :" + selectedListValues);
                        } else if (temp[0].equalsIgnoreCase("System")) {

                            ArrayList<BE_SystemList> systemLists2 = new ArrayList<>();
                            DA_System da_system2 = new DA_System(this);
                            systemLists2 = da_system2.getSystems();

                            for (int i = 0; i < systemLists2.size(); i++) {
                                if (systemLists2.get(i).Code.equalsIgnoreCase(temp[1].toString())) {
                                    value = addSingleQuote(systemLists2.get(i).SystemValue);
                                }
                            }

                        } else if (temp[0].equalsIgnoreCase("SystemList")) {
                            String values = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = '" + temp[1] + "'");
                            value = addSingleQuote(values);
                        }
                        if (finalvalue.isEmpty()) {
                            finalvalue = value;
                        } else {
                            finalvalue = finalvalue + "," + value;
                        }
                    }
                }

                fileHelper.fileWriter("Execute JavaScript: " + split[0] + "(" + finalvalue + ")", writer);
                Log.i("Execute Java Script", split[0] + "(" + finalvalue + ")");
                webViewJavaScript.loadUrl("javascript:window.app.setResult(" + split[0] + "(" + finalvalue + "))");
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATEDOCNO)) {

            ut_common.updateDocNo();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CLEARSIGN)) {

            doClearSignature(actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ALERT)) {

            actionPerformed = true;
            showAlert(FieldName, actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_VALIDATE)) {

            validateCondition(FieldName, actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_REMOVEBACKSTACK)) {
            String[] screenList = actionConfig.ActionPlan.split(",");
            for (String name : screenList) {
                removeStack(name);
            }
            bCancel = true;

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_BACK)) {

            if (mScreenName.equalsIgnoreCase("FORM-LOGOFF")) {
                for (String name : hasStack(mScreenName)) {
                    removeStack(name);
                }
            }

            if (mScreenName.contains("Form-LOGIN") || actionConfig.ActionValue.equalsIgnoreCase("AppClose")) {
                finishAffinity();
            } else if (actionConfig.ActionPlan != null && !actionConfig.ActionPlan.isEmpty()) {
                ArrayList<String> screenList = new ArrayList<>();
                for (BE_QueryConfig query : actionConfigQueries) {
                    if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                        String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        screenList = da_dynamics_syscon.showFormFielfdexecuteQuery(completeQuery);
                    }
                }

                fileHelper.fileWriter("Screen NameList : " + screenList, writer);
                String nameList = "";
                for (int i = 0; i < screenList.size(); i++) {
                    if (nameList.isEmpty()) {
                        nameList = screenList.get(i);
                    } else {
                        nameList = nameList + " , " + screenList.get(i);
                    }
                }

                ut_sp.setStringValue(SP_BACK_SCREENNAME, nameList);

                for (String name : screenList) {
                    removeStack(name);
                }

                finish();

            } else {
                finish();
                overridePendingTransition(0, 0);
            }


            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CANCEL)) {

            bCancel = true;
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_QRCODE)) {

            callQRCode(actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_REFRESHSYSTEM)) {

            ut_sp.readSystemConfig(true);
            fileHelper.fileWriter("REFRESHSYSTEM Called", writer);

            readMessageConfig();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_READONLYENABLE)) {

            ReadOnlyEnableDisble(actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_READONLYDISABLE)) {

            ReadOnlyEnableDisble(actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_STARTCAPTUREGPS)) {
            LocationManager lm = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
            boolean gps_enabled = false;
            try {
                gps_enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);
            } catch (Exception ex) {
            }
            String gpsIntervalCode = "GPS   Interval";

            DA_SystemList da_systemList = new DA_SystemList(this);

            BE_SystemList systemList = da_systemList.getSystemList(gpsIntervalCode);

            if (!systemList.SystemValue.equals("0") && !systemList.SystemValue.equals("null")) {

                if (boolean_permission) {
                    Intent intent = new Intent(getApplicationContext(), GpsLocationService.class);
                    startService(intent);

                } else {

                    Toast.makeText(getApplicationContext(), "Please enable the gps", Toast.LENGTH_SHORT).show();

                }
                fn_permission();

            }
            Log.v("Res GPs", AT_STARTCAPTUREGPS);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ENDCAPTUREGPS)) {
            Log.v("Res GPs", AT_ENDCAPTUREGPS);
            Intent intent = new Intent(this, GpsLocationService.class);
            stopService(intent);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SETTIMER)) {

            /*timer = new Timer();
            int settime = Integer.parseInt(actionConfig.ActionValue) * 6000;

            timer.scheduleAtFixedRate(new TimerTask() {
                @Override
                public void run() {

                    executeActionConfig(actionConfig.ActionPlan, AN_SETTIMERCALLED, "");

                }
            }, Long.parseLong(actionConfig.ActionValue), settime);
*/
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_BULKINSERT)) {

            String[] List = new String[0];

            if (actionConfig.ActionPlan != null) {

                List = actionConfig.ActionPlan.split(",");

            }

            for (String queryname : List) {

                executeQuery(queryname, FieldName, actionConfig);

            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_GOTOLOGIN)) {
            //     finish();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_AUTOLOGOUT)) {

            finish();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CLEARTIMER)) {

            if (timer != null) {
                timer.cancel();
                timer = null;
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_OPENCAMERA)) {

            String[] opencameraSplit = actionConfig.ActionValue.split("[.]");

            String cameraIndex = opencameraSplit[1];

            System.out.println("cameraIndex : " + cameraIndex);
            System.out.println("cameraIndex opencameraSplit : " + opencameraSplit[0]);

            if (opencameraSplit[0].equals("FormView")) {
                for (BE_FormConfig formConfig : formConfigs) {
                    if (formConfig.FieldName.equalsIgnoreCase(cameraIndex)) {

                        if (formConfig.FieldControl.equalsIgnoreCase(FC_TAKEPHOTO) || formConfig.FieldControl.equalsIgnoreCase(FC_IMAGE)) {

                            HashMap<String, String> rtn = new HashMap<>();
                            String screenSignature = mScreenName + "_" + formConfig.FieldName + "_SAVEPHOTO";
                            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                            String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                            System.out.println("NameQuery : " + query);
                            fileHelper.fileWriter("getFormConfigValues Query : " + query, writer);
                            rtn = da_dynamics.getFormConfigValues(query);
                            if (!rtn.isEmpty()) {
                                formCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                                formValues.put(formConfig.FieldName.toUpperCase(), formCameraFilename);
                            }

                            photosavepath = formConfig.DataMemberType;
                            if (!screen.contains("View Document")) {
                                startCamera(cameraIndex, formCameraFilename);
                            }
                        }

                    }
                }
            } else if (opencameraSplit[0].equals("Menu")) {

                HashMap<String, String> rtn = new HashMap<>();
                String screenSignature = mScreenName + "_" + actionConfig.FieldName + "_SAVEPHOTO";
                BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                System.out.println("NameQuery : " + query);
                fileHelper.fileWriter("getFormConfigValues Query : " + query, writer);
                rtn = da_dynamics.getFormConfigValues(query);
                if (!rtn.isEmpty()) {
                    formCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                    formValues.put(actionConfig.FieldName.toUpperCase(), formCameraFilename);
                }
                startMenuCamera(cameraIndex, formCameraFilename);
            } else {
                startListviewCamera(cameraIndex, listCameraFilename);
            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_FOCUS)) {

            Focus = true;

            EditText editText = (EditText) EditTextView;

            editText.setCursorVisible(true);

            editText.setFocusable(true);

            editText.requestFocus();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHECKLOCATION)) {

            CheckLocation checkLocation = new CheckLocation();
            checkLocation.checkLocation(MainActivity.this, actionConfig, ut_sp, formValues);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATEFOOTER)) {

            HashMap<String, String> rtn = new HashMap<String, String>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + completeQuery, writer);

                    rtn = da_dynamics.LastDocNoexecuteQuery(completeQuery);

                }
            }

            System.out.println("UPDATEFOOTER : " + rtn);
            fileHelper.fileWriter("UPDATEFOOTER : " + rtn, writer);

            updateFormValues(rtn, formContent, FieldName, listBottomvalue);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SHOWINDICATOR)) {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    try {
                        if (progressdialog != null) {
                            progressdialog.cancel();
                            progressdialog.dismiss();
                            progressdialog = null;
                        }

                        progressdialog = new Dialog(MainActivity.this);
                        progressdialog.setContentView(R.layout.loading_dialog);
                        progressdialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                        progressdialog.setCancelable(false);
                        progressdialog.setCanceledOnTouchOutside(false);
                        progressdialog.getWindow().getAttributes().windowAnimations = R.style.animation;
                        progressdialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);

                        loadingProgress = progressdialog.findViewById(R.id.loadingProgress);
                        percentage = progressdialog.findViewById(R.id.percentage);

                        progressdialog.show();
                        indicatorShow = true;

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
            });
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_HIDEINDICATOR)) {

            try {
                if (progressdialog != null) {
                    progressdialog.dismiss();
                }

                indicatorShow = false;
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SHOWPROGRESS)) {
            String message = "";
            if (!messageConfigs.isEmpty()) {
                for (BE_MessageConfig msg : messageConfigs) {
                    if (msg.MessageCode.toUpperCase().equals(actionConfig.ActionPlan.toUpperCase())) {
                        message = msg.MessageText;
                        break;
                    }
                }
            }

            if (message.equals("")) {
                message = actionConfig.ActionPlan;
            }

            if (message.contains(SQL_FORMVIEW)) {
                int firstBracket = message.indexOf('{');
                String contentOfBrackets = message.substring(firstBracket + 1, message.indexOf('}', firstBracket));
                String[] temp = contentOfBrackets.split("[.]");
                if (formValues.get(temp[1].toUpperCase()) != null) {
                    String value = formValues.get(temp[1].toUpperCase());
                    message = message.replace("{" + contentOfBrackets + "}", value);

                }
            }

            if (actionConfig.ActionPlan.contains("{")) {
                int start = actionConfig.ActionPlan.indexOf("{");
                int end;
                String key;
                int trial = 0;
                String actionvalue = null;
                while (start > -1 && trial < 100) {
                    end = actionConfig.ActionPlan.indexOf("}");
                    key = actionConfig.ActionPlan.substring(start + 1, end);
                    actionConfig.ActionPlan = actionConfig.ActionPlan.replace("{" + key + "}", addSingleQuote(ut_sp.getStringValue(key)));
                    start = actionConfig.ActionPlan.indexOf("{");
                    trial++;
                }

                message = actionConfig.ActionPlan;

            } else if (actionConfig.ActionPlan.contains("Result") && actionConfig.ActionPlan.contains("'")) {
                message = actionConfig.ActionPlan;

                String[] split = message.split("'");
                message = split[0] + "'" + ut_sp.getStringValue(SQL_JAVASCRIPTRESULT) + "'";

            }

            if (actionConfig.ActionPlan.toUpperCase().startsWith("SELECT_")) {

                HashMap<String, String> rtn = new HashMap<>();
                for (BE_QueryConfig query : actionConfigQueries) {
                    if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                        String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        if (query.DBName != null) {
                            if (query.DBName.equalsIgnoreCase(SYSCONDB)) {
                                //     rtn = da_dynamics_syscon.LastDocNoexecuteQuery(completeQuery);
                            } else {
                                fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + completeQuery, writer);
                                rtn = da_dynamics.LastDocNoexecuteQuery(completeQuery);
                            }
                        }
                    }
                }
                if (!rtn.isEmpty()) {
                    message = rtn.get("Resultmessage".toUpperCase()).toString();
                }


            }


            ut_dialog.showProgressDialog(MainActivity.this, message);
            progressShow = true;

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_HIDEPROGRESS)) {

            try {
                ut_dialog.dialogProgress.dismiss();
            } catch (Exception e) {
                e.printStackTrace();
            }

            executeActionConfig("", actionConfig.ActionValue, "");

            progressShow = false;

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DOWNLOADTRANSCONFIG)) {

            if (!NetworkUtil.isOnline(MainActivity.this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");

                if (progressdialog != null) {
                    progressdialog.dismiss();
                }

            } else {

                String status = da_dynamics.getOfflineStatus();

                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_returnGetServiceEnd, "");
                } else {
                    transFieldname = actionConfig.FieldName;
                    String screenName = mScreenName;
                    if (!actionConfig.ActionValue.isEmpty()) {
                        screenName = actionConfig.ActionValue;
                    }
                    downloadTransconfig = new DownloadTransConfig(MainActivity.this, screenName);
                    downloadTransconfig.delegate = (UT_AsyncResponse) this;
                    downloadTransconfig.execute("");
                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DOWNLOADTRANSCONFIGAUTO)) {

            if (!NetworkUtil.isOnline(MainActivity.this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");

                if (progressdialog != null) {
                    progressdialog.dismiss();
                }

            } else {
                System.out.println("TRans2");

                String status = da_dynamics.getOfflineStatus();

                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_returnGetServiceEnd, "");
                } else {
                    transFieldname = actionConfig.FieldName;
                    String screenName = mScreenName;
                    if (!actionConfig.ActionValue.isEmpty()) {
                        screenName = actionConfig.ActionValue;
                    }

                    t2 = new Timer();
                    String finalScreenName = screenName;
                    t2.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            DownloadTransConfigAuto downloadTransconfig = new DownloadTransConfigAuto(MainActivity.this, finalScreenName);
                            downloadTransconfig.delegate = (UT_AsyncResponse) MainActivity.this;
                            downloadTransconfig.execute("");
                        }
                    }, 0, 5000);

                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DATASYNCBACKGROUND)) {

            if (!NetworkUtil.isOnline(this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");
                progressdialog.dismiss();
            } else {

                String status = da_dynamics.getOfflineStatus();

                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_DataSyncSuccess, "");

                } else {
                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
                    DA_WebserviceConfig webserviceConfig = new DA_WebserviceConfig(this);
                    stringArrayList = webserviceConfig.getWebservicename(queryConfig.QueryText);

//                    IntentFilter intentFilter = new IntentFilter("REFRESH_DATA");
//                    registerReceiver(broadcastReceiver, intentFilter);


                    Intent intent = new Intent("REFRESH_DATA");
                    intent.putExtra("FieldName", actionConfig.FieldName);
                    intent.putExtra("POSTURL", POSTURL);
                    sendBroadcast(intent);

                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPLOADPHOTO)) {
            if (!NetworkUtil.isOnline(this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");
                try {
                    if (progressdialog != null) {
                        progressdialog.dismiss();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                NetworkUtil.showNoConnectionDialog(this);

            } else {
                String ACTIONVALUE_DATASYNC = ut_sp.getStringValue(UT_Constants.ACTIONVALUE_DATASYNC);

                UploadPhotoToserver uploadPhotoToserver = new UploadPhotoToserver(MainActivity.this);
                uploadPhotoToserver.uploadPhotoAsync("UploadPhoto", ut_sp, fileHelper, ACTIONVALUE_DATASYNC, writer, actionConfig);

            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DATASYNC)) {
//            Disposable d = Single.timer((long) 500, TimeUnit.MILLISECONDS)
//                    .subscribeOn(Schedulers.io())
//                    .observeOn(AndroidSchedulers.mainThread())
//                    .subscribe(ignored -> {
            System.out.println("DataSync Called");
            if (!NetworkUtil.isOnline(this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");
                try {
                    if (progressdialog != null) {
                        progressdialog.dismiss();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                NetworkUtil.showNoConnectionDialog(this);

            } else {

                String status = da_dynamics.getOfflineStatus();

                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_DataSyncSuccess, "");
                } else {
                    if (!actionConfig.ActionPlan.isEmpty()) {

                        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
                        String Query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        HashMap<String, String> MDT = new HashMap<>();
                        fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + Query, writer);

                        MDT = da_dynamics.LastDocNoexecuteQuery(Query);

                        ut_sp.setStringValue(UT_Constants.SQL_MDTNO, MDT.get(SQL_MDTNO));

                        System.out.println("MDT :: " + MDT.get(SQL_MDTNO));
                        System.out.println("MDT :: " + ut_sp.getStringValue(UT_Constants.SQL_MDTNO));
                    }

                    ut_sp.setStringValue(ACTIONVALUE_DATASYNC, actionConfig.ActionValue);

                    DatasyncAsync dataSync = new DatasyncAsync(MainActivity.this, actionConfig.FieldName, POSTURL, da_queryConfig, ut_common, formValues, fileHelper);
                    dataSync.doSyncProcess();


                }

            }
//                    });
//            disposables.add(d);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SYNC_DATA)) {
            System.out.println("DataSync Called");
            if (!NetworkUtil.isOnline(this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");
                try {
                    if (progressdialog != null) {
                        progressdialog.dismiss();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                NetworkUtil.showNoConnectionDialog(this);

            } else {

                String status = da_dynamics.getOfflineStatus();

                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_DataSyncSuccess, "");
                } else {
                    if (!actionConfig.ActionPlan.isEmpty()) {

                        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
                        String Query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        HashMap<String, String> MDT = new HashMap<>();
                        fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + Query, writer);

                        MDT = da_dynamics.LastDocNoexecuteQuery(Query);

                        ut_sp.setStringValue(UT_Constants.SQL_MDTNO, MDT.get(SQL_MDTNO));

                        System.out.println("MDT :: " + MDT.get(SQL_MDTNO));
                        System.out.println("MDT :: " + ut_sp.getStringValue(UT_Constants.SQL_MDTNO));
                    }

                    ut_sp.setStringValue(ACTIONVALUE_DATASYNC, actionConfig.ActionValue);

                    DatasyncAsyncCustom dataSync = new DatasyncAsyncCustom(MainActivity.this, actionConfig.FieldName, POSTURL, da_queryConfig, ut_common, formValues, fileHelper, actionConfig.ActionPlan, selectedListValues);
                    dataSync.doSyncProcess();
                }

            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SENDDATA)) {

            if (!NetworkUtil.isOnline(this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");
                // executeActionConfig(actionConfig.FieldName, AN_SendDataFailed, "");
                NetworkUtil.showNoConnectionDialog(this);
            } else {

                String status = da_dynamics.getOfflineStatus();

                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_SendDataSuccess, "");
                } else {
                    SendData sendData = new SendData();
                    sendData.SendDataObj(MainActivity.this, actionConfig.FieldName);
                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SETALLCONFIG)) {

            setAllConfigs();

            Toast.makeText(getApplicationContext(), "Set All config", Toast.LENGTH_SHORT).show();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_NEXTBUTTONDISABLE)) {
            NextmenuDisable = false;
            //     nextButton.setVisibility(View.GONE);
            invalidateOptionsMenu();
            svbtn.setVisibility(View.GONE);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_BACKBUTTONDISABLE)) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(false);
            getSupportActionBar().setHomeButtonEnabled(false);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_NEXTBUTTONENABLE)) {

            if (actionConfig.ActionValue.isEmpty()) {
                NextmenuDisable = true;
                invalidateOptionsMenu();
                svbtn.setVisibility(View.GONE);
            } else {
                buttonroot = "NEXT";
                svbtn.setVisibility(View.VISIBLE);
                svbtn.setText(actionConfig.ActionValue);
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_POPUPWINDOW)) {

            ut_dialog.ShowPopupWindow(MainActivity.this,
                    actionConfig, ut_sp, formValues, selectedListValues, paramFormValues, paramSelectedListValues, fileHelper, actionConfigs);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_POPUPWINDOWINFO)) {

            ut_dialog.ShowPopupWindowInfo(MainActivity.this,
                    actionConfig, ut_sp, formValues, selectedListValues, paramFormValues, paramSelectedListValues, fileHelper, actionConfigs);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_HIDEPOPUPWINDOW)) {
            ut_dialog.popupWindow.dismiss();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_POPUP)) {
            String title = actionConfig.ActionPlan;
            if (actionConfig.ActionPlan.toUpperCase().startsWith("SELECT")) {
                String screenSignature = actionConfig.ActionPlan;
                BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                title = da_dynamics.NoexecuteQuery(query);
            }

            System.out.println("FormValues : " + formValues);
            ut_dialog.ShowAlertview(MainActivity.this, actionConfig, formValues, title);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DROPDOWN)) {
            executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);
            String temp[] = actionConfig.ActionValue.split(".");

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_FINDADDRESS)) {

            LocationManager manager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
            boolean statusOfGPS = manager.isProviderEnabled(LocationManager.GPS_PROVIDER);

            String locationBlock = da_dynamics.getDeviceSystemValue("select SystemValue from SystemList WHERE code='LocationBlock'");
            String locationStatus = da_dynamics.getLocationOfflineStatus();

//            if (!NetworkUtil.isOnline(this)) {
//                formValues.put(SQL_LATITUDEFINDER, "0.0");
//                formValues.put(SQL_LONGITUDEFINDER, "0.0");
//                executeActionConfig(actionConfig.FieldName, AN_LocationOff, "");
//                executeActionConfig(actionConfig.FieldName, AN_FINDADDRESSEND, "");
//            } else {

            System.out.println("statusOfGPS : " + statusOfGPS);
            System.out.println("locationStatus : " + locationStatus);
            if (!statusOfGPS) {

                boolean denied = isLocationPermissionGranted();
                boolean permanetlydenied = isLocationPermissionGranted2();

                System.out.println("denied : " + denied);
                System.out.println("twoo : " + permanetlydenied);

                if (denied) {
                    //FindAddressGpsOff
                    formValues.put(SQL_LATITUDEFINDER, "0.0");
                    formValues.put(SQL_LONGITUDEFINDER, "0.0");
                    executeActionConfig(actionConfig.FieldName, AN_FindAddressGpsOff, "");
                } else if (permanetlydenied) {
                    //FindAddressDeniedForever
                    formValues.put(SQL_LATITUDEFINDER, "0.0");
                    formValues.put(SQL_LONGITUDEFINDER, "0.0");
                    executeActionConfig(actionConfig.FieldName, AN_FindAddressDeniedForever, "");
                } else {
                    //FindAddressDenied
                    formValues.put(SQL_LATITUDEFINDER, "0.0");
                    formValues.put(SQL_LONGITUDEFINDER, "0.0");
                    executeActionConfig(actionConfig.FieldName, AN_FindAddressDenied, "");
                }

                if (locationStatus != null) {
                    if (locationStatus.equals("1")) {
                        openlocationAlertDialog();
                    }
                }

            } else {
                locationFinder = new FindAddress(MainActivity.this, actionConfig, formValues, fileHelper, writer);
                locationFinder.Search();
            }
//            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SENDMESSAGE)) {

            executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_MESSAGEBUTTONENABLE)) {

            MessagemenuEnable = true;
            invalidateOptionsMenu();
            svbtn.setVisibility(View.GONE);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SAVEBUTTONENABLE)) {

            if (actionConfig.ActionValue.isEmpty()) {
                NextmenuDisable = false;
                saveEnable = true;
                invalidateOptionsMenu();
                svbtn.setVisibility(View.GONE);
            } else {
                buttonroot = "SAVE";
                svbtn.setVisibility(View.VISIBLE);
                svbtn.setText(actionConfig.ActionValue);
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SAVEBUTTONDISABLE)) {
            saveEnable = false;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_MESSAGEBUTTONDISABLE)) {

            MessagemenuEnable = false;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_VALIDATEFORMFIELDS)) {
            int mfieldscnt = 0;
            String mfieldname = "";
            String mNewText = "";
            boolean bCheckIsMandatory = true;

            String language = da_dynamics.getSystemLanguage();

            String query = "SELECT Fieldname,NewText,FieldControl FROM FormConfig WHERE Screenname ='" + mScreenName + "' and IsMandatory = 1 and Language='" + language + "' order by DisplayNo"; //and ishidden=0 and valuewidth <> 0

            System.out.println("query : " + query);

            ArrayList<BE_FormConfig> rtn = new ArrayList<>();
            rtn = da_dynamics_syscon.getValidateFormfields(query);

            System.out.println("rtn : " + rtn);
            System.out.println("formValues : " + formValues);

            String fieldNameMultiCombobox = "";


            for (int i = 0; i < rtn.size(); i++) {

                if (rtn.get(i).FieldControl.equals(FC_MULTICOMBOBOX)) {
                    fieldNameMultiCombobox = rtn.get(i).FieldName;
                }

                if (formValues.get("sign".toUpperCase()) != null) {
//
                    if (!signDone) {
                        bCheckIsMandatory = false;
                        mfieldname += "," + rtn.get(i).FieldName.replaceFirst(",", "");
                        mNewText += "," + rtn.get(i).NewText.replaceFirst(",", "");
                        mfieldscnt = mfieldscnt + 1;
                    }
                }

                if (!rtn.get(i).FieldName.equalsIgnoreCase("Blank")) {
                    if (fieldNameMultiCombobox.isEmpty()) {
                        if (formValues.get(rtn.get(i).FieldName.toUpperCase()) == null
                                || formValues.get(rtn.get(i).FieldName.toUpperCase()).isEmpty()) {
                            bCheckIsMandatory = false;
                            mfieldname += "," + rtn.get(i).FieldName.replaceFirst(",", "");
                            mNewText += "," + rtn.get(i).NewText.replaceFirst(",", "");
                            mfieldscnt = mfieldscnt + 1;
                        }
                    } else {

                        String vall = formValues.get("MULTICOMBOBOX." + rtn.get(i).FieldName.toUpperCase());
                        System.out.println("vall : " + vall);

                        if (formValues.get("MULTICOMBOBOX." + rtn.get(i).FieldName.toUpperCase()) == null
                                || formValues.get("MULTICOMBOBOX." + rtn.get(i).FieldName.toUpperCase()).isEmpty()) {
                            bCheckIsMandatory = false;
                            mfieldname += "," + rtn.get(i).FieldName.replaceFirst(",", "");
                            mNewText += "," + rtn.get(i).NewText.replaceFirst(",", "");
                            mfieldscnt = mfieldscnt + 1;
                            fieldNameMultiCombobox = "";
                        }
                    }
                }
            }
            mfieldname = mfieldname.replaceFirst(",", "");
            mNewText = mNewText.replaceFirst(",", "");

            if (bCheckIsMandatory) {

                executeActionConfig(FieldName, actionConfig.ActionValue, "");

            } else if (!bCheckIsMandatory) {

                String languages = ut_sp.getStringValue(SP_LANGUAGE);
                String langtext = "are mandatory";

                DA_MessageConfig da_messageConfig = new DA_MessageConfig(this);
                String messageText = da_messageConfig.getMessageConfigs(screen, languages, langtext);


                if (mfieldscnt > 1) {

                    String title = "";
                    if (ut_sp.getStringValue(UT_Constants.XML_SOLUTION_NAME).equals("WMS")) {
                        title = "Simplr Solutions";
                    } else {
                        title = "Simplr Sales";
                    }

                    showAlertOneButton(title, mNewText + " " + messageText, "OK", actionConfig.ActionPlan);

                } else {
                    String title = "";
                    if (ut_sp.getStringValue(UT_Constants.XML_SOLUTION_NAME).equals("WMS")) {
                        title = "Simplr Solutions";
                    } else {
                        title = "Simplr Sales";
                    }

                    showAlertOneButton(title, mNewText + " " + messageText, "OK", actionConfig.ActionPlan);

                }

                if (!actionConfig.ActionFailedValue.equals("")) {
                    executeActionConfig(FieldName, actionConfig.ActionFailedValue, "");
                    bCheckIsMandatory = true;
                }


            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_LOCATIONVALIDATE)) {

            LocationFinder locationFinder = new LocationFinder();
            locationFinder.ValidatelatandLon(MainActivity.this, actionConfig, da_queryConfig, ut_common, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, da_dynamics);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATEGRIDVIEW)) {

            String[] TempActionvalue = actionConfig.ActionPlan.split(",");

            if (TempActionvalue[0].equalsIgnoreCase("Folder") || TempActionvalue[1].equalsIgnoreCase("FolderBack")) {

                String Code = "sDashboardPageName";

                if (TempActionvalue[0].equalsIgnoreCase("Folder")) {
                    fileHelper.fileWriter("executeQuery Query : " + "DELETE From SystemList WHERE lower(Code) = lower(" + Code + ")", writer);

                    da_dynamics.executeQuery("DELETE From SystemList WHERE lower(Code) = lower(" + Code + ")");

                    fileHelper.fileWriter("executeQuery Query : " + "INSERT INTO SystemList (Code, SystemValue, SystemDataType) VALUES (" + Code + ", " + TempActionvalue[2] + ", '')", writer);
                    da_dynamics.executeQuery("INSERT INTO SystemList (Code, SystemValue, SystemDataType) VALUES (" + Code + ", " + TempActionvalue[2] + ", '')");

                } else if (TempActionvalue[1].equalsIgnoreCase("FolderBack")) {

                    DA_SystemList da_systemList = new DA_SystemList(this);
                    BE_SystemList systemList = da_systemList.getSystemList(Code);

                    if (systemList.Code.equalsIgnoreCase("sDashboardPageName")) {
                        String value = systemList.SystemValue.toString();
                        String[] Tempvalue = value.split("-");
                        fileHelper.fileWriter("executeQuery Query : " + "DELETE From SystemList WHERE lower(Code) = lower(" + Code + ")", writer);

                        da_dynamics.executeQuery("DELETE From SystemList WHERE lower(Code) = lower(" + Code + ")");
                        fileHelper.fileWriter("executeQuery Query : " + "INSERT INTO SystemList (Code, SystemValue, SystemDataType) VALUES (" + Code + ", " + Tempvalue[0] + ", '')", writer);

                        da_dynamics.executeQuery("INSERT INTO SystemList (Code, SystemValue, SystemDataType) VALUES (" + Code + ", " + Tempvalue[0] + ", '')");
                    }

                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHANGEPAGECONTENT)) {

            String tempActionvalue = actionConfig.ActionValue;

            WS_StartUp ws_startUp = new WS_StartUp(MainActivity.this);
            ws_startUp.getDimensions();
            System.out.println("tempActionvalue : " + tempActionvalue);

            initActivity(formContent, tempActionvalue);
            initUI(formContent, tempActionvalue);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_LASTDOCNO)) {

            executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_INTENTVIEW)) {
            Intent myIntent = new Intent(Intent.ACTION_VIEW);
            File tempUri = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/Images/Items/" + actionConfig.ActionValue);
            myIntent.setData(Uri.fromFile(tempUri));
            Intent j = Intent.createChooser(myIntent, "Choose an application to open with:");
            startActivity(j);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SYNCBUTTONENABLE)) {
            SyncmenuEnable = true;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SYNCBUTTONDISABLE)) {
            SyncmenuEnable = false;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ENABLEPRINTICON)) {
            PrintmenuEnable = true;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ENABLEACTIVATED)) {
            actiavtedEnable = true;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_REFRESHBUTTONENABLE)) {
            refreshEnable = true;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_REFRESHBUTTONDISABLE)) {
            refreshEnable = false;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SHAREBUTTONENABLE)) {
            shareEnable = true;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SHAREBUTTONDISABLE)) {
            shareEnable = false;
            invalidateOptionsMenu();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHECKNETWORK)) {
            actionPerformed = true;
            if (!NetworkUtil.isOnline(this)) {
                NetworkUtil.showNoConnectionDialog(this);
            } else {
                DA_MessageConfig da_messageConfig = new DA_MessageConfig(this);
                String messageText = da_messageConfig.getMessageConfigs(screen, language, "Connection successful");
                ut_dialog.InternetAlert(messageText, this);
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHECKCONNECTION)) {
            actionPerformed = true;
            if (!NetworkUtil.isOnline(this)) {
                executeActionConfig(actionConfig.FieldName, AN_ConnectionFailed, "");
            } else {
                executeActionConfig(actionConfig.FieldName, AN_ConnectionSuccess, "");
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_BLUETOOTH)) {

            bluetoothLoad = true;
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_LOGINCOUNT)) {
            LoginCount loginCount = new LoginCount();
            loginCount.LoginCount(UPDATELOGINCOUNT, formValues, ut_sp, da_dynamics);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SYNC)) {

            if (!NetworkUtil.isOnline(MainActivity.this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailed, "");
            } else {
                String status = da_dynamics.getOfflineStatus();
                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_SyncFailed, "");

                } else {
                    Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe(ignored -> {

                                AdminSync adminSync = new AdminSync(MainActivity.this, da_dynamics, actionConfig, da_queryConfig, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, fileHelper);
                                adminSync.syncProcess();

                            });
                    disposables.add(d);
                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_COPYFILE)) {
            executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DELETEFILE)) {
            executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_GET)) {

            if (!NetworkUtil.isOnline(MainActivity.this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailed, "");
            } else {
                String status = da_dynamics.getOfflineStatus();
                if (status != null && !status.isEmpty() && status.equals("1")) {

                } else {
                    Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe(ignored -> {
                                HttpGet httpGet = new HttpGet();
                                httpGet.GETFunction(MainActivity.this, ut_sp, actionConfig, da_queryConfig, ut_common, da_dynamics, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system);
                            });
                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_POST)) {
            if (!NetworkUtil.isOnline(MainActivity.this)) {

                NetworkUtil.showNoConnectionDialog(MainActivity.this);

            } else {
                String status = da_dynamics.getOfflineStatus();
                if (status != null && !status.isEmpty() && status.equals("1")) {

                } else {
                    executeQuery(actionConfig.ActionPlan, FieldName, actionConfig);

                    //Header
                    BE_QueryConfig queryConfig_Header = da_queryConfig.getQueryConfig(actionConfig.ActionPlan + "_HEADER");
                    String Headerquery = ut_common.getQuery(queryConfig_Header, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    HashMap<String, String> HeaderValue = new HashMap<>();
                    fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + Headerquery, writer);
                    HeaderValue = da_dynamics.LastDocNoexecuteQuery(Headerquery);

                    // Params
                    BE_QueryConfig queryConfig_params = da_queryConfig.getQueryConfig(actionConfig.ActionPlan + "_PARAMS");
                    String Paramquery = ut_common.getQuery(queryConfig_params, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    HashMap<String, String> ParamValue = new HashMap<>();
                    fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + Paramquery, writer);

                    ParamValue = da_dynamics.LastDocNoexecuteQuery(Paramquery);


                    HttpFunction httpFunction = new HttpFunction();
                    String Response = httpFunction.POST(AT_POSTURL, HeaderValue, ParamValue);
                    Log.v("Res response", Response);
                }
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ADDFORMLISTVIEWROW)) {

            if (formListScreenName.endsWith("_REFRESHFORMLIST")) {
                formListScreenName = formListScreenName.replace("_REFRESHFORMLIST", "");
            }

            String[] split = actionConfig.ActionValue.split("FormView.ListView.");
            for (int i = 0; i < formConfigs.size(); i++) {
                if (formConfigs.get(i).FieldName.equalsIgnoreCase(split[1].toUpperCase())) {
                    queryListConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan + "_USER_ADDROW");
                    String query = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("ADD ROW QUERY : " + query, writer);
                    listConfigs = da_listConfig.getListConfigs(screen, language, screenWidth);
                    fileHelper.fileWriter("ListConfig Query : " + query, writer);
                    ArrayList<HashMap<String, String>> formListValues = da_dynamics.getListConfigValues(screen, listConfigs, query, 0, 0, MdtlistLimit);  //load all values
                    fileHelper.fileWriter("ADD ROW QUERY VALUES : " + formListValues, writer);
                    Listconfigcustom listConfigCustom = new Listconfigcustom(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                    listConfigCustom.initConfiguration(query, null, listConfigs, formListValues, llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer, "", "");

                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ADDMAINLISTVIEWROW)) {

            if (formListScreenName.endsWith("_REFRESHFORMLIST")) {
                formListScreenName = formListScreenName.replace("_REFRESHFORMLIST", "");
            }

            queryListConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
            String query = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            fileHelper.fileWriter("ADD ROW QUERY : " + query, writer);
            listConfigs = da_listConfig.getListConfigs(formListScreenName, language, screenWidth);
            fileHelper.fileWriter("ListConfig Query : " + query, writer);
            ArrayList<HashMap<String, String>> formListValues = da_dynamics.getListConfigValues(screen, listConfigs, query, 0, 0, MdtlistLimit);  //load all values
            fileHelper.fileWriter("ADD ROW QUERY VALUES : " + formListValues, writer);
//            FormList_llValues = new LinearLayout(this);
//            FormList_llValues.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
//            FormList_llValues.setOrientation(LinearLayout.VERTICAL);

//            initAddmainList(formListScreenName, listConfigs, formListValues, FormList_llValues, actionConfig, listConfigQuery);
            initAddmainListRefresh(formListScreenName, listConfigs, formListValues, FormList_llValues, actionConfig, listConfigQuery);


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ADDMAINLISTVIEWROWNEW)) {

            if (formListScreenName != null && formListScreenName.endsWith("_REFRESHFORMLIST")) {
                formListScreenName = formListScreenName.replace("_REFRESHFORMLIST", "");
            }

            queryListConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
            String query = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            fileHelper.fileWriter("ADD ROW QUERY : " + query, writer);
            listConfigs = da_listConfig.getListConfigs(screen, language, screenWidth);
            fileHelper.fileWriter("ListConfig Query : " + query, writer);
            ArrayList<HashMap<String, String>> formListValues = da_dynamics.getListConfigValues(screen, listConfigs, query, 0, 0, MdtlistLimit);  //load all values
            fileHelper.fileWriter("ADD ROW QUERY VALUES : " + formListValues, writer);
            System.out.println("formListValues : " + formListValues);

//            initAddmainListRefresh(formListScreenName, listConfigs, formListValues, FormList_llValues, actionConfig, listConfigQuery);
            Listconfigcustom listConfigCustom = new Listconfigcustom(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
            listConfigCustom.Listconfigcustom_AddROW(screen, nsValues, listConfigs, formListValues, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCountrefresh, null, null, listConfigQuery, "", "");


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DELMAINLISTVIEWROW)) {

//            BE_QueryConfig queryListConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
//            String query = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system);
//            fileHelper.fileWriter("DEL ROW QUERY : " + query, writer);
//            ArrayList<BE_ListConfig> formListConfigs = da_listConfig.getListConfigs(formListScreenName, language, screenWidth);
//            ArrayList<HashMap<String, String>> DelformListValues = da_dynamics.getListConfigValues(formListConfigs, query, 0, 0);  //load all values
//            fileHelper.fileWriter("DEL ROW QUERY VALUES : " + DelformListValues, writer);
//
//            LinearLayout FormList_llValues = new LinearLayout(this);
//            FormList_llValues.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
//            FormList_llValues.setOrientation(LinearLayout.VERTICAL);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHANGELIST)) {
            //List config
            da_listConfig = new DA_ListConfig(this);
            queryListConfig = da_queryConfig.getQueryConfig(actionConfig.ActionValue);
            listConfigQuery = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            initListView(screen);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SENDDB) || actionConfig.ActionType.equalsIgnoreCase(AT_UPLOADDB)) {
            if (!NetworkUtil.isOnline(MainActivity.this)) {
                NetworkUtil.showNoConnectionDialog(MainActivity.this);
            } else {
                String status = da_dynamics.getOfflineStatus();
                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_SENDDBSUCCESS, "");

                } else {
                    HttpFunction httpFunction = new HttpFunction();
                    httpFunction.SENDDB(MainActivity.this, ut_sp.getStringValue(XML_POST_URL), "UploadFile", ut_sp, fileHelper, actionConfig.FieldName);
                }
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SENDLOG)) {
            if (!NetworkUtil.isOnline(MainActivity.this)) {
                NetworkUtil.showNoConnectionDialog(MainActivity.this);
            } else {

                String status = da_dynamics.getOfflineStatus();
                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_SENDLOGSUCCESS, "");
                } else {
                    SendLog sendLog = new SendLog();
                    sendLog.SENDLOG(MainActivity.this, ut_sp.getStringValue(XML_POST_URL), "UploadFile", ut_sp, fileHelper, actionConfig.FieldName);
                }
            }
        }

//        Action Refresh Token
        else if (actionConfig.ActionType.equalsIgnoreCase(AT_REFRESHBUTTON)) {

            transFieldname = actionConfig.FieldName;
            downloadTransconfig = new DownloadTransConfig(MainActivity.this, mScreenName);
            downloadTransconfig.delegate = (UT_AsyncResponse) this;
            downloadTransconfig.execute("");
            // RefreshconfigLoop(actionConfig, progressdialog);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DOWNLOADURL)) {
//            downloadURL();


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHECKVERSION)) {
            System.out.println("CHECK VERSION CALLED");
            for (BE_QueryConfig query : actionConfigQueries) {
                System.out.println("ScreenName : " + query.ScreenName + " - " + actionConfig.ActionPlan);

                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("NoexecuteQuery Query : " + completeQuery, writer);
                    String systemNewVersionValue = da_dynamics.NoexecuteQuery(completeQuery);
                    if (systemNewVersionValue == null || systemNewVersionValue.equals("")) {
                        systemNewVersionValue = "0";
                    }

                    CompareVersion(systemVersionValue, systemNewVersionValue, actionConfig.ActionValue, actionConfig.FieldName);

                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DEVICEINFO)) {
            ut_sp.setStringValue(SQL_SYSTEM + "OSVersion", Build.VERSION.RELEASE);
            ut_sp.setStringValue(SQL_SYSTEM + "MODEL", Build.MODEL);

            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("executeQuery Query : " + completeQuery, writer);

                    da_dynamics.executeQuery(completeQuery);
                }

            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ENABLEAUTOLOGOUT)) {

            String rtn = null;
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionValue)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("NoexecuteQuery Query : " + completeQuery, writer);

                    rtn = da_dynamics.NoexecuteQuery(completeQuery);
                }

            }
            inActiveTimer = parseInt(rtn) * 1000;
            ((TimeOutApp) getApplication()).setTimerValue(inActiveTimer);
            ((TimeOutApp) getApplication()).setActionValue(actionConfig);
            ((TimeOutApp) getApplication()).registerSessionListener(this);
            ((TimeOutApp) getApplication()).startUserSession(inActiveTimer, actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_STOPLOGOFFTIMER)) {
            ((TimeOutApp) getApplication()).cancelTimer();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_POPUPOPTIONS)) {
            ut_dialog.ShowPopupOptionWindow(MainActivity.this, screen);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHECKAUTODATEENABLED)) {

            if (NetworkUtil.isAutoTimeDate(MainActivity.this) == 0 || ut_sp.getStringValue(SP_AUTODATETIME).equalsIgnoreCase("0")) {
                startActivity(new Intent(Settings.ACTION_DATE_SETTINGS));
                formValues.put("AUTODATETIME", String.valueOf(NetworkUtil.isAutoTimeDate(MainActivity.this)));

            } else {
                formValues.put("AUTODATETIME", String.valueOf(NetworkUtil.isAutoTimeDate(MainActivity.this)));

            }

            formValues.put("AUTODATETIME", String.valueOf(NetworkUtil.isAutoTimeDate(MainActivity.this)));

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_GENERATEDOCNO)) {

            System.out.println("Screen Name : " + screen);
            System.out.println("actionConfig : " + actionConfig);
            try {
                fileHelper.fileWriter("getFormConfigValues Query : " + "select * from noseries where Doctype =" + "'" + actionConfig.ActionPlan + "'", writer);
                HashMap<String, String> values = da_dynamics.getFormConfigValues("select * from noseries where Doctype =" + "'" + actionConfig.ActionPlan + "'");
                int lastNumber = parseInt(Objects.requireNonNull(values.get("LASTNUMBER").toUpperCase())) + 1;
                int length = parseInt(Objects.requireNonNull(values.get("NOLENGTH").toUpperCase())) - values.get("PREFIX").toUpperCase().length();
                int size = length - values.get("PREFIX").toUpperCase().length();
                System.out.println("lastNumber : " + lastNumber + " , length : " + length + " , size : " + size);
                String vall = StringUtils.leftPad(String.valueOf(lastNumber), length, '0');
                runningNo = values.get("PREFIX").toUpperCase() + "" + vall;
                System.out.println("lastNumber 2 : " + runningNo);

                ut_sp.setStringValue(SQL_GENERATEDOCNO, runningNo.toString());
            } catch (Exception e) {
                e.printStackTrace();
                ut_dialog.exceptionAlert(e, MainActivity.this);
            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATESERIESNO)) {
            HashMap<String, String> queryvalue = null;
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("getFormConfigValues Query : " + completeQuery, writer);
                    queryvalue = da_dynamics.getFormConfigValues(completeQuery);
                }

            }

            String lastNumber = queryvalue.get("LASTNUMBER");
            int length = parseInt(queryvalue.get("NOLENGTH"));
            int size = length - queryvalue.get("PREFIX").length();
            String leftp = StringUtils.leftPad(lastNumber, size, "0");
            runningNo = queryvalue.get("PREFIX") + leftp;
            ut_sp.setStringValue(SQL_GENERATEDOCNO, runningNo.toString());


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ACCESSLEVEL)) {

            String rtn = null;
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("NoexecuteQuery Query : " + completeQuery, writer);
                    rtn = da_dynamics.NoexecuteQuery(completeQuery);
                    String access = "(Access is NULL OR Access =" + rtn + ")";
                    ut_sp.setStringValue(SP_ACCESS_LEVEL, access);
                    ut_sp.setStringValue(SP_ACCESS_LEVEL_TEMP, rtn);
                }

            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_FOCUSLINEFIELD)) {

            HashMap<String, String> rtn = new HashMap<>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + completeQuery, writer);
                    rtn = da_dynamics.LastDocNoexecuteQuery(completeQuery);

                }

            }
            String key = null;
            String value = null;
            for (String str : rtn.keySet()) {
                key = str;
                value = rtn.get(str);
            }

            for (int i = 0; i < listConfigValues.size(); i++) {

                if (listConfigValues.get(i).get(key).equals(value)) {
                    // View view = FormList_llValues.findViewWithTag(actionConfig.ActionValue.toString().toUpperCase() + "#" + i);
                    View view = null;

                    if (formlist) {
                        if (FormList_llValues != null) {
                            view = FormList_llValues.findViewWithTag(actionConfig.ActionValue.toString().toUpperCase() + "#" + i);
                        } else {
                            view = listConfigView.findViewWithTag(actionConfig.ActionValue.toString().toUpperCase() + "#" + i);
                        }
                    } else {
                        if (listConfigView.getChildCount() >= 2) {
                            view = listConfigView.findViewWithTag(actionConfig.ActionValue.toString().toUpperCase() + "#" + i);
                        } else {
                            if (FormList_llValues != null) {
                                view = FormList_llValues.findViewWithTag(actionConfig.ActionValue.toString().toUpperCase() + "#" + i);
                            } else {
                                view = listConfigView.findViewWithTag(actionConfig.ActionValue.toString().toUpperCase() + "#" + i);
                            }
                        }
                    }

                    EditText editText = (EditText) view;
                    editText.setCursorVisible(true);
                    editText.setFocusable(true);
                    editText.requestFocus();

                }

            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SHOWFORMFIELDS)) {

            ArrayList<String> rtn = new ArrayList<>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    rtn = da_dynamics_syscon.showFormFielfdexecuteQuery(completeQuery);
                    showformfileds = da_dynamics_syscon.showFormFielfdexecuteQuery(completeQuery);
                }
            }

            System.out.println("rtn : " + rtn);

            if (!rtn.isEmpty()) {
                for (int i = 0; i < formContent.getChildCount(); i++) {
                    View temp = formContent.getChildAt(i);
                    if (temp instanceof LinearLayout) {
                        LinearLayout linearLayout = (LinearLayout) temp;
                        for (int j = 0; j < linearLayout.getChildCount(); j++) {

                            View view = linearLayout.getChildAt(j);
//                            System.out.println("temp child view : " + view);

                            if (view != null) {

                                if (view instanceof CheckBox || view instanceof MaterialButton || view instanceof TextInputLayout || view instanceof TextInputEditText ||
                                        view instanceof MaterialEditText || view instanceof MaterialSpinner ||
                                        view instanceof TextView || view instanceof ImageView || view instanceof MaterialEditTextArea || view instanceof MaterialEditTextAreaBack ||
                                        view instanceof WebView || view instanceof MaterialEditText_back || view instanceof MaterialSpinnerBack || view instanceof MaterialSpinnerBackNew) {
                                    try {


                                        if (view.getTag() != null) {
                                            if (rtn.contains(view.getTag().toString().toUpperCase())) {
                                                view.setVisibility(View.VISIBLE);

                                                if (view instanceof MaterialSpinner) {
                                                    View view1 = linearLayout.findViewWithTag(view.getTag().toString().toUpperCase());
                                                    view1.setVisibility(View.VISIBLE);
                                                }
                                                if (view instanceof MaterialSpinnerBack) {
                                                    View view1 = linearLayout.findViewWithTag(view.getTag().toString().toUpperCase());
                                                    view1.setVisibility(View.VISIBLE);
                                                }
                                                if (view instanceof MaterialSpinnerBackNew) {
                                                    View view1 = linearLayout.findViewWithTag(view.getTag().toString().toUpperCase());
                                                    view1.setVisibility(View.VISIBLE);
                                                }

                                            } else {
                                                view.setVisibility(View.GONE);
                                                if (view instanceof MaterialSpinner) {
                                                    View view1 = linearLayout.findViewWithTag(view.getTag().toString().toUpperCase());
                                                    view1.setVisibility(View.GONE);

                                                } else if (view instanceof MaterialSpinnerBack) {
                                                    View view1 = linearLayout.findViewWithTag(view.getTag().toString().toUpperCase());
                                                    view1.setVisibility(View.GONE);

                                                } else if (view instanceof MaterialSpinnerBackNew) {
                                                    View view1 = linearLayout.findViewWithTag(view.getTag().toString().toUpperCase());
                                                    view1.setVisibility(View.GONE);

                                                }
                                            }
                                        }

                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                } else if (view instanceof LinearLayout || view instanceof NestedScrollView || view instanceof HorizontalScrollView) {
                                    try {

                                        if (view.getTag() != null) {

                                            if (rtn.contains(view.getTag().toString().toUpperCase())) {
                                                view.setVisibility(View.VISIBLE);
                                            } else {
                                                view.setVisibility(View.GONE);
                                            }
                                        } else {

                                            if (view instanceof LinearLayout) {
                                                LinearLayout layout = (LinearLayout) view;

                                                for (int y = 0; y < layout.getChildCount(); y++) {

                                                    if (layout.getChildAt(y).getTag() != null) {
                                                        if (layout.getChildAt(y).getTag().toString().isEmpty()) {
                                                            View layout2 = (LinearLayout) layout.getChildAt(y);
                                                        } else {
                                                            if (rtn.contains(layout.getChildAt(y).getTag().toString().toUpperCase())) {
                                                                layout.setVisibility(View.VISIBLE);
                                                            } else {
                                                                layout.setVisibility(View.GONE);
                                                            }
                                                        }
                                                    }
                                                }
                                            }


                                        }

                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }

                                    try {
                                        LinearLayout linearLayout1 = (LinearLayout) view;

                                        for (int a = 0; a < linearLayout1.getChildCount(); a++) {
                                            View view2 = linearLayout1.getChildAt(a);

                                            if (view2 != null) {
                                                if (view2.getTag() != null) {
                                                    if (view2 instanceof ImageView) {
                                                        try {

                                                            if (rtn.contains(view2.getTag().toString().toUpperCase())) {
                                                                view2.setVisibility(View.VISIBLE);
                                                            } else {
                                                                view2.setVisibility(View.GONE);
                                                            }

                                                        } catch (Exception e) {
                                                            e.printStackTrace();
                                                        }
                                                    }
                                                } else {
                                                    if (view2 instanceof LinearLayout) {
                                                        LinearLayout layout = (LinearLayout) view2;

                                                        for (int y = 0; y < layout.getChildCount(); y++) {

                                                            if (layout.getChildAt(y).getTag() != null) {
                                                                System.out.println("TAG view : " + layout.getChildAt(y));
                                                                System.out.println("TAG : " + layout.getChildAt(y).getTag());
                                                                if (rtn.contains(layout.getChildAt(y).getTag().toString().toUpperCase())) {
                                                                    layout.setVisibility(View.VISIBLE);
                                                                } else {
                                                                    layout.setVisibility(View.GONE);
                                                                }
                                                            }
                                                        }
                                                    }

                                                }
                                            }


                                        }


                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        }
                    }


                }
            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_ENABLELOCATION)) {

            getEnableLocation();
            Toast.makeText(getApplicationContext(), "Enable Map Current Location", Toast.LENGTH_SHORT).show();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CURRENTLOCATION)) {
            if (googleMap != null) {
                googleMap.currentLocation(mCurrentLocation);
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_TODAYROUTE)) {
            System.out.println("actionConfigQueries : " + actionConfigQueries);
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    MapLatLongRtn = da_dynamics.getLatLongValues(completeQuery);

                    System.out.println("MapLatLongRtn 1 : " + MapLatLongRtn);
                    System.out.println("googleMap : " + googleMap);
                    System.out.println("mCurrentLocation : " + mCurrentLocation);

                    if (googleMap != null) {

                        LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                        Criteria criteria = new Criteria();
                        provider = locationManager.getBestProvider(criteria, false);
                        Location location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
                        mCurrentLocation = location;

                        googleMap.currentLocation(mCurrentLocation);
                        googleMap.CustomerLocations(MapLatLongRtn);
                    }

                }

            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_NEARBY)) {
            try {
                for (BE_QueryConfig query : actionConfigQueries) {
                    if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                        String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        fileHelper.fileWriter("NoexecuteQuery Query : " + completeQuery, writer);
                        String radius = da_dynamics.NoexecuteQuery(completeQuery);

                        if (googleMap != null) {
                            googleMap.Circle(radius);
                        }

                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_REFRESHCHART)) {


            if (actionConfig.ActionPlan.endsWith("chart")) {
                for (BE_QueryConfig query : actionConfigQueries) {
                    if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                        chartQuery = query.QueryText;
                    }
                }
                if (mainDashboardActivated.equals("MainWidget_ACTIVATED")) {
                    mainDashboardActivated = "MainWidget";
                } else {
                    mainDashboardActivated = "MainWidget_ACTIVATED";
                }
                initFormContentMultiDisplayNo(formContent, formConfigs, formValues, mScreenName);

            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_NOTIFICATION)) {
            FirebaseApp.initializeApp(this);
            firebase = new FirebaseInitialize(this, fileHelper, writer);
            firebase.fcmInitConfig();
            firebase.notifyTapped();
            firebase.fcmChennalSubscription();
            firebase.getFCMRegisterToken();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_FLOWCOLOR)) {
            ArrayList<String> rtn = new ArrayList<>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    rtn = da_dynamics_syscon.showFormFielfdexecuteQuery(completeQuery);
                }
            }

            for (int i = 0; i < formContent.getChildCount(); i++) {
                View temp = formContent.getChildAt(i);
                if (temp instanceof LinearLayout) {
                    LinearLayout linearLayout = (LinearLayout) temp;
                    for (int j = 0; j < linearLayout.getChildCount(); j++) {
                        View view = linearLayout.getChildAt(j);
                        if (view instanceof MaterialButton) {
                            if (rtn.contains(view.getTag())) {
                                view.setBackgroundColor(Color.BLUE);
                            }
                        }
                    }
                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATESERVER)) {


            String status = da_dynamics.getOfflineStatus();

            UpdateToserver serverUpdate = new UpdateToserver(this, actionConfig, ut_sp, fileHelper);
            HashMap<String, String> rtn = new HashMap<>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("getUpdateserverConfigValues Query : " + completeQuery, writer);
                    rtn = da_dynamics.getUpdateserverConfigValues(completeQuery);

                }
            }
            fileHelper.fileWriter("getUpdateserverConfigValues Query Value : " + rtn, writer);
            serverUpdate.Servercallnew(rtn);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATESERVERUNIQUE)) {

            String status = da_dynamics.getOfflineStatus();

            UpdateToserver serverUpdate = new UpdateToserver(this, actionConfig, ut_sp, fileHelper);
            HashMap<String, String> rtn = new HashMap<>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("getUpdateserverConfigValues Query unique : " + completeQuery, writer);
                    rtn = da_dynamics.getUpdateserverConfigValues(completeQuery);
                }
            }
            fileHelper.fileWriter("getUpdateserverConfigValues Query Value unique : " + rtn, writer);
            serverUpdate.ServercallUPDATESERVERUNIQUE(rtn);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SHOWLOCATION)) {


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_WSAPRINT)) {

            Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(ignored -> {

                        try {

                            String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");

                            String savedMac = da_dynamics.getMacAddress();
                            fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);
                            Connection con = new com.zebra.sdk.comm.BluetoothConnection(savedMac);
                            con.open();
                            printer = ZebraPrinterFactory.getInstance(con);


                            ArrayList<HashMap<String, String>> values = new ArrayList<HashMap<String, String>>();
                            for (BE_QueryConfig query : actionConfigQueries) {
                                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                                    System.out.println("completeQuery : " + completeQuery);

                                    values = da_dynamics.getMapListValues(completeQuery);
                                }

                            }

                            int printSize = 1;

                            if (PrintCopy != null && !PrintCopy.isEmpty() && !PrintCopy.equals("0")) {
                                printSize = parseInt(PrintCopy);
                            }

                            for (int j = 0; j < printSize; j++) {


                                fileHelper.fileWriter("values : " + values, writer);

                                for (int a = 0; a < values.size(); a++) {

                                    String lineNo = values.get(a).get("LINENO");
                                    String itemNo = values.get(a).get("ITEMNO");
                                    String qty = values.get(a).get("QTY");
                                    String description = values.get(a).get("DESCRIPTION");
                                    String barcode = values.get(a).get("BARCODE");
                                    String altno = values.get(a).get("ALTNO");

                                    boolean result = verifycode(barcode);


                                    printer.sendCommand("^XA^LL240^XZ");

//                                    String zplData = "^XA^MMT^LL240^LS0" +
//                                            "^FT28,50^A@N,10,12^FH\\^CI12^FDLine:" + lineNo + "^FS^CI0" +
//                                            "^BY2,2,35^FT154,65^BCN,,Y,N" +
//                                            "^FD>;" + itemNo + "^FS" +
//                                            "^FT28,120^A@N,10,10^FH\\^CI15^FDQty:^FS^CI0" +
//                                            "^BY2,2,25^FT154,130^BCN,,Y,N" +
//                                            "^FD" + qty + "^FS" +
//                                            "^FT28,180^A@N,10,10^FH\\^FD" + description + "^FS" +
//                                            "^PQ1,0,1,Y^XZ";

                                    if (result) {
                                        String zplData = "^XA^LL240^LS0" +
                                                "^FT15,35" +
                                                "^CF0,16" +
                                                "^FH^CI12^FDLine:" + lineNo + "^FS^CI0" +
                                                "^BY2" +
                                                "^FT120,50" +
                                                "^BCN,40,Y,N" +
                                                "^FD" + itemNo + "^FS" +
                                                "^FT20,90" +
                                                "^CF1,20" +
                                                "^FH^CI12^FD" + description + "^FS^CI0" +
                                                "^FT25,160^BY2" +
                                                "^BEN,60,Y,N" +
                                                "^FD" + barcode + "^FS" +
                                                "^FT240,210" +
                                                "^CF0,16" +
                                                "^FH^CI15" +
                                                "^FDQTY:^FS" +
                                                "^CI0^BY1" +
                                                "^FT290,210" +
                                                "^BCN,50,Y,N" +
                                                "^FD" + qty + "^FS" +
                                                "^FT15,330" +
                                                "^FB200,7,J,0" +
                                                "^CF0,20" +
                                                "^FD" + altno + "^FS" +
                                                "^XZ";
                                        fileHelper.fileWriter("zplData : " + zplData, writer);
                                        printer.sendCommand(zplData);
                                    } else {
                                        String zplData = "^XA^LL240^LS0" +
                                                "^FT15,35" +
                                                "^CF0,16" +
                                                "^FH^CI12^FDLine:" + lineNo + "^FS^CI0" +
                                                "^BY2" +
                                                "^FT90,50" +
                                                "^BCN,40,Y,N" +
                                                "^FD" + itemNo + "^FS" +
                                                "^FT20,90" +
                                                "^CF1,20" +
                                                "^FH^CI12^FD" + description + "^FS^CI0" +
                                                "^FT20,160^BY2" +
                                                "^BCN,60,Y,N" +
                                                "^FD" + barcode + "^FS" +
                                                "^FT240,210" +
                                                "^CF0,16" +
                                                "^FH^CI15" +
                                                "^FDQTY:^FS" +
                                                "^CI0^BY1" +
                                                "^FT290,215" +
                                                "^BCN,50,Y,N" +
                                                "^FD" + qty + "^FS" +
                                                "^FT15,330" +
                                                "^FB200,7,J,0" +
                                                "^CF0,20" +
                                                "^FD" + altno + "^FS" +
                                                "^XZ";
                                        fileHelper.fileWriter("zplData : " + zplData, writer);
                                        printer.sendCommand(zplData);
                                    }

                                }

                            }

                            con.close();
                            executeActionConfig("", AN_PrintSuccess, "");

                        } catch (ConnectionException e) {
                            e.printStackTrace();
                            executeActionConfig("Connection", AN_PrintFailed, "");
                            fileHelper.fileWriter("ConnectionException : " + e.getLocalizedMessage(), writer);

                        } catch (ZebraPrinterLanguageUnknownException e) {
                            e.printStackTrace();
                            executeActionConfig("Language", AN_PrintFailed, "");
                            fileHelper.fileWriter("ZebraPrinterLanguageUnknownException : " + e.getLocalizedMessage(), writer);

                        } catch (Exception e) {
                            e.printStackTrace();
                            executeActionConfig("Error", AN_PrintFailed, "");
                            fileHelper.fileWriter("Final Exception : " + e.getLocalizedMessage(), writer);

                        }
                    });

            disposables.add(d);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_PRINTER)) {
            fileHelper.fileWriter("ActionPlan : " + actionConfig.ActionPlan, writer);

            DA_System da_system = new DA_System(this);
            String printerWidth = da_system.getSystemvals("PrinterWidth");
            final int[] width = {3};
            if (actionConfig.ActionPlan.equalsIgnoreCase("ESCPOS")) {
                try {
                    if (progressdialog != null) {
                        progressdialog.cancel();
                        progressdialog.dismiss();
                        progressdialog = null;
                    }

                    progressdialog = new Dialog(MainActivity.this);
                    progressdialog.setContentView(R.layout.loading_dialog);
                    progressdialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                    progressdialog.setCancelable(false);
                    progressdialog.setCanceledOnTouchOutside(false);
                    progressdialog.getWindow().getAttributes().windowAnimations = R.style.animation;
                    progressdialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);

                    loadingProgress = progressdialog.findViewById(R.id.loadingProgress);
                    percentage = progressdialog.findViewById(R.id.percentage);

                    progressdialog.show();

                } catch (Exception e) {
                    e.printStackTrace();
                }


                da_listConfig = new DA_ListConfig(this);
                this.language = language;
                ArrayList<BE_PrintConfig> updatedPrintConfig = printConfigs;

                if (!actionConfig.ActionValue.isEmpty()) {
                    String queryName = actionConfig.ActionValue;

                    HashMap<String, String> rtn = new HashMap<>();
                    for (BE_QueryConfig query : actionConfigQueries) {
                        if (query.ScreenName.equalsIgnoreCase(queryName)) {
                            String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                            fileHelper.fileWriter("getGroupId Query : " + completeQuery, writer);
                            System.out.println("getGroupId Query : " + completeQuery);
                            rtn = da_dynamics.getgroupId(completeQuery);

                        }
                    }

                    System.out.println("rtn : " + rtn);

                    String groupId = "0";
                    if (rtn != null && !rtn.isEmpty()) {
//                        groupId = groupId + "," + rtn.get("FormatID");
                        groupId = rtn.get("FormatID");
                    }

                    fileHelper.fileWriter("GroupId : " + groupId, writer);

                    DA_FormConfig da_formConfig = new DA_FormConfig(this);
                    updatedPrintConfig = da_formConfig.getPrintConfigsGroupID(screen, language, groupId);   // Used only for Print
                }

                ArrayList<HashMap<String, String>> printFormList = new ArrayList<HashMap<String, String>>();
                ArrayList<HashMap<String, String>> printListvalues = new ArrayList<HashMap<String, String>>();


                if (finalselectvalues.isEmpty()) {
                    selectedListValues = formValues;
                    paramSelectedListValues = formValues;

                    String formQuery = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("formQuery : " + formQuery, writer);
                    System.out.println("formQuery :: " + formQuery);
                    formValues = new HashMap<>();
                    formSpinners = new HashMap<>();
                    if (!formQuery.equals("")) {
                        fileHelper.fileWriter("getFormConfigValues Query : " + formQuery, writer);
                        formValues = da_dynamics.getFormConfigValues(formQuery);
                        System.out.println("formValues :: " + formValues);
                    }

                    printFormList.add(formValues);
                    printListvalues.add(selectedListValues);
                } else {
                    for (int b = 0; b < finalselectvalues.size(); b++) {

                        selectedListValues = finalselectvalues.get(b);
                        paramSelectedListValues = selectedListValues;

                        String formQuery = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        fileHelper.fileWriter("formQuery : " + formQuery, writer);
                        System.out.println("formQuery :: " + formQuery);
                        formValues = new HashMap<>();
                        formSpinners = new HashMap<>();
                        if (!formQuery.equals("")) {
                            fileHelper.fileWriter("getFormConfigValues Query : " + formQuery, writer);
                            formValues = da_dynamics.getFormConfigValues(formQuery);
                            System.out.println("formValues :: " + formValues);
                        }

                        printFormList.add(formValues);
                        printListvalues.add(selectedListValues);

                    }
                }


                PDFGeneratorUtil pdf = new PDFGeneratorUtil(this, da_listConfig, this.language,
                        "sample.pdf", updatedPrintConfig, formValues, screen, selectedListValues, paramFormValues,
                        paramSelectedListValues, system, 2, printFormList, printListvalues);

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {

                    File file = pdf.generatePDF();
                    fileHelper.fileWriter("file : " + file, writer);

                    String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");
                    System.out.println("PrintCopy : " + PrintCopy);
                    fileHelper.fileWriter("PrintCopy : " + PrintCopy, writer);

                    String savedMac = da_dynamics.getMacAddress();
                    fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);
                    ArrayList<String> path = new ArrayList<>();
                    path.add(file.getPath());
                    Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe(ignored -> {

                                printESCPOS(savedMac, path, actionConfig, width[0]);
//                                printESCPOSScript(savedMac, pdf.generateESCPOSScript(maxLength), actionConfig, width[0]);
                            });
                    disposables.add(d);


                }
            } else if (actionConfig.ActionPlan.equalsIgnoreCase("ESCPOS_OLD")) {

                try {
                    if (progressdialog != null) {
                        progressdialog.cancel();
                        progressdialog.dismiss();
                        progressdialog = null;
                    }

                    progressdialog = new Dialog(MainActivity.this);
                    progressdialog.setContentView(R.layout.loading_dialog);
                    progressdialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                    progressdialog.setCancelable(false);
                    progressdialog.setCanceledOnTouchOutside(false);
                    progressdialog.getWindow().getAttributes().windowAnimations = R.style.animation;
                    progressdialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);

                    loadingProgress = progressdialog.findViewById(R.id.loadingProgress);
                    percentage = progressdialog.findViewById(R.id.percentage);

                    progressdialog.show();

                } catch (Exception e) {
                    e.printStackTrace();
                }

                da_listConfig = new DA_ListConfig(this);
                this.language = language;
                ArrayList<BE_PrintConfig> updatedPrintConfig = printConfigs;

                if (!actionConfig.ActionValue.isEmpty()) {
                    String queryName = actionConfig.ActionValue;

                    HashMap<String, String> rtn = new HashMap<>();
                    for (BE_QueryConfig query : actionConfigQueries) {
                        if (query.ScreenName.equalsIgnoreCase(queryName)) {
                            String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                            fileHelper.fileWriter("getGroupId Query : " + completeQuery, writer);
                            System.out.println("getGroupId Query : " + completeQuery);
                            rtn = da_dynamics.getgroupId(completeQuery);

                        }
                    }

                    System.out.println("rtn : " + rtn);

                    String groupId = "0";
                    if (rtn != null && !rtn.isEmpty()) {
//                        groupId = groupId + "," + rtn.get("FormatID");
                        groupId = rtn.get("FormatID");
                    }


                    DA_FormConfig da_formConfig = new DA_FormConfig(this);
                    updatedPrintConfig = da_formConfig.getPrintConfigsGroupID(screen, language, groupId);   // Used only for Print
                }

                System.out.println("Print formValues : " + formValues);
                System.out.println("Print selectedListValues : " + selectedListValues);
                System.out.println("updatedPrintConfig : " + updatedPrintConfig);
                System.out.println("formValuess : " + formValuess);


                ArrayList<HashMap<String, String>> printFormList = new ArrayList<HashMap<String, String>>();
                ArrayList<HashMap<String, String>> printListvalues = new ArrayList<HashMap<String, String>>();

                for (int b = 0; b < finalselectvalues.size(); b++) {

                    selectedListValues = finalselectvalues.get(b);
                    paramSelectedListValues = selectedListValues;

                    String formQuery = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("formQuery : " + formQuery, writer);
                    System.out.println("formQuery :: " + formQuery);
                    formValues = new HashMap<>();
                    formSpinners = new HashMap<>();
                    if (!formQuery.equals("")) {
                        fileHelper.fileWriter("getFormConfigValues Query : " + formQuery, writer);
                        formValues = da_dynamics.getFormConfigValues(formQuery);
                        System.out.println("formValues :: " + formValues);
                    }

                    printFormList.add(formValues);
                    printListvalues.add(selectedListValues);
                }


                PDFGeneratorUtil pdf = new PDFGeneratorUtil(this, da_listConfig, this.language,
                        "sample.pdf", updatedPrintConfig, formValues, screen, selectedListValues, paramFormValues,
                        paramSelectedListValues, system, 2, printFormList, printListvalues);

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {

                    File file = pdf.generatePDF();
                    fileHelper.fileWriter("file : " + file, writer);

                    String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");
                    System.out.println("PrintCopy : " + PrintCopy);
                    fileHelper.fileWriter("PrintCopy : " + PrintCopy, writer);

                    String savedMac = da_dynamics.getMacAddress();
                    fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);

                    ArrayList<String> filePaths = new ArrayList<>();
                    filePaths.add(file.getPath());

                    Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe(ignored -> {
                                printESCPOS(savedMac, filePaths, actionConfig, width[0]);
                            });
                    disposables.add(d);


                }

            } else if (actionConfig.ActionPlan.equalsIgnoreCase("ESCPOS_OBSOLET")) {//ESCPOS

                String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");
                System.out.println("PrintCopy : " + PrintCopy);

                String savedMac = da_dynamics.getMacAddress();
                fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);

                ArrayList<String> filePaths = new ArrayList<>();
                try {
                    for (int a = 0; a < webViewArrayList.size(); a++) {

                        int pageWidth = 72 * 2;
                        if (printerWidth != null && !printerWidth.isEmpty()) {
                            width[0] = parseInt(printerWidth);
                            pageWidth = 72 * width[0];
                        }

                        int contentHeight = (int) Math.ceil(pageWidth * webViewArrayList.get(a).getMeasuredHeight() / webViewArrayList.get(a).getMeasuredWidth());

                        // Create a PDF document
                        PdfDocument document = new PdfDocument();
                        PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                        PdfDocument.Page page2 = document.startPage(pageInfo);

                        // Draw the WebView content to the PDF page
                        Canvas canvas = page2.getCanvas();
                        float scale = (float) pageWidth / webViewArrayList.get(a).getWidth();
                        canvas.scale(scale, scale);
                        webViewArrayList.get(a).draw(canvas);
                        document.finishPage(page2);

                        document.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf"));
                        document.close();
                        File file = new File(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf");
                        if (file.exists()) {
                            filePaths.add(file.getPath());
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    fileHelper.fileWriter("Printer Exception 1 : " + e.getLocalizedMessage(), writer);

                }
                fileHelper.fileWriter("Printer filePaths : " + filePaths, writer);

                printESCPOS(savedMac, filePaths, actionConfig, width[0]);

                if (!actionConfig.ActionValue.isEmpty()) {

                    LinearLayout linearLayout = new LinearLayout(this);

                    String queryName = actionConfig.ActionValue;

                    HashMap<String, String> rtn = new HashMap<>();
                    for (BE_QueryConfig query : actionConfigQueries) {
                        if (query.ScreenName.equalsIgnoreCase(queryName)) {
                            String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                            fileHelper.fileWriter("getGroupId Query : " + completeQuery, writer);
                            System.out.println("getGroupId Query : " + completeQuery);
                            rtn = da_dynamics.getgroupId(completeQuery);

                        }
                    }

                    System.out.println("rtn : " + rtn);

                    String groupId = "0";
                    if (rtn != null && !rtn.isEmpty()) {
//                        groupId = groupId + "," + rtn.get("FormatID");
                        groupId = rtn.get("FormatID");
                    }


                    DA_FormConfig da_formConfig = new DA_FormConfig(this);
                    printConfigs = da_formConfig.getPrintConfigsGroupID(screen, language, groupId);   // Used only for Print

                    webViewArrayList = new ArrayList<WebView>();

                    if (finalselectvalues != null && !finalselectvalues.isEmpty()) {
                        System.out.println("finalselectvalues : " + finalselectvalues);

                        for (int i = 0; i < this.finalselectvalues.size(); i++) {

                            selectedListValues = finalselectvalues.get(i);
                            paramSelectedListValues = selectedListValues;

                            String formQuery = ut_common.getQuery(queryFormConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                            fileHelper.fileWriter("formQuery : " + formQuery, writer);
                            System.out.println("formQuery :: " + formQuery);
                            formValues = new HashMap<>();
                            formSpinners = new HashMap<>();
                            if (!formQuery.equals("")) {
                                fileHelper.fileWriter("getFormConfigValues Query : " + formQuery, writer);
                                formValues = da_dynamics.getFormConfigValues(formQuery);
                                System.out.println("formValues :: " + formValues);
                            }

//                                WebView webView = new WebView(this);
                            WebView webView = findViewById(R.id.webView2);
                            webView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
                            webView.setVisibility(View.VISIBLE);
                            webView.getSettings().setLoadWithOverviewMode(true);
                            webView.getSettings().setUseWideViewPort(true);
                            webView.getSettings().setBuiltInZoomControls(true);
                            webView.getSettings().setSupportZoom(true);

                            System.out.println("printListConfig 1 : " + printListConfig);
                            HtmlfileViewer htmlFile = new HtmlfileViewer();
                            linesPrinted = htmlFile.htmlFileCreate(MainActivity.this, screen, printConfigs, printListConfig, da_dynamics, da_queryConfig, system, ut_common, formValues, selectedListValues, paramFormValues, paramSelectedListValues, fileHelper, i, language, (screenWidth / 100.0));
                            webView.setWebViewClient(new WebViewClient());
                            webView.getSettings().setAllowContentAccess(true);
                            webView.getSettings().setAllowFileAccess(true);
                            webView.getSettings().setJavaScriptEnabled(true);

                            String folder = "Report/";
                            String file_name = "Html_" + i;
                            String file_format = ".html";
                            File root = new File(fileHelper.getSalesDirectoryPath(), folder);
                            String fullName = root + "/" + file_name + file_format;

                            if (new File(fullName).exists()) {
                                webView.loadUrl(fullName);
                            }

                            int finalI = i;
                            int finalI1 = i;
                            webView.setWebViewClient(new WebViewClient() {
                                @Override
                                public void onPageCommitVisible(WebView view, String url) {
                                    super.onPageCommitVisible(view, url);
                                }

                                @Override
                                public void onPageFinished(WebView view, String url) {
                                    super.onPageFinished(view, url);

                                    webViewArrayList.add(view);

                                    Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                                            .subscribeOn(Schedulers.io())
                                            .observeOn(AndroidSchedulers.mainThread())
                                            .subscribe(ignored -> {
                                                printMultiformat(printerWidth, width, savedMac, webViewArrayList, actionConfig);
                                            });
                                    disposables.add(d);
                                }


                            });

//                                linearLayout.addView(webView);

                        }

                    }

                }
            } else if (actionConfig.ActionPlan.contains("SUNMI")) {

                ArrayList<String> filePaths = new ArrayList<>();
                try {
                    for (int a = 0; a < webViewArrayList.size(); a++) {

                        int pageWidth = 72 * 3;

                        if (printerWidth != null && !printerWidth.isEmpty()) {
                            width[0] = parseInt(printerWidth);
                            pageWidth = 72 * width[0];
                        }

                        int contentHeight = (int) Math.ceil(pageWidth * webViewArrayList.get(a).getMeasuredHeight() / webViewArrayList.get(a).getMeasuredWidth());

                        // Create a PDF document
                        PdfDocument document = new PdfDocument();
                        PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                        PdfDocument.Page page2 = document.startPage(pageInfo);

                        // Draw the WebView content to the PDF page
                        Canvas canvas = page2.getCanvas();
                        float scale = (float) pageWidth / webViewArrayList.get(a).getWidth();
                        canvas.scale(scale, scale);
                        webViewArrayList.get(a).draw(canvas);
                        document.finishPage(page2);

                        document.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf"));
                        document.close();
                        File file = new File(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf");
                        if (file.exists()) {
                            filePaths.add(file.getPath());
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    fileHelper.fileWriter("Printer Exception 1 : " + e.getLocalizedMessage(), writer);

                }
                fileHelper.fileWriter("Printer filePaths : " + filePaths, writer);

                printSunmi(filePaths, actionConfig, this.getApplicationContext(), width[0]);
            } else if (actionConfig.ActionPlan.contains("HONEYWELL")) {
                String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");
                System.out.println("PrintCopy : " + PrintCopy);

                String savedMac = da_dynamics.getMacAddress();
                fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);
                ArrayList<String> filePaths = new ArrayList<>();
                try {
                    for (int a = 0; a < webViewArrayList.size(); a++) {

                        int pageWidth = 72 * 4;
                        if (printerWidth != null && !printerWidth.isEmpty()) {
                            width[0] = parseInt(printerWidth);
                            pageWidth = 72 * width[0];
                        }

                        int contentHeight = (int) Math.ceil(pageWidth * webViewArrayList.get(a).getMeasuredHeight() / webViewArrayList.get(a).getMeasuredWidth());

                        // Create a PDF document
                        PdfDocument document = new PdfDocument();
                        PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                        PdfDocument.Page page2 = document.startPage(pageInfo);

                        // Draw the WebView content to the PDF page
                        Canvas canvas = page2.getCanvas();
                        float scale = (float) pageWidth / webViewArrayList.get(a).getWidth();
                        canvas.scale(scale, scale);
                        webViewArrayList.get(a).draw(canvas);
                        document.finishPage(page2);

                        document.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf"));
                        document.close();
                        File file = new File(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf");
                        if (file.exists()) {
                            filePaths.add(file.getPath());
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    fileHelper.fileWriter("Printer Exception 1 : " + e.getLocalizedMessage(), writer);

                }
                fileHelper.fileWriter("Printer filePaths : " + filePaths, writer);

                printOneil(savedMac, filePaths, actionConfig, width[0]);
            } else if (actionConfig.ActionPlan.equalsIgnoreCase("vida")) {

                Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                        .subscribeOn(Schedulers.io())
                        .observeOn(AndroidSchedulers.mainThread())
                        .subscribe(ignored -> {

                            try {

                                String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");
                                System.out.println("PrintCopy : " + PrintCopy);

                                String savedMac = da_dynamics.getMacAddress();
                                System.out.println("savedMac : " + savedMac);

                                fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);
                                Connection con = new com.zebra.sdk.comm.BluetoothConnection(savedMac);
                                con.open();

//                                SGD.SET("device.languages", "ZPL", con);
                                printer = ZebraPrinterFactory.getInstance(con);
//                                printer.sendCommand("! U1 setvar \"device.languages\" \"zpl\"\r\n");


                                for (int a = 0; a < webViewArrayList.size(); a++) {

                                    //72 is 1 inch
                                    int pageWidth = 72 * 4;
                                    if (printerWidth != null && !printerWidth.isEmpty()) {
                                        width[0] = parseInt(printerWidth);
                                        pageWidth = 72 * width[0];
                                    }

                                    int contentHeight = (int) Math.ceil(pageWidth * webViewArrayList.get(a).getMeasuredHeight() / webViewArrayList.get(a).getMeasuredWidth());

                                    // Create a PDF document
                                    PdfDocument document = new PdfDocument();
                                    PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                                    PdfDocument.Page page2 = document.startPage(pageInfo);

                                    // Draw the WebView content to the PDF page
                                    Canvas canvas = page2.getCanvas();
                                    float scale = (float) pageWidth / webViewArrayList.get(a).getWidth();
                                    canvas.scale(scale, scale);
                                    webViewArrayList.get(a).draw(canvas);
                                    document.finishPage(page2);

                                    document.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf"));
                                    document.close();


                                    int printSize = 1;

                                    if (PrintCopy != null && !PrintCopy.isEmpty() && !PrintCopy.equals("0")) {
                                        printSize = parseInt(PrintCopy);
                                    }

                                    //I assume for now its zebra only for now
                                    File file = new File(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf");
                                    if (file.exists()) {

                                        ParcelFileDescriptor pfd = ParcelFileDescriptor.open(
                                                file,
                                                ParcelFileDescriptor.MODE_READ_ONLY
                                        );

                                        PdfRenderer renderer = new PdfRenderer(pfd);
                                        int paperWidth = 576;
                                        if (width != null && !width.toString().isEmpty()) {
                                            paperWidth = 192 * width[0];
                                        }

                                        for (int j = 0; j < printSize; j++) {
                                            for (int i = 0; i < renderer.getPageCount(); i++) {
                                                PdfRenderer.Page page = renderer.openPage(i);
                                                int paperHeight = page.getHeight() * paperWidth / page.getWidth();
                                                Bitmap bmp = Bitmap.createBitmap(
                                                        paperWidth,
                                                        paperHeight,
                                                        Bitmap.Config.ARGB_8888
                                                );
                                                Canvas canvasWhite = new Canvas(bmp);
                                                canvasWhite.drawColor(Color.WHITE);
                                                page.render(
                                                        bmp,
                                                        null,
                                                        null,
                                                        PdfRenderer.Page.RENDER_MODE_FOR_PRINT
                                                );
                                                ZebraImageAndroid image = new ZebraImageAndroid(bmp);
                                                double llHeight = Math.ceil(paperHeight * 203 / 192);

                                                printer.sendCommand("^XA^LL" + llHeight + "^XZ");
                                                printer.printImage(image, 0, 0, paperWidth, paperHeight, false);
//                                                printer.sendCommand("^XA^FD  ^FS^XZ");
                                                bmp.recycle();
                                                page.close();
                                            }
                                        }

                                        renderer.close();
                                    }
                                }

                                con.close();
                                executeActionConfig("", AN_PrintSuccess, "");

                            } catch (ZebraPrinterLanguageUnknownException e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("ZebraPrinterLanguageUnknownException : " + e.getLocalizedMessage(), writer);

                            } catch (ConnectionException e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("ConnectionException : " + e.getLocalizedMessage(), writer);

                            } catch (IOException e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("IOException : " + e.getLocalizedMessage(), writer);

                            } catch (Exception e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("Exception : " + e.getLocalizedMessage(), writer);

                            }
                        });

                disposables.add(d);
            } else if (actionConfig.ActionPlan.equals("ZEBRA")) {

                Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                        .subscribeOn(Schedulers.io())
                        .observeOn(AndroidSchedulers.mainThread())
                        .subscribe(ignored -> {

                            try {

                                String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");
                                System.out.println("PrintCopy : " + PrintCopy);

                                String savedMac = da_dynamics.getMacAddress();
                                fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);
                                Connection con = new com.zebra.sdk.comm.BluetoothConnection(savedMac);
                                con.open();

//                                SGD.SET("device.languages", "ZPL", con);
                                printer = ZebraPrinterFactory.getInstance(con);
//                                printer.sendCommand("! U1 setvar \"device.languages\" \"zpl\"\r\n");


                                for (int a = 0; a < webViewArrayList.size(); a++) {

                                    //72 is 1 inch
                                    int pageWidth = 72 * 3;
                                    if (printerWidth != null && !printerWidth.isEmpty()) {
                                        width[0] = parseInt(printerWidth);
                                        pageWidth = 72 * width[0];
                                    }

                                    int contentHeight = (int) Math.ceil(pageWidth * webViewArrayList.get(a).getMeasuredHeight() / webViewArrayList.get(a).getMeasuredWidth());

                                    // Create a PDF document
                                    PdfDocument document = new PdfDocument();
                                    PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                                    PdfDocument.Page page2 = document.startPage(pageInfo);

                                    // Draw the WebView content to the PDF page
                                    Canvas canvas = page2.getCanvas();
                                    float scale = (float) pageWidth / webViewArrayList.get(a).getWidth();
                                    canvas.scale(scale, scale);
                                    webViewArrayList.get(a).draw(canvas);
                                    document.finishPage(page2);

                                    document.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf"));
                                    document.close();


                                    int printSize = 1;

                                    if (PrintCopy != null && !PrintCopy.isEmpty() && !PrintCopy.equals("0")) {
                                        printSize = parseInt(PrintCopy);
                                    }

                                    //I assume for now its zebra only for now
                                    File file = new File(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf");
                                    if (file.exists()) {

                                        ParcelFileDescriptor pfd = ParcelFileDescriptor.open(
                                                file,
                                                ParcelFileDescriptor.MODE_READ_ONLY
                                        );

                                        PdfRenderer renderer = new PdfRenderer(pfd);
                                        int paperWidth = 576;

                                        if (!width.toString().isEmpty()) {
                                            paperWidth = 192 * width[0];
                                        }

                                        for (int j = 0; j < printSize; j++) {
                                            for (int i = 0; i < renderer.getPageCount(); i++) {
                                                PdfRenderer.Page page = renderer.openPage(i);
                                                int paperHeight = page.getHeight() * paperWidth / page.getWidth();
                                                Bitmap bmp = Bitmap.createBitmap(
                                                        paperWidth,
                                                        paperHeight,
                                                        Bitmap.Config.ARGB_8888
                                                );
                                                Canvas canvasWhite = new Canvas(bmp);
                                                canvasWhite.drawColor(Color.WHITE);
                                                page.render(
                                                        bmp,
                                                        null,
                                                        null,
                                                        PdfRenderer.Page.RENDER_MODE_FOR_PRINT
                                                );
                                                ZebraImageAndroid image = new ZebraImageAndroid(bmp);
                                                double llHeight = Math.ceil(paperHeight * 203 / 192);


                                                printer.sendCommand("^XA^LL" + llHeight + "^XZ");
                                                printer.printImage(image, 0, 0, paperWidth, paperHeight, false);
//                                                printer.sendCommand("^XA^FD  ^FS^XZ");
                                                bmp.recycle();
                                                page.close();
                                            }
                                        }

                                        renderer.close();
                                    }
                                }

                                con.close();
                                executeActionConfig("", AN_PrintSuccess, "");

                            } catch (ZebraPrinterLanguageUnknownException e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("ZebraPrinterLanguageUnknownException : " + e.getLocalizedMessage(), writer);

                            } catch (ConnectionException e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("ConnectionException : " + e.getLocalizedMessage(), writer);

                            } catch (IOException e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("IOException : " + e.getLocalizedMessage(), writer);

                            } catch (Exception e) {
                                e.printStackTrace();
                                executeActionConfig("", AN_PrintFailed, "");
                                fileHelper.fileWriter("Exception : " + e.getLocalizedMessage(), writer);

                            }
                        });

                disposables.add(d);
            } else if (actionConfig.ActionPlan.equalsIgnoreCase("DASCOM")) {
                runOnUiThread(() -> {
                    try {
                        if (progressdialog != null) {
                            progressdialog.cancel();
                            progressdialog.dismiss();
                            progressdialog = null;
                        }

                        progressdialog = new Dialog(MainActivity.this);
                        progressdialog.setContentView(R.layout.loading_dialog);
                        progressdialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                        progressdialog.setCancelable(false);
                        progressdialog.setCanceledOnTouchOutside(false);
                        progressdialog.getWindow().getAttributes().windowAnimations = R.style.animation;
                        progressdialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);

                        loadingProgress = progressdialog.findViewById(R.id.loadingProgress);
                        percentage = progressdialog.findViewById(R.id.percentage);

                        progressdialog.show();

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                });

                String savedMac = da_dynamics.getMacAddress();

                boolean connected = false;
                BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
                BluetoothDevice bluetoothDevice = bluetoothAdapter.getRemoteDevice(savedMac);

                BluetoothSocket socket = null;
                try {
                    Method m = bluetoothDevice.getClass().getMethod("createInsecureRfcommSocket", new Class[]{int.class});
                    socket = (BluetoothSocket) m.invoke(bluetoothDevice, 1);
                } catch (NoSuchMethodException e) {
                    fileHelper.fileWriter("Dascom printer : Could not invoke createRfcommSocket.", writer);
                    e.printStackTrace();
                    connected = false;
                } catch (IllegalArgumentException e) {
                    fileHelper.fileWriter("Dascom printer : Bad argument with createRfcommSocket.", writer);
                    connected = false;
                    e.printStackTrace();

                } catch (IllegalAccessException e) {
                    fileHelper.fileWriter("Dascom printer : Illegal access with createRfcommSocket.", writer);
                    connected = false;
                    e.printStackTrace();

                } catch (InvocationTargetException e) {
                    fileHelper.fileWriter("Dascom printer : Invocation target exception: createRfcommSocket.", writer);
                    connected = false;
                    e.printStackTrace();

                }


                if (bluetoothAdapter.isDiscovering()) {
                    bluetoothAdapter.cancelDiscovery();
                }

                fileHelper.fileWriter("Dascom printer : Connecting socket...", writer);

                try {
                    socket.connect();
                    fileHelper.fileWriter("Dascom printer : Socket connected.", writer);
                    connected = true;
                } catch (IOException e) {
                    try {
                        fileHelper.fileWriter("Dascom printer : Failed to connect socket.", writer);
                        socket.close();
                        connected = false;
                        fileHelper.fileWriter("Dascom printer : Socket closed because of an error. " + e.getLocalizedMessage(), writer);

                    } catch (IOException eb) {
                        fileHelper.fileWriter("Dascom printer : Also failed to close socket." + eb.getLocalizedMessage(), writer);
                        connected = false;
                    }

                }
                if (connected) {
                    try {
                        OutputStream outStream = new BufferedOutputStream(socket.getOutputStream());
                        Disposable disp = Observable.create(emitter -> {
                            try {
                                fileHelper.fileWriter("Dascom printer : Output stream open.", writer);
                                for (int a = 0; a < webViewArrayList.size(); a++) {
                                    //72 is 1 inch
                                    int pageWidth = 72 * 3;
                                    if (printerWidth != null && !printerWidth.isEmpty()) {
                                        width[0] = parseInt(printerWidth);
                                        pageWidth = 72 * width[0];
                                    }

                                    int contentHeight = (int) Math.ceil(pageWidth * webViewArrayList.get(a).getMeasuredHeight() / webViewArrayList.get(a).getMeasuredWidth());

                                    // Create a PDF document
                                    PdfDocument document = new PdfDocument();
                                    PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                                    PdfDocument.Page page2 = document.startPage(pageInfo);

                                    // Draw the WebView content to the PDF page
                                    Canvas canvas = page2.getCanvas();
                                    float scale = (float) pageWidth / webViewArrayList.get(a).getWidth();
                                    canvas.scale(scale, scale);
                                    webViewArrayList.get(a).draw(canvas);
                                    document.finishPage(page2);

                                    document.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf"));
                                    document.close();


                                    int printSize = 1;

                                    //I assume for now its zebra only for now
                                    File file = new File(fileHelper.getSalesDirectoryPath() + "/Report/FinalHtml_" + a + ".pdf");
                                    if (file.exists()) {
                                        ParcelFileDescriptor pfd = ParcelFileDescriptor.open(
                                                file, ParcelFileDescriptor.MODE_READ_ONLY
                                        );
                                        PdfRenderer renderer = new PdfRenderer(pfd);
                                        for (int i = 0; i < renderer.getPageCount(); i++) {

                                            PdfRenderer.Page page = renderer.openPage(i);
                                            int width2 = (int) (65 * 192 / 25.4);
                                            int height = page.getHeight() * width2 / page.getWidth();
                                            Bitmap bitmap = Bitmap.createBitmap(width2, height, Bitmap.Config.ARGB_8888);
                                            page.render(bitmap, null, null, PdfRenderer.Page.RENDER_MODE_FOR_PRINT);
                                            List<Bitmap> images = chunkImage(bitmap, bitmap.getHeight(), pagingHeight);
                                            long startTimeSending = System.currentTimeMillis();
                                            for (int j = 0; j < images.size(); j++) {
                                                ParseBitmap parse = new ParseBitmap(images.get(j));
                                                String value = parse.ExtractGraphicsDataForCPCL(0, 0);
                                                emitter.onNext(images.get(j).getHeight() + "@@" + value);
                                            }
                                            page.close();
                                        }
                                        renderer.close();
                                    }
                                }
                                emitter.onComplete();
                            } catch (IOException e) {
                                emitter.onError(e);
                            } catch (Exception e) {
                                emitter.onError(e);
                            }
                        }).flatMap(s -> Observable.fromCallable(() -> {
                            String[] split = s.toString().split("@@");
                            String height = split[0];
                            String value = split[1];
                            String data = "! 0 200 200 <height> 1\r\n" +
                                    "ON-FEED IGNORE\r\n"
                                    + "<REPLACER>\r\n"
                                    + "PRINT\r\n";
                            data = data.replace("<REPLACER>", value).replace("<height>", height);
                            byte[] dataImage = data.getBytes();
//
                            int chunkSize = 1024; // Define the chunk size here
                            int offset = 0;
                            while (offset < dataImage.length) {
                                int length = Math.min(dataImage.length - offset, chunkSize);
                                byte[] chunk = new byte[length];
                                System.arraycopy(dataImage, offset, chunk, 0, length);

                                // Write the chunk to the output stream (assuming outStream is defined)
                                outStream.write(chunk);
                                outStream.flush();
                                offset += length;
                            }
                            try {
                                Thread.sleep(dataImage.length * 100 / 1024);
                            } catch (InterruptedException e) {
                                throw new RuntimeException(e);
                            }
                            return "";
                        })).doOnComplete(() -> {
                            outStream.close();
                            if (progressdialog != null) {
                                progressdialog.dismiss();
                            }
                            if (progressdialog != null) {
                                progressdialog.dismiss();
                            }
                            executeActionConfig("", AN_PrintSuccess, "");
                        }).doOnError(throwable -> {
                            outStream.close();
                            Log.d(TAG, "doError: " + throwable.getMessage());
                            if (progressdialog != null) {
                                progressdialog.dismiss();
                            }
                            executeActionConfig("", AN_PrintFailed, "");
                        }).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe();
                        disposables.add(disp);
                    } catch (Exception e) {
                        if (progressdialog != null) {
                            progressdialog.dismiss();
                        }
                        executeActionConfig("", AN_PrintFailed, "");
                    }
                } else {
                    if (progressdialog != null) {
                        progressdialog.dismiss();
                    }
                    executeActionConfig("", AN_PrintFailed, "");
                }

            } else {
                for (int i = 0; i < finalselectvalues.size(); i++) {

                    if (actionConfig.ActionPlan.equalsIgnoreCase("Woosim")) {
                        processData(i);
                    }

                }
            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DELETESYSCON)) {

            deletesysconfile();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DELETEPHOTO)) {

            deletePhotofile();

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DELETEXML)) {
            deletexmlfile();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DELETESALESDB)) {
//            deleteSalesDB();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SHARE)) {

            for (int a = 0; a < webViewArrayList.size(); a++) {
                try {

                    PrintAttributes.Builder printAttributesBuilder = new PrintAttributes.Builder();
                    printAttributesBuilder.setMediaSize(PrintAttributes.MediaSize.ISO_A4); // Change this to your desired media size

                    int marginLeft = 0;
                    int marginTop = 0;
                    int marginRight = 0;
                    int marginBottom = 0;

                    PrintAttributes.Margins margins = new PrintAttributes.Margins(marginLeft, marginTop, marginRight, marginBottom);
                    printAttributesBuilder.setMinMargins(margins);
                    printAttributesBuilder.setResolution(new PrintAttributes.Resolution("RESOLUTION_ID", "RESOLUTION_ID", 100, 100));

                    PrintAttributes printAttributes = printAttributesBuilder.build();
                    PdfDocument pdfDocument = new PrintedPdfDocument(MainActivity.this, printAttributes);


                    // Create a PDF document
                    PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(webViewArrayList.get(a).getWidth(), webViewArrayList.get(a).getMeasuredHeight(), 1).create();
                    PdfDocument.Page page2 = pdfDocument.startPage(pageInfo);

                    // Draw the WebView content to the PDF page
                    Canvas canvas = page2.getCanvas();
                    webViewArrayList.get(a).draw(canvas);
                    pdfDocument.finishPage(page2);
                    try {
                        if (pdfFilename != null && !pdfFilename.isEmpty()) {
                            if (pdfFilename.get(a) != null) {
                                pdfDocument.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/" + pdfFilename.get(a) + ".pdf"));
                                pdfDocument.close();
                            } else {
                                String name = screen + "_ShareFilename";

                                System.out.println("name : " + name);
                                BE_QueryConfig queryConfigs = da_queryConfig.getQueryConfig(name);

                                if (queryConfigs.ScreenName.equalsIgnoreCase(name)) {
                                    System.out.println("query : " + queryConfigs);

                                    String completeQuery = ut_common.getQuery(queryConfigs, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                                    String fileName = da_dynamics.NoexecuteQuery(completeQuery);

                                    pdfDocument.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/" + fileName + ".pdf"));
                                    pdfDocument.close();

                                }
                            }
                        } else {
                            String name = screen + "_ShareFilename";

                            System.out.println("name : " + name);
                            BE_QueryConfig queryConfigs = da_queryConfig.getQueryConfig(name);

                            if (queryConfigs.ScreenName.equalsIgnoreCase(name)) {
                                System.out.println("query : " + queryConfigs);

                                String completeQuery = ut_common.getQuery(queryConfigs, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                                String fileName = da_dynamics.NoexecuteQuery(completeQuery);

                                pdfDocument.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/" + fileName + ".pdf"));
                                pdfDocument.close();

                            }

                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                        String name = screen + "_ShareFilename";
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }


            ArrayList<Uri> uriArrayList = new ArrayList<>();

            System.out.println("putParcelableArrayListExtra : " + finalselectvalues.size());
            System.out.println("pdfFilename : " + pdfFilename);

            if (!finalselectvalues.isEmpty()) {

                for (int i = 0; i < finalselectvalues.size(); i++) {

                    String file = fileHelper.getSalesDirectoryPath() + "/Report/" + pdfFilename.get(i) + ".pdf";
                    System.out.println("PDFPATH : " + file);
                    Uri photoURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".fileprovider", new File(file));
                    uriArrayList.add(photoURI);

                }
            } else {
                String name = screen + "_ShareFilename";

                System.out.println("name : " + name);
                BE_QueryConfig queryConfigs = da_queryConfig.getQueryConfig(name);

                if (queryConfigs.ScreenName.equalsIgnoreCase(name)) {
                    System.out.println("query : " + queryConfigs);

                    String completeQuery = ut_common.getQuery(queryConfigs, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    String fileName = da_dynamics.NoexecuteQuery(completeQuery);
                    String file = fileHelper.getSalesDirectoryPath() + "/Report/" + fileName + ".pdf";
                    System.out.println("PDFPATH : " + file);
                    Uri photoURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".fileprovider", new File(file));
                    uriArrayList.add(photoURI);
                }


            }

            Intent intent = new Intent(Intent.ACTION_SEND_MULTIPLE);
            intent.setType("application/pdf");
            intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, uriArrayList);
            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            startActivity(Intent.createChooser(intent, "Choose"));

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_REFRESHCONFIG)) {
            DA_ActionConfig da_actionConfig = new DA_ActionConfig(this);
            da_actionConfig_child = da_actionConfig.getActionConfigs(mScreenName, ut_sp.getStringValue(SP_ACCESS_LEVEL));
            fileHelper.fileWriter("REFRESHCONFIG Called", writer);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SOUNDPASS)) {
            ToneGenerator toneGen1 = new ToneGenerator(AudioManager.STREAM_MUSIC, 100);
            toneGen1.startTone(ToneGenerator.TONE_CDMA_ONE_MIN_BEEP, 150);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SOUNDFAIL)) {
            ToneGenerator toneGen1 = new ToneGenerator(AudioManager.STREAM_MUSIC, 100);
            toneGen1.startTone(ToneGenerator.TONE_CDMA_CALLDROP_LITE, 250);
            Toast.makeText(getApplicationContext(), "FAILED", Toast.LENGTH_SHORT).show();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATESERVERACCESS)) {

            String status = da_dynamics.getOfflineStatus();
            System.out.println("AT_UPDATESERVERACCESS :: " + status);


            UpdateToserver serverUpdate = new UpdateToserver(this, actionConfig, ut_sp, fileHelper);
            HashMap<String, String> rtn = new HashMap<>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    fileHelper.fileWriter("getUpdateserverConfigValues Query UPDATESERVERACCESS : " + completeQuery, writer);
                    rtn = da_dynamics.getUpdateserverConfigValues(completeQuery);
                }
            }
            fileHelper.fileWriter("getUpdateserverConfigValues value UPDATESERVERACCESS : " + rtn, writer);

            serverUpdate.ServercallAccess(rtn);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_AUTOSYNC)) {
            if (!NetworkUtil.isOnline(this)) {
                executeActionConfig(actionConfig.FieldName, AN_SyncFailedNoConnection, "");
                progressdialog.dismiss();

                //   executeActionConfig(actionConfig.FieldName, AN_SyncFailed, "");
                NetworkUtil.showNoConnectionDialog(this);

            } else {

                String status = da_dynamics.getOfflineStatus();

                if (status != null && !status.isEmpty() && status.equals("1")) {
                    executeActionConfig(actionConfig.FieldName, AN_DataSyncSuccess, "");
                } else {
                    if (!actionConfig.ActionPlan.isEmpty()) {

                        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
                        String Query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        HashMap<String, String> MDT = new HashMap<>();
                        fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + Query, writer);
                        MDT = da_dynamics.LastDocNoexecuteQuery(Query);

                        ut_sp.setStringValue(UT_Constants.SQL_MDTNO, MDT.get(SQL_MDTNO));
                    }

                    ut_sp.setStringValue(ACTIONVALUE_DATASYNC, actionConfig.ActionValue);

                    int a = parseInt(actionConfig.ActionValue);
                    int b = 1000 * a;

                    t = new Timer();
                    t.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            DatasyncAsync dataSync = new DatasyncAsync(MainActivity.this, actionConfig.FieldName, POSTURL, da_queryConfig, ut_common, formValues, fileHelper);
                            dataSync.doSyncProcess();
                        }
                    }, 0, b);
                }
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_TIMERSTOP)) {
            System.out.println("TIMER STOP CALLED : " + countDownTimer);
            try {

                if (countDownTimer != null) {
                    countDownTimer.cancel();
                    countDownTimer = null;

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATEXMLFILE)) {
            updatexml();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_FINDBLUETOOTH)) {

            bluetoothFieldName = actionConfig.FieldName;

            if (Build.VERSION.SDK_INT >= 31) {

                String[] permission = new String[3];
                permission[0] = Manifest.permission.BLUETOOTH_SCAN;
                permission[1] = Manifest.permission.BLUETOOTH_CONNECT;
                permission[2] = Manifest.permission.ACCESS_FINE_LOCATION;
                int blueToothPermission = ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN);
                int blueToothPermission2 = ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT);
                int blueToothPermission3 = ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION);

                try {
                    if (broadcastReceiver != null) {
                        unregisterReceiver(broadcastReceiver);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }


                if (blueToothPermission != PackageManager.PERMISSION_GRANTED ||
                        blueToothPermission2 != PackageManager.PERMISSION_GRANTED ||
                        blueToothPermission3 != PackageManager.PERMISSION_GRANTED) {
                    // We don't have permission so prompt the user
                    ActivityCompat.requestPermissions(
                            this, permission, REQUEST_BLUETOOTH
                    );
                } else {
                    fileHelper.fileWriter("executeQuery Query : " + "delete from tbl_PrintBluetooth", writer);
                    da_dynamics.executeQuery("delete from tbl_PrintBluetooth");
                    broadcast = da_dynamics.getBroadcast();
                    System.out.println("BroadCast :: " + broadcast);
                    fileHelper.fileWriter("BroadCast : " + broadcast, writer);

                    IntentFilter filter = new IntentFilter();
                    filter.addAction(BluetoothDevice.ACTION_FOUND);
//                    filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);
//                    filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
                    filter.setPriority(100);


                    Set<BluetoothDevice> data = BluetoothUtils.getBondedDevices();
                    System.out.println("Bluetooth Data : " + data);

                    BluetoothAdapter BA = BluetoothAdapter.getDefaultAdapter();
                    BA.startDiscovery();


                    registerReceiver(broadcastReceiver, filter, Context.RECEIVER_VISIBLE_TO_INSTANT_APPS);

                }
            } else {
                fileHelper.fileWriter("executeQuery Query : " + "delete from tbl_PrintBluetooth", writer);
                da_dynamics.executeQuery("delete from tbl_PrintBluetooth");
                broadcast = da_dynamics.getBroadcast();
                System.out.println("BroadCast 22 :: " + broadcast);
                fileHelper.fileWriter("BroadCast : " + broadcast, writer);

                IntentFilter filter = new IntentFilter();
                if (broadcast.isEmpty()) {
                    filter.addAction(BluetoothDevice.ACTION_FOUND);
                } else {
                    for (int i = 0; i < broadcast.size(); i++) {
                        filter.addAction(broadcast.get(i).ActionName);
                    }
                }
                filter.setPriority(100);

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                    registerReceiver(broadcastReceiver, filter, Context.RECEIVER_NOT_EXPORTED);
                } else {
                    registerReceiver(broadcastReceiver, filter);
                }

                BluetoothAdapter BA = BluetoothAdapter.getDefaultAdapter();
                BA.startDiscovery();

                Set<BluetoothDevice> data = BluetoothUtils.getBondedDevices();

                System.out.println("Bluetooth data : " + data);


            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CLOSEALERTDIALOG)) {

            try {
                if (ut_dialog.dialogone.isShowing()) {
                    dialogShow = false;
                    ut_dialog.dialogone.dismiss();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if (ut_dialog.dialog.isShowing()) {
                    ut_dialog.dialog.dismiss();
                    alertdialogShow = false;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_PRINTJSON)) {
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQueryClean(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    if (query.DBName != null) {
                        ArrayList<String> map = da_dynamics.getJsonList(completeQuery);
                        System.out.println("map : " + map);
                        ArrayList<BE_Dascom1145> listPrint = new ArrayList<>();
                        for (int i = 0; i < map.size(); i++) {
                            String record = map.get(i);
                            Gson gson = new Gson();
                            BE_Dascom1145 person = gson.fromJson(record, BE_Dascom1145.class);
                            listPrint.add(person);
                        }
                        if (!listPrint.isEmpty()) {
                            ArrayList<ArrayList<BE_Dascom1145_Dtl>> groupDetails = new ArrayList<>();
                            ArrayList<BE_Dascom1145_Dtl> details = new ArrayList<>();
                            for (int i = 0; i < listPrint.size(); i++) {
                                String description = listPrint.get(i).getItemDesc();
                                int wordLength = 27;
                                if (description.length() < wordLength) {
                                    BE_Dascom1145_Dtl detail = new BE_Dascom1145_Dtl();
                                    detail.setItemAmount(listPrint.get(i).getItemAmount());
                                    detail.setItemDesc(listPrint.get(i).getItemDesc());
                                    detail.setItemNo(listPrint.get(i).getItemNo());
                                    detail.setItemPrice(listPrint.get(i).getItemPrice());
                                    detail.setItemQty(listPrint.get(i).getItemQty());
                                    if (details.size() >= printLine) {
                                        groupDetails.add(details);
                                        details = new ArrayList<>();
                                    }
                                    details.add(detail);
                                    detail = null;
                                } else {
                                    String[] words = description.split(" ");
                                    ArrayList<String> rows = new ArrayList<>();
                                    String row = "";
                                    for (int j = 0; j < words.length; j++) {
                                        String word = words[j];
                                        if (row.length() + word.length() < wordLength) {
                                            row += word + " ";
                                        } else {
                                            rows.add(row);
                                            row = word + " ";
                                        }
                                    }
                                    if (!row.isEmpty()) {
                                        rows.add(row);
                                    }
                                    if (details.size() + rows.size() > printLine) {
                                        groupDetails.add(details);
                                        details = new ArrayList<>();
                                    }
                                    for (int j = 0; j < rows.size(); j++) {
                                        if (j == 0) {
                                            BE_Dascom1145_Dtl detail = new BE_Dascom1145_Dtl();
                                            detail.setItemAmount(listPrint.get(i).getItemAmount());
                                            detail.setItemDesc(rows.get(j));
                                            detail.setItemNo(listPrint.get(i).getItemNo());
                                            detail.setItemPrice(listPrint.get(i).getItemPrice());
                                            detail.setItemQty(listPrint.get(i).getItemQty());
                                            details.add(detail);
                                            detail = null;
                                        } else {
                                            BE_Dascom1145_Dtl detail = new BE_Dascom1145_Dtl();
                                            detail.setItemAmount("");
                                            detail.setItemDesc(rows.get(j));
                                            detail.setItemNo("");
                                            detail.setItemPrice("");
                                            detail.setItemQty("");
                                            details.add(detail);
                                            detail = null;
                                        }
                                    }
                                }
                            }
                            groupDetails.add(details);
                            details = null;
                            BE_Dascom1145_Hdr hdr = new BE_Dascom1145_Hdr();
                            hdr.setDetail(groupDetails);
                            hdr.setInvoiceDO(listPrint.get(0).getInvoiceDO());
                            hdr.setInvoiceDate(listPrint.get(0).getInvoiceDate());
                            hdr.setInvoiceNumber(listPrint.get(0).getInvoiceNumber());
                            hdr.setTerms(listPrint.get(0).getTerms());
                            hdr.setTotal(listPrint.get(0).getTotal());
                            hdr.setSubTotal(listPrint.get(0).getSubTotal());
                            hdr.setAddGST(listPrint.get(0).getAddGST());
                            hdr.setCustomerID(listPrint.get(0).getCustomerID());
                            hdr.setSalesRepID(listPrint.get(0).getSalesRepID());
                            hdr.setDeli1(listPrint.get(0).getDeli1());
                            hdr.setDeli2(listPrint.get(0).getDeli2());
                            hdr.setDeli3(listPrint.get(0).getDeli3());
                            hdr.setDeli4(listPrint.get(0).getDeli4());
                            hdr.setSold1(listPrint.get(0).getSold1());
                            hdr.setSold2(listPrint.get(0).getSold2());
                            hdr.setSold3(listPrint.get(0).getSold3());
                            hdr.setSold4(listPrint.get(0).getSold4());
                            printDascomJson(hdr);
                        } else {
                            Toast.makeText(this, "No Data", Toast.LENGTH_SHORT).show();
                        }
                    }
                }
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SALESPRINT)) {

            WebView webView = new WebView(this);

            HtmlfileViewer htmlFile = new HtmlfileViewer();
            linesPrinted = htmlFile.htmlFileCreate2(MainActivity.this, mScreenName, printConfigs, printListConfig, da_dynamics, da_queryConfig, system, ut_common, formValues, selectedListValues, paramFormValues, paramSelectedListValues, fileHelper, 0, language, webView, (screenWidth / 100.0));

            try {

                String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");
                System.out.println("PrintCopy : " + PrintCopy);

                String savedMac = da_dynamics.getMacAddress();
                fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);
                Connection con = new com.zebra.sdk.comm.BluetoothConnection(savedMac);

                try {
                    con.open();
                    printer = ZebraPrinterFactory.getInstance(con);
                } catch (ConnectionException |
                         ZebraPrinterLanguageUnknownException e) {
                    e.printStackTrace();
                    executeActionConfig("", AN_PrintFailed, "");
                    fileHelper.fileWriter("ConnectionException : " + e.getLocalizedMessage(), writer);

                }

                //72 is 1 inch
                int pageWidth = 72 * 3;
                int contentHeight = (int) Math.ceil(pageWidth * webView.getMeasuredHeight() / webView.getMeasuredWidth());

                // Create a PDF document
                PdfDocument document = new PdfDocument();
                PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pageWidth, contentHeight, 1).create();
                PdfDocument.Page page2 = document.startPage(pageInfo);

                // Draw the WebView content to the PDF page
                Canvas canvas = page2.getCanvas();
                float scale = (float) pageWidth / webView.getWidth();
                canvas.scale(scale, scale);
                webView.draw(canvas);
                document.finishPage(page2);
                try {
                    document.writeTo(new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Report/SalesPrint.pdf"));
                    document.close();
                } catch (IOException e) {
                    e.printStackTrace();
                    fileHelper.fileWriter("IOException : " + e.getLocalizedMessage(), writer);
                }


                //I assume for now its zebra only for now
                File file = new File(fileHelper.getSalesDirectoryPath() + "/Report/SalesPrint.pdf");
                if (file.exists()) {
                    try {
                        if (PrintCopy != null) {
                            if (!PrintCopy.isEmpty() && !PrintCopy.trim().equals("0")) {

                                int printSize = parseInt(PrintCopy.trim());

                                for (int j = 0; j < printSize; j++) {
                                    ParcelFileDescriptor pfd = ParcelFileDescriptor.open(
                                            file,
                                            ParcelFileDescriptor.MODE_READ_ONLY
                                    );

                                    PdfRenderer renderer = new PdfRenderer(pfd);
                                    int paperWidth = 576;
                                    for (int i = 0; i < renderer.getPageCount(); i++) {
                                        PdfRenderer.Page page = renderer.openPage(i);
                                        int paperHeight = page.getHeight() * paperWidth / page.getWidth();
                                        Bitmap bmp = Bitmap.createBitmap(
                                                paperWidth,
                                                paperHeight,
                                                Bitmap.Config.ARGB_8888
                                        );
                                        Canvas canvasWhite = new Canvas(bmp);
                                        canvasWhite.drawColor(Color.WHITE);
                                        page.render(
                                                bmp,
                                                null,
                                                null,
                                                PdfRenderer.Page.RENDER_MODE_FOR_PRINT
                                        );
                                        ZebraImageAndroid image = new ZebraImageAndroid(bmp);
                                        double llHeight = Math.ceil(paperHeight * 203 / 192);
                                        printer.sendCommand("^XA^LL" + llHeight + "^XZ");
                                        printer.printImage(image, 0, 0, paperWidth, paperHeight, false);
                                        bmp.recycle();
                                        page.close();
                                    }
                                    renderer.close();
                                }


                            } else {
                                ParcelFileDescriptor pfd = ParcelFileDescriptor.open(
                                        file,
                                        ParcelFileDescriptor.MODE_READ_ONLY
                                );

                                PdfRenderer renderer = new PdfRenderer(pfd);
                                int paperWidth = 576;
                                for (int i = 0; i < renderer.getPageCount(); i++) {
                                    PdfRenderer.Page page = renderer.openPage(i);
                                    int paperHeight = page.getHeight() * paperWidth / page.getWidth();
                                    Bitmap bmp = Bitmap.createBitmap(
                                            paperWidth,
                                            paperHeight,
                                            Bitmap.Config.ARGB_8888
                                    );
                                    Canvas canvasWhite = new Canvas(bmp);
                                    canvasWhite.drawColor(Color.WHITE);
                                    page.render(
                                            bmp,
                                            null,
                                            null,
                                            PdfRenderer.Page.RENDER_MODE_FOR_PRINT
                                    );
                                    ZebraImageAndroid image = new ZebraImageAndroid(bmp);
                                    double llHeight = Math.ceil(paperHeight * 203 / 192);
                                    printer.sendCommand("^XA^LL" + llHeight + "^XZ");
                                    printer.printImage(image, 0, 0, paperWidth, paperHeight, false);
                                    bmp.recycle();
                                    page.close();
                                }
                                renderer.close();
                            }
                        } else {
                            ParcelFileDescriptor pfd = ParcelFileDescriptor.open(
                                    file,
                                    ParcelFileDescriptor.MODE_READ_ONLY
                            );

                            PdfRenderer renderer = new PdfRenderer(pfd);
                            int paperWidth = 576;
                            for (int i = 0; i < renderer.getPageCount(); i++) {
                                PdfRenderer.Page page = renderer.openPage(i);
                                int paperHeight = page.getHeight() * paperWidth / page.getWidth();
                                Bitmap bmp = Bitmap.createBitmap(
                                        paperWidth,
                                        paperHeight,
                                        Bitmap.Config.ARGB_8888
                                );
                                Canvas canvasWhite = new Canvas(bmp);
                                canvasWhite.drawColor(Color.WHITE);
                                page.render(
                                        bmp,
                                        null,
                                        null,
                                        PdfRenderer.Page.RENDER_MODE_FOR_PRINT
                                );
                                ZebraImageAndroid image = new ZebraImageAndroid(bmp);
                                double llHeight = Math.ceil(paperHeight * 203 / 192);
                                printer.sendCommand("^XA^LL" + llHeight + "^XZ");
                                printer.printImage(image, 0, 0, paperWidth, paperHeight, false);
                                bmp.recycle();
                                page.close();
                            }
                            renderer.close();
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                        executeActionConfig("", AN_PrintFailed, "");
                        fileHelper.fileWriter("Exception : " + e.getLocalizedMessage(), writer);

                    }
                }

                try {
                    con.close();
                    executeActionConfig("", AN_PrintSuccess, "");

                } catch (ConnectionException e) {
                    e.printStackTrace();
                    executeActionConfig("", AN_PrintFailed, "");
                    fileHelper.fileWriter("ConnectionException : " + e.getLocalizedMessage(), writer);

                }
            } catch (Exception e) {
                e.printStackTrace();
                executeActionConfig("", AN_PrintFailed, "");
                fileHelper.fileWriter("Final Exception : " + e.getLocalizedMessage(), writer);

            }


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_MANTIMER)) {

            BE_QueryConfig query = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
            String timeValue = da_dynamics.NoexecuteQuery(query.QueryText);

            actionValueforTimer = timeValue;

            if (!Settings.canDrawOverlays(this)) {
                Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:" + getPackageName()));
                startActivityForResult(intent, 10);
            } else {
                if (!mIsFloatingViewAttached) {
                    opentimer(timeValue);
                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DARKMODE)) {
            ut_sp.setStringValue("THEME", "DARK");
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_LIGHTMODE)) {
            ut_sp.setStringValue("THEME", "LIGHT");
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_TABREFRESH)) {
            try {
                getSupportFragmentManager().beginTransaction().detach(tabFragmentList.get(0)).commit();
                getSupportFragmentManager().beginTransaction().attach(tabFragmentList.get(0)).commit();

            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_MANTIMERSTOP)) {
            LocalBroadcastManager.getInstance(MainActivity.this).unregisterReceiver(timerBroadcastReceiver);
            stopService(new Intent(MainActivity.this, FloatingViewService.class));
            executeActionConfig("", AN_ManTimerEnd, "");

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHECKMOCKLOCATION)) {
            checkMockLocation();
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_REFRESHMULTILINE)) {
            refreshMultiline(actionConfig);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_PHONE)) {
            try {
                BE_QueryConfig query = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
                String Query = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                String number = da_dynamics.NoexecuteQuery(Query);
                System.out.println("number : " + number);
                Intent callIntent = new Intent(Intent.ACTION_CALL);
                callIntent.setData(Uri.parse("tel:" + number));
                startActivity(callIntent);

            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_EXTERNALURL)) {
            openUrltobrowser(actionConfig);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_OPENGALARY)) {

            String[] opencameraSplit = actionConfig.ActionValue.split("[.]");

            String cameraIndex = opencameraSplit[1];

            if (opencameraSplit[0].equals("FormView")) {
                for (BE_FormConfig formConfig : formConfigs) {
                    if (formConfig.FieldName.equalsIgnoreCase(cameraIndex)) {

                        if (formConfig.FieldControl.equalsIgnoreCase(FC_TAKEPHOTO) || formConfig.FieldControl.equalsIgnoreCase(FC_IMAGE)) {

                            HashMap<String, String> rtn = new HashMap<>();
                            String screenSignature = screen + "_" + formConfig.FieldName + "_SAVEPHOTO";
                            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                            String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                            System.out.println("NameQuery : " + query);
                            fileHelper.fileWriter("getFormConfigValues Query : " + query, writer);
                            rtn = da_dynamics.getFormConfigValues(query);
                            if (!rtn.isEmpty()) {
                                formCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                                formValues.put(formConfig.FieldName.toUpperCase(), formCameraFilename);
                            }

                            photosavepath = formConfig.DataMemberType;
                            try {
                                imageTakePhoto = (ImageView) formContent.findViewWithTag(cameraIndex.toUpperCase());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                            intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, "image/*");
                            startActivityForResult(intent, PICK_IMAGE_REQUEST);
                        }

                    }
                }
            }

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_POSTPLANOGRAM)) {
            callPlanogramApi(actionConfig);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_UPDATETRANSSERVICE)) {

            String selectTableName = actionConfig.ActionValue;
            String insertTablename = actionConfig.ActionFailedValue;

            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
            String Query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

            ArrayList<HashMap<String, String>> tableValues = new ArrayList<HashMap<String, String>>();
            tableValues = da_dynamics.getTableValues(Query);

            System.out.println("tableValues : " + tableValues);

            updateTransservice(tableValues, selectTableName, insertTablename, actionConfig.FieldName);


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_STARTDELAYTIME)) {

            int period = 10;
            if (!actionConfig.ActionValue.isEmpty()) {
                period = parseInt(actionConfig.ActionValue);
            }

            int milliseconds = 1000 * period;

            delayTimer = new Timer();
            delayTimer.schedule(new TimerTask() {
                @Override
                public void run() {
                    executeActionConfig(actionConfig.FieldName, actionConfig.ActionPlan, "");
                }
            }, 1000, milliseconds);


        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_STOPDELAYTIME)) {
            try {
                if (delayTimer != null) {
                    delayTimer.cancel();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_Startlocationstream)) {
            Startlocationstream = true;
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_MAPWAYPOINT)) {

            for (BE_QueryConfig query : actionConfigQueries) {

                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    MapLatLongRtn = da_dynamics.getLatLongValues(completeQuery);

                    System.out.println("MapLatLongRtn 1 : " + MapLatLongRtn);
                    System.out.println("googleMap : " + googleMap);

                    if (googleMap != null) {
                        googleMap.applyWaypoint(MapLatLongRtn);
                    }

                }

            }

        } else if (actionConfig.ActionType.equals(AT_CHATAPICALL)) {
            chatAPICall(actionConfig);
        } else if (actionConfig.ActionType.equals(AT_SAVEREPORT)) {
            Disposable d = Single.timer((long) 1, TimeUnit.SECONDS)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(ignored -> {
                        System.out.println("SAVED : ");
                        saveReport();
                    });
            disposables.add(d);
        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_SAVESIGN)) {
            savesign(actionConfig);

        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_AUTOLOGOUTCUTOFTIME)) {

            String cutOffTime = da_systemList.getSystemValue("select SystemValue from SystemList where Code = 'AUTOLOGOUTCUTOFTIME'");

            if (cutOffTime != null && !cutOffTime.isEmpty()) {
                AlarmScheduler alarmScheduler = new AlarmScheduler();
                alarmScheduler.scheduleMidnightAlarm(getApplicationContext(), cutOffTime);
            }


            AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
            if (alarmManager != null) {
                boolean canSchedule = false;
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                    canSchedule = alarmManager.canScheduleExactAlarms();
                }
                System.out.println("AlarmManager: " + canSchedule);
            } else {
                System.out.println("AlarmManager is null");
            }

        }


    }

    private void openUrltobrowser(BE_ActionConfig actionConfig) {

        try {
            BE_QueryConfig query = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
            String Query = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

            String url = da_systemList.getSystemValue(Query);
            System.out.println("url : " + url);
            Intent i = new Intent(Intent.ACTION_VIEW);
            i.setData(Uri.parse(url));
            startActivity(i);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void refreshMultiline(BE_ActionConfig actionConfig) {

        View view = formContent.findViewWithTag(actionConfig.ActionPlan.toUpperCase());
        System.out.println("view : " + view);

        if (view != null) {
            if (view instanceof LinearLayout) {
                LinearLayout content = (LinearLayout) view;
                content.removeAllViews();

                DA_FormConfig da_formConfig = new DA_FormConfig(getApplicationContext());
                ArrayList<BE_FormConfig> formConfigs = da_formConfig.getFormConfigs(screen, "English");
                System.out.println("formConfigs : " + formConfigs);
                for (BE_FormConfig config : formConfigs) {
                    System.out.println("config.FieldName : " + config.FieldName + " - " + actionConfig.ActionPlan);
                    if (config.FieldName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                        content.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));

                        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
                        contentHeight = (int) Math.round(contentHeight * heightRatio);

                        if (config.ValueWidth > 0) {
                            HashMap<String, ArrayList<String>> rtn = new HashMap<>();
                            String screenNames = screen + "_FORM_" + FC_MULTILINE + "_" + config.DefaultValue;
                            System.out.println("MULTILINE SCREEN NAME : " + screenNames);
                            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenNames);
                            String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                            fileHelper.fileWriter("Form MultiLine Query : " + query, writer);
                            Log.d("Form MultiLine Query", query);
                            rtn = da_dynamics.getDataSyncValues(query);
                            float size = Float.parseFloat(String.valueOf(fontsize));
                            float textsize = config.VFontSize * size;

                            LinearLayout linearLayout = new LinearLayout(getApplicationContext());
                            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                            linearLayout.setLayoutParams(layoutParams);
                            linearLayout.setOrientation(LinearLayout.VERTICAL);


                            int paddingDp2 = 10;
                            float density2 = getResources().getDisplayMetrics().density;
                            int paddingPixel2 = (int) (paddingDp2 * density2);

                            LinearLayout layout = new LinearLayout(getApplicationContext());
                            layout.setLayoutParams(new LinearLayout.LayoutParams((int) Math.round(config.ValueWidth * (screenWidth / 100.0)), ViewGroup.LayoutParams.WRAP_CONTENT));
                            layout.setOrientation(LinearLayout.VERTICAL);
                            layout.setPadding(paddingPixel2, 0, paddingPixel2, 0);

                            for (Map.Entry<String, ArrayList<String>> entry : rtn.entrySet()) {
                                String key = entry.getKey();
                                if (key.equalsIgnoreCase(config.FieldName)) {
                                    ArrayList<String> value = entry.getValue();
                                    for (String aString : value) {
                                        TextView textvalue = ut_view.generateFormCreateTextView(textPadding, contentHeight, config.ValueWidth, (screenWidth / 100.0),
                                                "#ffffff", ut_common.translateColor(config.VForeColor),
                                                aString, textsize, config.VFontStyle, config.VAlignment, config.ShowBorder, config.FieldName, config.DataMemberType);

                                        int paddingDp = 10;
                                        float density = getResources().getDisplayMetrics().density;
                                        int paddingPixel = (int) (paddingDp * density);
                                        textvalue.setPadding(paddingPixel, 0, 0, 0);

                                        linearLayout.addView(textvalue);
                                        linearLayout.addView(ut_view.generateLine(FC_LINE, 1, ut_common.translateColor(config.VForeColor), config, screenWidth));

                                    }
                                }
                            }
                            linearLayout.addView(layout);
                            content.addView(linearLayout);
                        }

                        LinearLayout.MarginLayoutParams marginParams = (LinearLayout.MarginLayoutParams) content.getLayoutParams();
                        marginParams.topMargin = DEFAULT_MARGIN;
//                        formContent.addView(content);

                        formContent.invalidate();
                    }
                }
            }

        }

    }


    @SuppressLint("MissingPermission")
    private void checkMockLocation() {
        if (checkPermissions()) {

            if (isLocationEnabled()) {

                mFusedLocationClient.getLastLocation().addOnCompleteListener(new OnCompleteListener<Location>() {
                    @Override
                    public void onComplete(@NonNull Task<Location> task) {
                        Location location = task.getResult();
                        if (location == null) {
                            requestNewLocationData();
                        } else {
                            if (isMockLocationOn(location)) {
                                System.out.println("isMockLocationOn : YES");
                            } else {
                                System.out.println("isMockLocationOn : NO");
                            }
                        }
                    }
                });
            } else {
                Toast.makeText(this, "Please turn on" + " your location...", Toast.LENGTH_LONG).show();
                Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                startActivity(intent);
            }
        } else {
            requestPermissions();
        }
    }

    private boolean isLocationEnabled() {
        LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        return locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER) || locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
    }

    @SuppressLint("MissingPermission")
    private void requestNewLocationData() {
        LocationRequest mLocationRequest = new LocationRequest();
        mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        mLocationRequest.setInterval(5);
        mLocationRequest.setFastestInterval(0);
        mLocationRequest.setNumUpdates(1);

        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(this);
        mFusedLocationClient.requestLocationUpdates(mLocationRequest, mLocationCallback, Looper.myLooper());
    }

    public static boolean isMockLocationOn(Location location) {
        return location.isFromMockProvider();
    }

    private void requestPermissions() {
        ActivityCompat.requestPermissions(this, new String[]{
                Manifest.permission.ACCESS_COARSE_LOCATION,
                Manifest.permission.ACCESS_FINE_LOCATION}, 44);
    }

    private void opentimer(String timerValue) {

        if (timerValue != null && !timerValue.isEmpty()) {

            try {
                System.out.println("timerValue : " + timerValue);
                int time = parseInt(timerValue);
                if (time > 0) {
                    ut_sp.setStringValue(SP_TIMERVALUE, timerValue);
                    mIsFloatingViewAttached = true;

                    IntentFilter filter = new IntentFilter();
                    filter.addAction("ManTimerAction");
                    filter.setPriority(100);

                    LocalBroadcastManager.getInstance(MainActivity.this).registerReceiver(timerBroadcastReceiver, filter);
                    startService(new Intent(MainActivity.this, FloatingViewService.class));

                } else {
                    executeActionConfig("", AN_ManTimerEnd, "");
                }
            } catch (Exception e) {
                e.printStackTrace();
                executeActionConfig("", AN_ManTimerEnd, "");
                fileHelper.fileWriter("TIMER EXCEPTION : " + e.getLocalizedMessage(), writer);
                mIsFloatingViewAttached = false;
            }
        } else {
            executeActionConfig("", AN_ManTimerEnd, "");
        }
    }

    private void openlocationAlertDialog() {

        Dialog locationDialog = new Dialog(this);
        locationDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        locationDialog.setCanceledOnTouchOutside(false);
        locationDialog.setCancelable(false);
        locationDialog.setContentView(R.layout.locationfind);

        MaterialButton dialog_two_buttons_positive = locationDialog.findViewById(R.id.dialog_two_buttons_positive);
        MaterialButton dialog_two_buttons_negative = locationDialog.findViewById(R.id.dialog_two_buttons_negative);


        dialog_two_buttons_positive.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                locationDialog.dismiss();
                Intent intent = new Intent(
                        Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                startActivityForResult(intent, 110);

            }
        });
        dialog_two_buttons_negative.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                locationDialog.dismiss();
            }
        });

        locationDialog.show();

    }

    private void updatexml() {

        Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
        intent.addCategory(Intent.CATEGORY_OPENABLE);
        intent.setType("*/*");
        startActivityForResult(intent, 1000);

    }

    private static void copyAssetFiles(InputStream in, OutputStream out) {
        try {
            int BUFFER_SIZE = 1024;
            byte[] buffer = new byte[BUFFER_SIZE];
            int read;
            while ((read = in.read(buffer)) != -1) {
                out.write(buffer, 0, read);
            }
            in.close();
            out.flush();
            out.close();

        } catch (IOException e) {
            e.printStackTrace();
        } catch (NullPointerException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private Rectangle getOutputPageSize(Rectangle pageSize, PdfReader reader, int page) throws IOException {
        PdfReaderContentParser parser = new PdfReaderContentParser(reader);
        MarginFinder finder = parser.processContent(page, new MarginFinder());

        Rectangle result = new Rectangle(pageSize.getLeft(), finder.getLly() - 10, pageSize.getRight(), finder.getUry() + 10);

        return result;
    }

    private void printDascomJson(BE_Dascom1145_Hdr listPrint) {
        String savedMac = da_dynamics.getMacAddress();
        fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);
        if (savedMac != null) {
            if (!savedMac.isEmpty()) {
                BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
                BluetoothDevice bluetoothDevice =
                        bluetoothAdapter.getRemoteDevice(savedMac);
                if (bluetoothDevice != null) {
                    if (connection == null) {
                        connection = new BluetoothConnection(bluetoothDevice);
                    }
                    if (!connection.isConnected()) {
                        connection.connect();
                    }
                    try {
                        while (!connection.isConnected()) {
                            Thread.sleep(100);
                        }

                        ESCPOS escp = new ESCPOS(connection);
                        escp.initializePrinter();

                        String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");

                        if (PrintCopy != null) {
                            if (!PrintCopy.isEmpty() && !PrintCopy.trim().equals("0")) {

                                int printSize = parseInt(PrintCopy.trim());

                                for (int j = 0; j < printSize; j++) {
                                    ArrayList<ArrayList<BE_Dascom1145_Dtl>> detail = listPrint.getDetail();

                                    for (int i = 0; i < detail.size(); i++) {
                                        boolean isLast = (i == (detail.size() - 1));
                                        printPage(escp, listPrint, detail.get(i), isLast);
                                        if (!isLast) {
                                            escp.printFeed(285);
                                        }
                                    }
                                }

                            } else {

                                ArrayList<ArrayList<BE_Dascom1145_Dtl>> detail = listPrint.getDetail();

                                for (int i = 0; i < detail.size(); i++) {
                                    boolean isLast = (i == (detail.size() - 1));
                                    printPage(escp, listPrint, detail.get(i), isLast);
                                    if (!isLast) {
                                        escp.printFeed(285);
                                    }
                                }

                            }
                        } else {

                            ArrayList<ArrayList<BE_Dascom1145_Dtl>> detail = listPrint.getDetail();

                            for (int i = 0; i < detail.size(); i++) {
                                boolean isLast = (i == (detail.size() - 1));
                                printPage(escp, listPrint, detail.get(i), isLast);
                                if (!isLast) {
                                    escp.printFeed(285);
                                }
                            }

                        }


                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }

    }

    private String generateSpacing(int x) {
        String spacing = "";
        for (int i = 0; i < x; i++) {
            spacing += " ";
        }
        return spacing;
    }

    private void printPage(ESCPOS escp, BE_Dascom1145_Hdr header, ArrayList<BE_Dascom1145_Dtl> dtl, boolean isLast) {
        escp.printText(header.getInvoiceNumber(), 375, 75);
        escp.printText(header.getInvoiceDate(), 375, 30);
        escp.printText(header.getInvoiceDO(), 375, 30);
        escp.printText(header.getTerms(), 375, 30);
        escp.printText(header.getSold1(), 5, 85);
        escp.printText(header.getDeli1(), 260, 0);
        escp.printText(header.getSold2(), 5, 30);
        escp.printText(header.getDeli2(), 260, 0);
        escp.printText(header.getSold3(), 5, 30);
        escp.printText(header.getDeli3(), 260, 0);
        escp.printText(header.getSold4(), 5, 30);
        escp.printText(header.getDeli4(), 260, 0);
        escp.printText(header.getCustomerID(), 55, 85);
        escp.printText(header.getSalesRepID(), 315, 0);
        escp.printFeed(70);
        for (int i = 0; i < printLine; i++) {
            if (i < dtl.size()) {
                escp.printText(dtl.get(i).getItemNo(), 5, 30);
                escp.printText(dtl.get(i).getItemDesc(), 80, 0);
                String qty = dtl.get(i).getItemQty().toString();
                int frontSpacing = (10 - qty.length());
                escp.printText(generateSpacing(frontSpacing) + qty, 245, 0);

                String itemPrice = dtl.get(i).getItemPrice();
                String itemAmount = dtl.get(i).getItemAmount();
                int amountSpacing = 9 - itemAmount.length();
                int priceSpacing = 21 - itemPrice.length() - amountSpacing - itemAmount.length();
                escp.printText(generateSpacing(priceSpacing) + itemPrice + generateSpacing(amountSpacing) + itemAmount, 305, 0);
//                escp.printText("1,000.0000", 330, 0);
//                escp.printText("99,999,999.00", 395, 0);
            } else {
                escp.printText("", 0, 30);
                escp.printText("", 80, 0);
                escp.printText("", 270, 0);
                escp.printText("", 330, 0);
                escp.printText("", 380, 0);
            }
        }
        if (isLast) {
            int subTotalSpacing = 21 - header.getSubTotal().length();
            int gstSpacing = 21 - header.getAddGST().length();
            int totalSpacing = 21 - header.getTotal().length();
            escp.printText(generateSpacing(subTotalSpacing) + header.getSubTotal(), 305, 150);
            escp.printText(generateSpacing(gstSpacing) + header.getAddGST(), 305, 30);
            escp.printText(generateSpacing(totalSpacing) + header.getTotal(), 305, 30);
        } else {
            escp.printText("CONTINUE", 375, 150);
            escp.printText("CONTINUE", 375, 30);
            escp.printText("CONTINUE", 375, 30);
        }
    }

    private void processData(int i) {

        String savedMac = da_dynamics.getMacAddress();
        fileHelper.fileWriter("MACADDRESS : " + savedMac, writer);

        if (savedMac != null) {
            if (!savedMac.isEmpty()) {

                BluetoothScanner(savedMac);

                connectDevice(savedMac, i);


            }
        }

    }

    private void doPrintWoosim(int i) {

        String folder = "Report/";
        String file_name = "FinalHtml_" + i;
        String file_format = ".pdf";
        File root = new File(fileHelper.getSalesDirectoryPath(), folder);
        String fullName = root + "/" + file_name + file_format;
        fileHelper.fileWriter("PDF PATH : " + fullName, writer);
        printPDF(fullName);

//        printImage(fullName);

    }

    private void printImage(String path) {
        ExecutorService threadpool = Executors.newCachedThreadPool();
        try {
            if (!path.isEmpty()) {
                File extPath = new File(path);
                if (extPath.exists()) {
                    Bitmap bitmap = BitmapFactory.decodeFile(String.valueOf(extPath));
                    sendData(WoosimImage.printCompressedBitmap(
                            0, 0, bitmap.getWidth(), bitmap.getHeight(), bitmap));
                    bitmap.recycle();

                    sendData(WoosimCmd.PM_setStdMode());

                }
            }
        } catch (Exception e) {
            Log.d("Error", e.getMessage());
            fileHelper.fileWriter("Printer Error : " + e.getLocalizedMessage(), writer);
        } finally {
            threadpool.shutdown();
        }

    }

    private void printPDF(String path) {


        ExecutorService threadpool = Executors.newCachedThreadPool();
        try {
            String PrintCopy = da_systemList.getSystemValue2("select SystemValue from SystemList where Code = 'PrintCopy'");

            if (!path.isEmpty()) {
                File extPath = new File(path);
                if (extPath.exists()) {

                    if (PrintCopy != null) {
                        if (!PrintCopy.isEmpty() && !PrintCopy.trim().equals("0")) {
                            int printSize = parseInt(PrintCopy.trim());

                            for (int j = 0; j < printSize; j++) {
                                ParcelFileDescriptor pfd = ParcelFileDescriptor.open(extPath,
                                        ParcelFileDescriptor.MODE_READ_ONLY);
                                PdfRenderer renderer = new PdfRenderer(pfd);
                                int paperWidth = 576;
                                for (int i = 0; i < renderer.getPageCount(); i++) {
                                    PdfRenderer.Page page = renderer.openPage(i);
                                    // The destination bitmap format must be ARGB.
                                    // Original page is resized to fit roll paper width.
                                    Bitmap bmp = Bitmap.createBitmap(
                                            paperWidth,
                                            page.getHeight() * paperWidth / page.getWidth(),
                                            Bitmap.Config.ARGB_8888);
                                    page.render(bmp, null, null, PdfRenderer.Page.RENDER_MODE_FOR_PRINT);
                                    sendData(WoosimImage.printCompressedBitmap(
                                            0, 0, bmp.getWidth(), bmp.getHeight(), bmp));
                                    bmp.recycle();
                                    page.close();
                                }
                                sendData(WoosimCmd.PM_setStdMode());
                                renderer.close();
                            }


                        } else {
                            ParcelFileDescriptor pfd = ParcelFileDescriptor.open(extPath,
                                    ParcelFileDescriptor.MODE_READ_ONLY);
                            PdfRenderer renderer = new PdfRenderer(pfd);
                            int paperWidth = 576;
                            for (int i = 0; i < renderer.getPageCount(); i++) {
                                PdfRenderer.Page page = renderer.openPage(i);
                                // The destination bitmap format must be ARGB.
                                // Original page is resized to fit roll paper width.
                                Bitmap bmp = Bitmap.createBitmap(
                                        paperWidth,
                                        page.getHeight() * paperWidth / page.getWidth(),
                                        Bitmap.Config.ARGB_8888);
                                page.render(bmp, null, null, PdfRenderer.Page.RENDER_MODE_FOR_PRINT);
                                sendData(WoosimImage.printCompressedBitmap(
                                        0, 0, bmp.getWidth(), bmp.getHeight(), bmp));
                                bmp.recycle();
                                page.close();
                            }
                            sendData(WoosimCmd.PM_setStdMode());
                            renderer.close();
                        }
                    } else {
                        ParcelFileDescriptor pfd = ParcelFileDescriptor.open(extPath,
                                ParcelFileDescriptor.MODE_READ_ONLY);
                        PdfRenderer renderer = new PdfRenderer(pfd);
                        int paperWidth = 576;
                        for (int i = 0; i < renderer.getPageCount(); i++) {
                            PdfRenderer.Page page = renderer.openPage(i);
                            // The destination bitmap format must be ARGB.
                            // Original page is resized to fit roll paper width.
                            Bitmap bmp = Bitmap.createBitmap(
                                    paperWidth,
                                    page.getHeight() * paperWidth / page.getWidth(),
                                    Bitmap.Config.ARGB_8888);
                            page.render(bmp, null, null, PdfRenderer.Page.RENDER_MODE_FOR_PRINT);
                            sendData(WoosimImage.printCompressedBitmap(
                                    0, 0, bmp.getWidth(), bmp.getHeight(), bmp));
                            bmp.recycle();
                            page.close();
                        }
                        sendData(WoosimCmd.PM_setStdMode());
                        renderer.close();
                    }


                }
            }
        } catch (Exception e) {
            Log.d("Error", e.getMessage());
            fileHelper.fileWriter("Printer Error : " + e.getLocalizedMessage(), writer);
        } finally {
            threadpool.shutdown();
        }

    }

    public void connectDevice(String address, int i) {

        Disposable d = Single.timer(2, TimeUnit.SECONDS)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(ignored -> {
                    try {
                        if (mBluetoothAdapter == null) {
                            mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
                        }

                        BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);
                        // Attempt to connect to the device
                        fileHelper.fileWriter("Device : " + device, writer);

                        BluetoothDeviceChecker checker = new BluetoothDeviceChecker();
                        boolean check = checker.isDevicePaired(address);
                        System.out.println("check : " + check);
                        if (check) {
                            if (mPrintService.getState() != BluetoothPrintService.STATE_CONNECTED) {
                                mPrintService.connect(device, false, MainActivity.this, address);
                            }
                        } else {

                            try {
                                if (deviceFound) {
                                    // Start the thread to connect with the given device
                                    if (mPrintService.getState() != BluetoothPrintService.STATE_CONNECTED) {
                                        mPrintService.connect(device, false, MainActivity.this, address);
                                    }
                                } else {
                                    executeActionConfig("", AN_PrintFailed, "");
                                    System.out.println("Printer Not Found");
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }

                        System.out.println("deviceFound 00 : " + deviceFound);
                        if (deviceFound) {
                            doPrintWoosim(i);
                        }


                    } catch (Exception e) {
                        e.printStackTrace();
                        executeActionConfig("", AN_PrintFailed, "");

                    }
                });
        disposables.add(d);
    }

    private void sendData(byte[] data) {
        // Check that we're actually connected before trying printing
        if (mPrintService.getState() != BluetoothPrintService.STATE_CONNECTED) {
            Toast.makeText(this, "Not Connected", Toast.LENGTH_SHORT).show();
            fileHelper.fileWriter("Printer Not Connected", writer);
        } else {
            Log.d("Printing", "Prepare Printing");
            fileHelper.fileWriter("Printer Prepare Printing", writer);

            // Check that there's actually something to send
            if (data.length > 0) {
                try {
                    mPrintService.write(data);
                    Thread.sleep(50);
                } catch (Exception e) {

                }
            }
        }
    }

    private void deletexmlfile() {

        File[] dirFiles = fileHelper.getSalesDirectoryFolder().listFiles();

        if (dirFiles != null) {
            if (dirFiles.length > 5) {
                for (int ii = 0; ii < dirFiles.length; ii++) {
                    if (dirFiles[ii].toString().contains(".xml")) {
                        String fileOutputTemp = dirFiles[ii].toString();
                        fileOutputTemp = fileOutputTemp.substring(fileOutputTemp.lastIndexOf("/") + 1);
                        if (fileOutputTemp.contains("simplrSales.xml")) {
                            dirFiles[ii].delete();
                        }
                    }
                }
            }
        }


    }

    private void deleteSalesDB() {

        File[] dirFiles = fileHelper.getSalesDirectoryFolder().listFiles();

        if (dirFiles != null) {
            if (dirFiles.length > 5) {
                for (int ii = 0; ii < dirFiles.length; ii++) {
                    if (dirFiles[ii].toString().contains(".sqlite")) {
                        String fileOutputTemp = dirFiles[ii].toString();
                        fileOutputTemp = fileOutputTemp.substring(fileOutputTemp.lastIndexOf("/") + 1);
                        if (fileOutputTemp.contains("salesdb.sqlite")) {
                            dirFiles[ii].delete();
                        }
                    }
                }
            }
        }


    }

    private void openTimerDialog(String value) {

        Dialog dialog = new Dialog(this);
        dialog.setCancelable(false);
        dialog.setCanceledOnTouchOutside(false);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setContentView(R.layout.timer_preview_dialog);
        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.transparent)));
        dialog.getWindow().setLayout(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);

        TextView textView = (TextView) dialog.findViewById(R.id.textView);

        int a = parseInt(value);
        int b = 1000 * a;

        new CountDownTimer(b, 1000) {
            public void onTick(long millisUntilFinished) {

                // Used for formatting digit to be in 2 digits only
                NumberFormat f = new DecimalFormat("000");

                long sec = (millisUntilFinished / 1000);
//                long sec = (millisUntilFinished / 1000) % 60;

                textView.setText(f.format(sec));

            }

            // When the task is over it will print 00:00:00 there

            public void onFinish() {

                textView.setText("000");
                dialog.dismiss();

                executeActionConfig("", AN_timerEnd, "");
            }

        }.start();

        dialog.show();

    }

    private void deletesysconfile() {

        File[] dirFiles = fileHelper.getSalesDirectoryFolder().listFiles();

        if (dirFiles != null) {
            if (dirFiles.length > 5) {
                for (int ii = 0; ii < dirFiles.length; ii++) {
                    if (dirFiles[ii].toString().contains(".sqlite")) {
                        String fileOutputTemp = dirFiles[ii].toString();
                        fileOutputTemp = fileOutputTemp.substring(fileOutputTemp.lastIndexOf("/") + 1);
                        if (fileOutputTemp.contains("syscon.sqlite")) {
                            dirFiles[ii].delete();
                        }
                    }
                }
            }
        }

    }

    private void deletesalesfile() {

        File[] dirFiles = fileHelper.getSalesDirectoryFolder().listFiles();

        if (dirFiles != null) {
            if (dirFiles.length > 5) {
                for (int ii = 0; ii < dirFiles.length; ii++) {
                    if (dirFiles[ii].toString().contains(".sqlite")) {
                        String fileOutputTemp = dirFiles[ii].toString();
                        fileOutputTemp = fileOutputTemp.substring(fileOutputTemp.lastIndexOf("/") + 1);
                        if (fileOutputTemp.contains("salesdb.sqlite")) {
                            dirFiles[ii].delete();
                        }
                    }
                }
            }
        }

    }

    private void deletePhotofile() {

        File[] dirFiles = fileHelper.getSalesDirectoryFolder().listFiles();

        if (dirFiles != null) {
            if (dirFiles.length > 1) {
                for (int ii = 0; ii < dirFiles.length; ii++) {
                    System.out.println("PHOTO PATH : " + dirFiles[ii]);
                    if (dirFiles[ii].toString().endsWith("Photo")) {

                        File[] files = dirFiles[ii].listFiles();
                        if (files.length > 0) {
                            for (int a = 0; a < files.length; a++) {
                                files[a].delete();
                            }
                        }

                    }
                }
            }
        }

    }

    private void deleteReportfile() {

        File[] dirFiles = fileHelper.getSalesDirectoryFolder().listFiles();

        if (dirFiles != null) {
            if (dirFiles.length > 1) {
                for (int ii = 0; ii < dirFiles.length; ii++) {
                    System.out.println("PHOTO PATH : " + dirFiles[ii]);
                    if (dirFiles[ii].toString().endsWith("Report")) {

                        File[] files = dirFiles[ii].listFiles();
                        if (files.length > 0) {
                            for (int a = 0; a < files.length; a++) {
                                files[a].delete();
                            }
                        }

                    }
                }
            }
        }

    }


    private void openSettings() {
        Intent intent = new Intent();
        intent.setAction(
                Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
        Uri uri = Uri.fromParts("package",
                BuildConfig.APPLICATION_ID, null);
        intent.setData(uri);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(intent);
    }

    public void stopLocationUpdates() {
        // Removing location updates
        mFusedLocationClient
                .removeLocationUpdates(mLocationCallback)
                .addOnCompleteListener(this, new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {
                        Toast.makeText(getApplicationContext(), "Location updates stopped!", Toast.LENGTH_SHORT).show();
                    }
                });
    }

    public void getEnableLocation() {
        String screenSearch = screen + "_" + FC_MAP + "_" + "RouteMap";
        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSearch);

        String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, "", "", "", "", system, surveyValue, paramScreenName);
        if (!query.equals("")) {
            MapLatLongRtn = da_dynamics.getLatLongValues(query);

            Log.d("GoogleMapLatLong---->", MapLatLongRtn.toString());
        }
    }

    public void showSettingsAlert() {

        int alertTheme = 0;
        if (DBSolutionName.equals("WMS")) {
            alertTheme = R.style.WMSCustomStyle;

        } else if (DBSolutionName.equals("SALES")) {
            alertTheme = R.style.SalesCustomStyle;

        }

//        CustomAlert.LocationEnableAlert(MainActivity.this, "Enable Location Provider! Go to settings menu?", "SETTINGS", alertTheme);
        AlertDialog.Builder alertDialog = new AlertDialog.Builder(
                MainActivity.this, R.style.SalesCustomStyle);
        alertDialog.setTitle("SETTINGS");
        alertDialog.setMessage("Enable Location Provider! Go to settings menu?");
        alertDialog.setPositiveButton("Settings",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        Intent intent = new Intent(
                                Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                        startActivity(intent);

                    }
                });
        alertDialog.setNegativeButton("Cancel",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                    }
                });

        alertDialog.show();

    }

    int alertTheme = 0;

    private void showAlert(String FieldName, BE_ActionConfig actionConfig) {
        String message = FieldName, title = "";

        if (ut_sp.getStringValue(XML_SOLUTION_NAME).equals("WMS")) {

            alertTheme = R.style.WMSCustomStyle;

        } else if (ut_sp.getStringValue(XML_SOLUTION_NAME).equals("SALES")) {
            alertTheme = R.style.SalesCustomStyle;

        }


        if (!messageConfigs.isEmpty()) {
            for (BE_MessageConfig msg : messageConfigs) {
                if (msg.MessageCode.toUpperCase().equals(actionConfig.ActionPlan.toUpperCase())) {
                    message = msg.MessageText;
                    title = msg.Title;
                    break;
                }
            }
        }

        if (message.equals("")) {
            message = actionConfig.ActionPlan;
        }

        if (message.contains(SQL_FORMVIEW)) {
            int firstBracket = message.indexOf('{');
            String contentOfBrackets = message.substring(firstBracket + 1, message.indexOf('}', firstBracket));
            String[] temp = contentOfBrackets.split("[.]");
            if (formValues.get(temp[1].toUpperCase()) != null) {
                String value = formValues.get(temp[1].toUpperCase());
                message = message.replace("{" + contentOfBrackets + "}", value);

            }
        }

        if (actionConfig.ActionPlan.contains("{")) {
            int start = actionConfig.ActionPlan.indexOf("{");
            int end;
            String key;
            int trial = 0;
            String actionvalue = null;
            while (start > -1 && trial < 100) {
                end = actionConfig.ActionPlan.indexOf("}");
                key = actionConfig.ActionPlan.substring(start + 1, end);
                actionConfig.ActionPlan = actionConfig.ActionPlan.replace("{" + key + "}", addSingleQuote(ut_sp.getStringValue(key)));
                start = actionConfig.ActionPlan.indexOf("{");
                trial++;
            }

            message = actionConfig.ActionPlan;

        } else if (actionConfig.ActionPlan.contains("Result") && actionConfig.ActionPlan.contains("'")) {
            message = actionConfig.ActionPlan;

            String[] split = message.split("'");
            message = split[0] + "'" + ut_sp.getStringValue(SQL_JAVASCRIPTRESULT) + "'";

        }

        if (actionConfig.ActionPlan.toUpperCase().startsWith("SELECT_")) {

            HashMap<String, String> rtn = new HashMap<>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    if (query.DBName != null) {
                        if (query.DBName.equalsIgnoreCase(SYSCONDB)) {
                            //     rtn = da_dynamics_syscon.LastDocNoexecuteQuery(completeQuery);
                        } else {
                            fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + completeQuery, writer);
                            rtn = da_dynamics.LastDocNoexecuteQuery(completeQuery);
                        }
                    }
                }
            }
            if (!rtn.isEmpty()) {
                message = rtn.get("Resultmessage".toUpperCase()).toString();
            }

            String val = ut_sp.getStringValue(SQL_APPNAME);
            title = val;

        }

        if (title == null) {
            title = header;
        } else if (title.isEmpty()) {
            title = header;
        }

        String[] buttons = actionConfig.ActionValue.split(",");

        if (buttons.length == 1) {

            showAlertOneButton(title, message, buttons[0].trim(), actionConfig.ActionPlan);

        } else if (buttons.length == 2) {

            if (actionConfig.ActionPlan.equalsIgnoreCase("MSG_ENTERBARCODE")) {

                ut_dialog.showBarcodeAlert(MainActivity.this, message, buttons[0].trim(), buttons[1].trim(), actionConfig);

            } else {
                alertdialogShow = true;
                showAlertTwoButtons(title, message, buttons[0].trim(), buttons[1].trim(), actionConfig.ActionPlan);

            }
        } else if (buttons.length == 3) {
            alertdialogShow = true;
            showAlertThreeButtons(title, message, buttons[0].trim(), buttons[1].trim(), buttons[2].trim(), actionConfig.ActionPlan);

        }
    }

    private void showAlertChild(String FieldName, BE_ActionConfig actionConfig) {
        String message = FieldName, title = "";

        if (ut_sp.getStringValue(XML_SOLUTION_NAME).equals("WMS")) {

            alertTheme = R.style.WMSCustomStyle;

        } else if (ut_sp.getStringValue(XML_SOLUTION_NAME).equals("SALES")) {
            alertTheme = R.style.SalesCustomStyle;

        }


        if (!messageConfigsChild.isEmpty()) {
            for (BE_MessageConfig msg : messageConfigsChild) {
                if (msg.MessageCode.toUpperCase().equals(actionConfig.ActionPlan.toUpperCase())) {
                    message = msg.MessageText;
                    title = msg.Title;
                    break;
                }
            }
        }

        if (message.equals("")) {
            message = actionConfig.ActionPlan;
        }

        if (message.contains(SQL_FORMVIEW)) {
            int firstBracket = message.indexOf('{');
            String contentOfBrackets = message.substring(firstBracket + 1, message.indexOf('}', firstBracket));
            String[] temp = contentOfBrackets.split("[.]");
            if (formValues.get(temp[1].toUpperCase()) != null) {
                String value = formValues.get(temp[1].toUpperCase());
                message = message.replace("{" + contentOfBrackets + "}", value);

            }
        }

        if (actionConfig.ActionPlan.contains("{")) {
            int start = actionConfig.ActionPlan.indexOf("{");
            int end;
            String key;
            int trial = 0;
            String actionvalue = null;
            while (start > -1 && trial < 100) {
                end = actionConfig.ActionPlan.indexOf("}");
                key = actionConfig.ActionPlan.substring(start + 1, end);
                actionConfig.ActionPlan = actionConfig.ActionPlan.replace("{" + key + "}", addSingleQuote(ut_sp.getStringValue(key)));
                start = actionConfig.ActionPlan.indexOf("{");
                trial++;
            }

            message = actionConfig.ActionPlan;

        } else if (actionConfig.ActionPlan.contains("Result") && actionConfig.ActionPlan.contains("'")) {
            message = actionConfig.ActionPlan;

            String[] split = message.split("'");
            message = split[0] + "'" + ut_sp.getStringValue(SQL_JAVASCRIPTRESULT) + "'";

        }

        if (actionConfig.ActionPlan.toUpperCase().startsWith("SELECT_")) {

            HashMap<String, String> rtn = new HashMap<>();
            for (BE_QueryConfig query : actionConfigQueries) {
                if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                    String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                    if (query.DBName != null) {
                        if (query.DBName.equalsIgnoreCase(SYSCONDB)) {
                            //     rtn = da_dynamics_syscon.LastDocNoexecuteQuery(completeQuery);
                        } else {
                            fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + completeQuery, writer);
                            rtn = da_dynamics.LastDocNoexecuteQuery(completeQuery);
                        }
                    }
                }
            }
            if (!rtn.isEmpty()) {
                message = rtn.get("Resultmessage".toUpperCase()).toString();
            }

            String val = ut_sp.getStringValue(SQL_APPNAME);
            title = val;

        }

        if (title == null) {
            title = header;
        } else if (title.isEmpty()) {
            title = header;
        }

        String[] buttons = actionConfig.ActionValue.split(",");

        if (buttons.length == 1) {

            showAlertOneButton(title, message, buttons[0].trim(), actionConfig.ActionPlan);

        } else if (buttons.length == 2) {

            if (actionConfig.ActionPlan.equalsIgnoreCase("MSG_ENTERBARCODE")) {

                ut_dialog.showBarcodeAlert(MainActivity.this, message, buttons[0].trim(), buttons[1].trim(), actionConfig);

            } else {
                alertdialogShow = true;
                showAlertTwoButtons(title, message, buttons[0].trim(), buttons[1].trim(), actionConfig.ActionPlan);

            }
        } else if (buttons.length == 3) {
            alertdialogShow = true;
            showAlertThreeButtons(title, message, buttons[0].trim(), buttons[1].trim(), buttons[2].trim(), actionConfig.ActionPlan);

        }
    }


    public class ShowalertAsync extends AsyncTask<String, Void, String> {

        String fieldName;
        BE_ActionConfig actionConfig;

        public ShowalertAsync(String mfieldName, BE_ActionConfig mactionConfig) {
            fieldName = mfieldName;
            actionConfig = mactionConfig;
        }

        @Override
        protected String doInBackground(String... strings) {
            String message = fieldName, title = "";

            if (ut_sp.getStringValue(XML_SOLUTION_NAME).equals("WMS")) {

                alertTheme = R.style.WMSCustomStyle;

            } else if (ut_sp.getStringValue(XML_SOLUTION_NAME).equals("SALES")) {
                alertTheme = R.style.SalesCustomStyle;

            }


            if (messageConfigs.size() > 0) {
                for (BE_MessageConfig msg : messageConfigs) {
                    if (msg.MessageCode.toUpperCase().equals(actionConfig.ActionPlan.toUpperCase())) {
                        message = msg.MessageText;
                        title = msg.Title;
                        break;
                    }
                }
            }

            if (message.equals("")) {
                message = actionConfig.ActionPlan;
            }

            if (message.contains(SQL_FORMVIEW)) {
                int firstBracket = message.indexOf('{');
                String contentOfBrackets = message.substring(firstBracket + 1, message.indexOf('}', firstBracket));
                String[] temp = contentOfBrackets.split("[.]");
                if (formValues.get(temp[1].toUpperCase()) != null) {
                    String value = formValues.get(temp[1].toUpperCase());
                    message = message.replace("{" + contentOfBrackets + "}", value);

                }
            }

            if (actionConfig.ActionPlan.contains("{")) {
                int start = actionConfig.ActionPlan.indexOf("{");
                int end;
                String key;
                int trial = 0;
                String actionvalue = null;
                while (start > -1 && trial < 100) {
                    end = actionConfig.ActionPlan.indexOf("}");
                    key = actionConfig.ActionPlan.substring(start + 1, end);
                    actionConfig.ActionPlan = actionConfig.ActionPlan.replace("{" + key + "}", addSingleQuote(ut_sp.getStringValue(key)));
                    start = actionConfig.ActionPlan.indexOf("{");
                    trial++;
                }

                message = actionConfig.ActionPlan;

            } else if (actionConfig.ActionPlan.contains("Result") && actionConfig.ActionPlan.contains("'")) {
                message = actionConfig.ActionPlan;

                String[] split = message.split("'");
                message = split[0] + "'" + ut_sp.getStringValue(SQL_JAVASCRIPTRESULT) + "'";

            }

            if (actionConfig.ActionPlan.toUpperCase().startsWith("SELECT_")) {

                HashMap<String, String> rtn = new HashMap<>();
                for (BE_QueryConfig query : actionConfigQueries) {
                    if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                        String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        if (query.DBName != null) {
                            if (query.DBName.equalsIgnoreCase(SYSCONDB)) {
                                //     rtn = da_dynamics_syscon.LastDocNoexecuteQuery(completeQuery);
                            } else {
                                fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + completeQuery, writer);
                                rtn = da_dynamics.LastDocNoexecuteQuery(completeQuery);
                            }
                        }
                    }
                }
                if (rtn.size() > 0) {
                    message = rtn.get("Resultmessage".toUpperCase()).toString();
                }

                String val = ut_sp.getStringValue(SQL_APPNAME);
                title = val;

            }

            if (title == null) {
                title = header;
            } else if (title.isEmpty()) {
                title = header;
            }

            String[] buttons = actionConfig.ActionValue.split(",");

            if (buttons.length == 1) {

                showAlertOneButton(title, message, buttons[0].trim(), actionConfig.ActionPlan);

            } else if (buttons.length == 2) {

                if (actionConfig.ActionPlan.equalsIgnoreCase("MSG_ENTERBARCODE")) {

                    ut_dialog.showBarcodeAlert(MainActivity.this, message, buttons[0].trim(), buttons[1].trim(), actionConfig);

                } else {
                    alertdialogShow = true;
                    showAlertTwoButtons(title, message, buttons[0].trim(), buttons[1].trim(), actionConfig.ActionPlan);

                }
            } else if (buttons.length == 3) {
                alertdialogShow = true;
                showAlertThreeButtons(title, message, buttons[0].trim(), buttons[1].trim(), buttons[2].trim(), actionConfig.ActionPlan);

            }
            return null;
        }
    }


    //ActionIndex starting from 0
    private void showAlertOneButton(String title, String message,
                                    String buttonLabel,
                                    final String fieldName) {

        try {

            if (ut_dialog.dialogone != null && ut_dialog.dialogone.isShowing()) {
                ut_dialog.dialogone.dismiss();
            }

            dialogShow = true;
            ut_dialog.showAlert(title, message, new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    ut_dialog.dialogone.dismiss();
                    dialogShow = false;
                    if (screen.equals("Replenishment-RAD")) {
                        onBackPressed();
                    } else {
                        executeActionConfig(fieldName, AN_ALERTDIALOGCLICK, "0");
                    }
                }
            }, buttonLabel);

        } catch (Exception e) {
            dialogShow = true;
            ut_dialog = new UT_AlertDialog(this);
            ut_dialog.showAlert(title, message, new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    ut_dialog.dialogone.dismiss();
                    dialogShow = false;
                    if (screen.equals("Replenishment-RAD")) {
                        onBackPressed();
                    } else {
                        executeActionConfig(fieldName, AN_ALERTDIALOGCLICK, "0");
                    }
                }
            }, buttonLabel);
            e.printStackTrace();
        }

    }

    private void showAlertOneButtonReplanverify(String title, String message,
                                                String buttonLabel,
                                                final String fieldName) {

        try {


            if (ut_dialog.dialogone != null && ut_dialog.dialogone.isShowing()) {
                ut_dialog.dialogone.dismiss();
            }
            ut_dialog.showAlert(title, message, new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    dialogShow = false;
                    ut_dialog.dialogone.dismiss();
                }
            }, buttonLabel);

        } catch (Exception e) {
            ut_dialog = new UT_AlertDialog(this);
            ut_dialog.showAlert(title, message, new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    dialogShow = false;
                    ut_dialog.dialogone.dismiss();
                }
            }, buttonLabel);
            e.printStackTrace();
        }


    }

    private void showAlertTwoButtons(String title, String message,
                                     final String buttonOne,
                                     final String buttonTwo, final String fieldName) {

        try {
            if (ut_dialog.dialog != null && ut_dialog.dialog.isShowing()) {
                ut_dialog.dialog.dismiss();
            }
            ut_dialog.showConfirmation(title, message, buttonOne, new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    ut_dialog.dialog.dismiss();
                    alertdialogShow = false;
                    try {
                        da_dynamics.executeQuery("update SystemList set SystemValue= '1' WHERE code='UseLastPosition'");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    executeActionConfig(fieldName, AN_ALERTDIALOGCLICK, "0");
                }
            }, buttonTwo, new View.OnClickListener() {
                @Override
                public void onClick(View view) {

                    ut_dialog.dialog.dismiss();
                    alertdialogShow = false;
                    executeActionConfig(fieldName, AN_ALERTDIALOGCLICK, "1");
                }
            });

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void showAlertThreeButtons(String title, String message,
                                       final String buttonOne,
                                       final String buttonTwo, final String buttonThree, final String fieldName) {


        ut_dialog.showThreeButtons(title, message, buttonOne, new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ut_dialog.dialog.dismiss();
                alertdialogShow = false;
                executeActionConfig(fieldName, AN_ALERTDIALOGCLICK, "0");
            }
        }, buttonTwo, new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ut_dialog.dialog.dismiss();
                alertdialogShow = false;
                executeActionConfig(fieldName, AN_ALERTDIALOGCLICK, "1");
            }
        }, buttonThree, new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ut_dialog.dialog.dismiss();
                alertdialogShow = false;
                executeActionConfig(fieldName, AN_ALERTDIALOGCLICK, "2");
            }
        });

    }

    public void validateCondition(String FieldName, BE_ActionConfig actionConfig) {
        int result = -1;
        for (BE_QueryConfig query : actionConfigQueries) {

            if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                fileHelper.fileWriter("VALIDATE query ScreenName : " + actionConfig.ActionPlan, writer);
                System.out.println("query ScreenName : " + actionConfig.ActionPlan);

                String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                fileHelper.fileWriter("VALIDATE query : " + completeQuery, writer);
                if (query.DBName != null) {
                    if (query.DBName.equalsIgnoreCase(SYSCONDB)) {
                        System.out.println("VALIDATE query : " + completeQuery);
                        result = da_dynamics_syscon.executeValidateQuery(completeQuery);
                    } else {
                        System.out.println("VALIDATE query : " + completeQuery);
                        result = da_dynamics.executeValidateQuery(completeQuery);
                    }
                }


                if (result == -1) {
                    System.out.println("Invalid VALIDATE query : " + completeQuery);
                    fileHelper.fileWriter("Invalid VALIDATE query : " + completeQuery, writer);
                }

                break;
            }
        }
        System.out.println("VALIDATE Result : " + result);

        fileHelper.fileWriter("executeValidateQuery Query actionConfig : " + actionConfig, writer);

        fileHelper.fileWriter("executeValidateQuery Query result : " + result, writer);


        if (result == 0) {
            if (SolutionName.equals("SALES")) {
                try {
                    if (nextDisable) {
                        item_next.setVisible(true);
                        nextDisable = false;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            fileHelper.fileWriter("executeValidateQuery actionName for result 0 : " + actionConfig.ActionFailedValue, writer);
            executeActionConfig(FieldName, actionConfig.ActionFailedValue, "");
        } else if (result == 1) {
            fileHelper.fileWriter("executeValidateQuery actionName for result 1 : " + actionConfig.ActionValue, writer);
            executeActionConfig(FieldName, actionConfig.ActionValue, "");
        }

    }

    public void validateConditionChild(String FieldName, BE_ActionConfig actionConfig) {
        int result = -1;
        for (BE_QueryConfig query : actionConfigQueriesChild) {

            if (query.ScreenName.equalsIgnoreCase(actionConfig.ActionPlan)) {
                fileHelper.fileWriter("VALIDATE query ScreenName : " + actionConfig.ActionPlan, writer);
                System.out.println("query ScreenName : " + actionConfig.ActionPlan);

                String completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                fileHelper.fileWriter("VALIDATE query : " + completeQuery, writer);
                if (query.DBName != null) {
                    if (query.DBName.equalsIgnoreCase(SYSCONDB)) {
                        System.out.println("VALIDATE query : " + completeQuery);
                        result = da_dynamics_syscon.executeValidateQuery(completeQuery);
                    } else {
                        System.out.println("VALIDATE query : " + completeQuery);
                        result = da_dynamics.executeValidateQuery(completeQuery);
                    }
                }


                if (result == -1) {
                    System.out.println("Invalid VALIDATE query : " + completeQuery);
                    fileHelper.fileWriter("Invalid VALIDATE query : " + completeQuery, writer);
                }

                break;
            }
        }
        System.out.println("VALIDATE Result : " + result);

        fileHelper.fileWriter("executeValidateQuery Query actionConfig : " + actionConfig, writer);

        fileHelper.fileWriter("executeValidateQuery Query result : " + result, writer);


        if (result == 0) {
            if (SolutionName.equals("SALES")) {
                try {
                    if (nextDisable) {
                        item_next.setVisible(true);
                        nextDisable = false;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            fileHelper.fileWriter("executeValidateQuery actionName for result 0 : " + actionConfig.ActionFailedValue, writer);
            executeActionConfigChild(FieldName, actionConfig.ActionFailedValue, "");
        } else if (result == 1) {
            fileHelper.fileWriter("executeValidateQuery actionName for result 1 : " + actionConfig.ActionValue, writer);
            executeActionConfigChild(FieldName, actionConfig.ActionValue, "");
        }

    }


    public void goToForm(String actionPlan, String destinationForm) {
        allowClick = false;
        Intent intent = null;
        previousScreenName = "";
        System.out.println("parameters : " + screen);
        System.out.println("parameters2 : " + destinationForm);
        System.out.println("parameters3 : " + actionPlan);
        System.out.println("selectedListValues : " + selectedListValues);

        if (destinationForm.equalsIgnoreCase(ROUTE_MAP)) {
//            createMapView();
//            intent = new Intent(MainActivity.this, GoogleMaplocationActivity.class);
//            intent.putExtra(IN_PARAMETERS, parameters);
//            intent.putExtra(IN_PARAM_FORM, formValues);
//            intent.putExtra(IN_PARAM_LIST, selectedListValues);
//            startActivity(intent);
        } else if (actionPlan.equalsIgnoreCase(AT_POPUPWINDOW)) {
            popupWindow = true;
            intent = new Intent(MainActivity.this, MainActivity.class);
            actionPerformed = true;
            intent.putExtra(IN_SCREEN_NAME, destinationForm);
            intent.putExtra(IN_PARAMETERS, parameters);
            intent.putExtra(IN_PARAM_FORM, formValues);
            intent.putExtra(IN_PARAM_LIST, selectedListValues);
            intent.putExtra(IN_PARAM_ROOT, "MAIN");
            intent.putExtra(IN_AppBarShow, actionPlan);
            startActivity(intent);
        } else if (destinationForm.equalsIgnoreCase("Graph")) {
            System.out.println("selectedListValues : " + selectedListValues);
            intent = new Intent(MainActivity.this, MainActivity.class);
            intent.putExtra(IN_SCREEN_NAME, destinationForm + "-" + selectedListValues.get("REPORTID"));
            intent.putExtra(IN_PARAMETERS, parameters);
            intent.putExtra(IN_PARAM_FORM, formValues);
            intent.putExtra(IN_PARAM_LIST, selectedListValues);
            intent.putExtra(IN_PARAM_ROOT, "MAIN");
            intent.putExtra(IN_AppBarShow, actionPlan);
            startActivity(intent);
        } else {
            addStack(destinationForm);
            intent = new Intent(MainActivity.this, MainActivity.class);
            actionPerformed = true;
            intent.putExtra(IN_SCREEN_NAME, destinationForm);
            intent.putExtra(IN_PARAM_SCREENS, screen);
            intent.putExtra(IN_PARAMETERS, parameters);
            intent.putExtra(IN_PARAM_FORM, formValues);
            intent.putExtra(IN_PARAM_LIST, selectedListValues);
            intent.putExtra(IN_PARAM_LIST_FINAL, finalselectvalues2);
            intent.putExtra(IN_PARAM_ROOT, "MAIN");
            intent.putExtra(IN_AppBarShow, actionPlan);
            startActivity(intent);

        }


    }

    String chartQuery;

    public void executeQuery(String queryName, String fieldName, BE_ActionConfig actionConfig) {

        for (BE_QueryConfig query : actionConfigQueries) {
            if (query.ScreenName.equalsIgnoreCase(queryName)) {

                System.out.println("executeQuery preQuery : " + query);
                System.out.println("executeQuery formValues : " + formValues);
                fileHelper.fileWriter("executeQuery formValues : " + formValues, writer);

                String completeQuery;


                if (queryName.endsWith("Querychart")) {
                    chartQuery = query.QueryText;
                }

                if (queryName.endsWith(QRY_EXECUTE_LIST)) {
                    for (HashMap<String, String> rowValues : listConfigValues) {
                        completeQuery = ut_common.getQuery(query, null, formValues, rowValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        fileHelper.fileWriter("completeQuery: " + completeQuery, writer);

                        if (query.DBName.equals(SYSCONDB)) {
                            da_dynamics_syscon.executeQuery(completeQuery);

                        } else {
                            da_dynamics.executeQuery(completeQuery);
                        }
                    }


                } else {
                    Log.d("executeQuery selectedListValues", selectedListValues + "");
                    fileHelper.fileWriter("executeQuery selectedListValues : " + selectedListValues, writer);

                    completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                    Log.d("executeQuery completeQuery 2", completeQuery + "");

                    fileHelper.fileWriter("executeQuery completeQuery 2 " + completeQuery, writer);

                    boolean select = completeQuery.toUpperCase().trim().startsWith("SELECT");
                    if (query.ScreenName.equalsIgnoreCase(queryName) && actionConfig.ActionType.equalsIgnoreCase(AT_GET)) {
                        AT_GETURL = "http://dummy.restapiexample.com/api/v1/employees";// ut_sp.getStringValue(SP_CUSTOMAPI) + query.ScreenName;
                        AT_GETURL = AT_GETURL.replace("'", "");
                    }

                    if (query.ScreenName.equalsIgnoreCase(queryName) && actionConfig.ActionType.equalsIgnoreCase(AT_POST)) {
                        AT_POSTURL = "http://dummy.restapiexample.com/api/v1/employees";// ut_sp.getStringValue(SP_CUSTOMAPI) + query.ScreenName;
                        AT_POSTURL = AT_POSTURL.replace("'", "");

                    }
                    if (select) {
                        double distance;
                        ArrayList<BE_Location> customerLocation;
                        LinearLayout horizontalscrollview = null;

                        if (queryName.contains(AT_CHECKLOCATION)) {

                            customerLocation = da_dynamics.getCustomeData(completeQuery);

                            Location startPoint = new Location("locationA");
                            startPoint.setLatitude(currentLatitude);
                            startPoint.setLongitude(currentLongitude);

                            Location endPoint = new Location("locationA");
                            endPoint.setLatitude(customerLocation.get(0).latitude);
                            endPoint.setLongitude(customerLocation.get(0).longitude);

                            distance = startPoint.distanceTo(endPoint);

                            if (distance > Double.parseDouble(ut_sp.getStringValue("SYSTEM.captureLocationRange").toUpperCase())) {
                                executeActionConfig(fieldName, "LocationMatch", "");
                            } else if (distance <= Double.parseDouble(ut_sp.getStringValue("SYSTEM.captureLocationRange").toUpperCase())) {
                                executeActionConfig(fieldName, "LocationNotMatch", "");
                            } else {
                                executeActionConfig(fieldName, "errorInLocation", "");
                            }

                        }

                        if (queryName.endsWith(AT_REFRESHLIST)) {
                            listConfigQuery = completeQuery;
                            if (screen.equalsIgnoreCase("FORM-MDTLIST") || screen.equalsIgnoreCase("PickingList")) {
                                listPage = 0;
                                listLimit = 0;
                            }

                            if (screen.equalsIgnoreCase("Sales Items 1")) {
                                allLoad = false;
                                allLoadChild = false;
                                //   listPage = 0;
                                //   listLimit = 15;
                            }

                            initListView(screen);

                        } else if (queryName.endsWith(AT_REFRESHFORMLIST)) {
                            for (BE_FormConfig config : formConfigs) {
                                if (actionConfig.ActionValue.endsWith(config.FieldName)) {

                                    View view = formContent.findViewWithTag(config.FieldName.toUpperCase());
                                    formListScreenName = screen + FC_FORM + FC_LISTVIEW + "_" + config.FieldName + AT_REFRESHFORMLIST;
                                    String formListScreenName2 = screen + FC_FORM + FC_LISTVIEW;

                                    refreshListName = actionConfig.ActionPlan;

                                    createContainerRefresh(formListScreenName, formContent, (LinearLayout) view, config.FieldName, "RefreshList", actionConfig.ActionPlan, formListScreenName2);
//                                    createContainerSearchlist(formListScreenName, formContent, llParentLayoutformlist, be_formConfig, "", listConfigValues);


                                    break;

                                }
                            }

                        } else if (queryName.endsWith(AT_REFESHPRESENTATION)) {
                            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
                            String query1 = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                            fileHelper.fileWriter("PresentationexecuteQuery Query : " + query1, writer);
                            System.out.println("Presentation Query : " + query1);

                            PresentationRtn = da_dynamics.PresentationexecuteQuery(query1);
                            Presentation presentation = new Presentation();
                            presentation.execute(MainActivity.this, PresentationRtn, viewPager, fileHelper);
                            System.out.println("Presentation rtn : " + PresentationRtn);
                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                                setDotIndicator(0, PresentationRtn.size());
                            }

                        } else if (query.ScreenName.equalsIgnoreCase("AccessLevelFromAgentTable")) {
                            //  validateLogin(formValues.get("USERID"), formValues.get("PASSWORD"));

                        }

                        Log.d("query.ScreenName ", query.ScreenName + "");

                        if (query.ScreenName.equalsIgnoreCase(screen)) {
                            //Update all ListView
                            listConfigQuery = completeQuery;
                            initListView(screen);
                        } else if (query.ScreenName.equals(screen + "_FORM")) {
                            //Update all FormView

                        } else if (query.ScreenName.contains("_FORM_" + FC_COMBO_BOX + "_")) {
                            String[] temp = query.ScreenName.split("_");
                            String targetFieldName = temp[temp.length - 1];
                            System.out.println("targetFieldName : " + targetFieldName);
                            updateComboBox(completeQuery, targetFieldName, "");

                        } else if (query.ScreenName.equalsIgnoreCase(queryName) && actionConfig.ActionType.equalsIgnoreCase(AT_DROPDOWN)) {
                            onItemSelectedListener = setSpinnerListener(false, spinnerItems, listPosition, queryName);

                            String[] temp = actionConfig.ActionValue.split("[.]");

                            if (temp.length > 1) {
                                String value = selectedListValues.get(temp[1].toUpperCase());
                                updateListComboBox(completeQuery, temp[1].toUpperCase());

                            }


                        } else if (query.ScreenName.equalsIgnoreCase(queryName) && actionConfig.ActionType.equalsIgnoreCase(AT_SENDMESSAGE)) {

                            HashMap<String, String> values = da_dynamics.getFormConfigValues(completeQuery);
                            Intent i = new Intent(Intent.ACTION_SEND);
                            i.setType("message/rfc822");
                            i.putExtra(Intent.EXTRA_EMAIL, values.get("sendTo"));
                            i.putExtra(Intent.EXTRA_SUBJECT, "subject of email");
                            i.putExtra(Intent.EXTRA_TEXT, values.get("MessageText"));
                            try {
                                startActivity(Intent.createChooser(i, "Send mail..."));
                            } catch (ActivityNotFoundException ex) {
                                Toast.makeText(getApplicationContext(), "There are no email clients installed.", Toast.LENGTH_SHORT).show();
                            }


                        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DELETEFILE) && queryName.endsWith("_DeleteFile")) {

                            HashMap<String, String> rtn = new HashMap<>();
                            Log.d("Delete file query ", completeQuery + "");

                            fileHelper.fileWriter("Delete file query : " + completeQuery, writer);

                            rtn = da_dynamics.LastDocNoexecuteQuery(completeQuery);
                            Object FilePath = rtn.get("DeleteFilePath".toUpperCase());
                            Object Filename = rtn.get("DeleteFile".toUpperCase());
                            fileHelper.DelteFiles(FilePath != null ? FilePath.toString() : null, Filename != null ? Filename.toString() : null);

                        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_COPYFILE) && queryName.endsWith("_CopyFile")) {

                            HashMap<String, String> rtn = new HashMap<>();
                            rtn = da_dynamics.LastDocNoexecuteQuery(completeQuery);

                            Object DestinationFilePath = rtn.get("DestinationFilePath".toUpperCase());
                            Object SourceFilePath = rtn.get("SourceFilePath".toUpperCase());
                            Object DestinationFile = rtn.get("DestinationFile".toUpperCase());
                            Object SourceFile = rtn.get("SourceFile".toUpperCase());
                            fileHelper.CopyFiles(DestinationFilePath != null ? DestinationFilePath.toString() : null,
                                    SourceFilePath != null ? SourceFilePath.toString() : null,
                                    DestinationFile != null ? DestinationFile.toString() : null,
                                    SourceFile != null ? SourceFile.toString() : null);


                        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_LASTDOCNO)) {
                            HashMap<String, String> rtn = new HashMap<>();
                            rtn = da_dynamics.LastDocNoexecuteQuery(completeQuery);
                            if (rtn.containsKey("TRANSNO")) {
                                Object value = rtn.get("TRANSNO");
                                ut_sp.setStringValue(SQL_TRANSDOCNO, value.toString());

                            }
                        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHECKVERSION)) {
                            da_dynamics.executeQuery(completeQuery);
                        } else {

                            try {

                                ArrayList<BE_QueryFields> fields = ut_common.getFieldsInQuery(completeQuery);
                                fileHelper.fileWriter("updateScreenByQuery fields : " + fields.toString(), writer);

                                Log.d("updateScreenByQuery fields ", fields + "");
                                Log.d("getFormConfigValues Query ", completeQuery + "");

                                fileHelper.fileWriter("getFormConfigValues Query : " + completeQuery, writer);
                                HashMap<String, String> values = da_dynamics.getFormConfigValues(completeQuery);
                                View view = null;
//                                111234
                                Log.d("values", values + "");
                                fileHelper.fileWriter("values : " + values, writer);


                                for (BE_QueryFields field : fields) {

                                    System.out.println("compCode : " + field.compCode);
                                    System.out.println("filed Value : " + values.toString());
                                    System.out.println("fieldName : " + field.fieldName);
                                    fileHelper.fileWriter("fieldName : " + field.fieldName, writer);

                                    if (field.compCode.equals(SQL_FORMVIEW)) {

                                        view = formContent.findViewWithTag(field.fieldName.toUpperCase());

                                        String text = values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase());
                                        Log.v("View N", "" + view);
                                        fileHelper.fileWriter("View N : " + view, writer);

                                        ut_sp.setStringValue("FormView." + field.fieldName, text);

                                        if (view != null) {
                                            if (view instanceof AutoCompleteTextView) {

                                                ArrayList<BE_ComboBox> spinnerItems = formSpinners.get(fieldName.toUpperCase());
                                                if (spinnerItems != null) {
                                                    int index = -1;
                                                    for (int i = 0; i < spinnerItems.size(); i++) {
                                                        if (spinnerItems.get(i).Code.equals(text)) {
                                                            index = i;
                                                            break;
                                                        }
                                                    }

                                                    if (index >= 0) {
                                                        AutoCompleteTextView spinner = (AutoCompleteTextView) view;
                                                        spinner.setSelection(index);
                                                    }
                                                }
                                            } else if (view instanceof CheckBox) {

                                                CheckBox checkBox = (CheckBox) view;
                                                if (text.equals("1") || text.equals("true")) {
                                                    checkBox.setChecked(true);
                                                } else {
                                                    checkBox.setChecked(false);
                                                }

                                            } else if (view instanceof MaterialButton) {
                                                MaterialButton button = (MaterialButton) view;
                                                button.setText(text);

                                            } else if (view instanceof TextInputEditText) {
                                                TextView textView = (TextView) view;
                                                textView.setText(text);

                                            } else if (view instanceof EditText) {
                                                EditText editText = (EditText) view;
                                                editText.setText(text);
                                            } else if (view instanceof MaterialEditText) {
                                                MaterialEditText editText = (MaterialEditText) view;
                                                editText.setText(text);
                                            } else if (view instanceof MaterialEditText_back) {
                                                MaterialEditText_back editText = (MaterialEditText_back) view;
                                                editText.setText(text);
                                            } else if (view instanceof HorizontalScrollView) {


                                            }

                                            formValues.put(field.fieldName.toUpperCase(), values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()));

                                        }


                                    } else if (field.compCode.equals(SQL_LISTVIEW)) {


                                        if (screen.equals("Sales Items-All") || screen.equals("Sales Items-His") || screen.equals("Sales Items-ExC")) {

                                            String val = da_systemList.getSystemValue("select SystemValue from SystemList where Code = 'UseLastPosition'");

                                            if (val != null) {
                                                if (val.equals("1")) {
                                                    if (formlist) {
                                                        if (FormList_llValues != null) {
                                                            view = FormList_llValues.findViewWithTag(field.fieldName + "#" + lastpos);
                                                        } else {
                                                            view = listConfigView.findViewWithTag(field.fieldName + "#" + lastpos);
                                                        }
                                                    } else {
                                                        if (listConfigView.getChildCount() >= 2) {
                                                            view = listConfigView.findViewWithTag(field.fieldName + "#" + lastpos);
                                                        } else {
                                                            if (FormList_llValues != null) {
                                                                view = FormList_llValues.findViewWithTag(field.fieldName + "#" + lastpos);
                                                            } else {
                                                                view = listConfigView.findViewWithTag(field.fieldName + "#" + lastpos);
                                                            }
                                                        }
                                                    }

                                                    Log.v("View N", "" + view);

                                                    updateViewValue(view, values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()), field.fieldName, "listSpinners", lastpos);
                                                    selectedListValues.put(field.fieldName.toUpperCase(), values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()));
                                                } else {
                                                    if (formlist) {
                                                        if (FormList_llValues != null) {
                                                            view = FormList_llValues.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                                                        } else {
                                                            view = listConfigView.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                                                        }
                                                    } else {
                                                        if (listConfigView.getChildCount() >= 2) {
                                                            view = listConfigView.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                                                        } else {
                                                            if (FormList_llValues != null) {
                                                                view = FormList_llValues.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                                                            } else {
                                                                view = listConfigView.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                                                            }
                                                        }
                                                    }
                                                    Log.v("View N", "" + view);

                                                    updateViewValue(view, values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()), field.fieldName, "listSpinners", selectedListIndex);
                                                    selectedListValues.put(field.fieldName.toUpperCase(), values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()));

                                                }
                                            }
                                        } else {

                                            try {
                                                System.out.println("formlist : " + formlist);
                                                System.out.println("selectedListIndex : " + selectedListIndex);
                                                if (formlist) {
                                                    if (FormList_llValues != null) {
                                                        view = FormList_llValues.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                                                    } else {
                                                        view = listConfigView.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                                                    }
                                                } else {
                                                    System.out.println("listConfigView count : " + listConfigView.getChildCount());
                                                    System.out.println("listConfigView selectedListIndex : " + selectedListIndex);
//                                                    if (listConfigView.getChildCount() >= 2) {
                                                    view = listConfigView.findViewWithTag(field.fieldName + "#" + selectedListIndex);
//
                                                }

                                                Log.v("View N", "" + view);

                                                updateViewValue(view, values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()), field.fieldName, "listSpinners", selectedListIndex);
                                                selectedListValues.put(field.fieldName.toUpperCase(), values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()));
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                                fileHelper.fileWriter("Exception : " + e.getLocalizedMessage(), writer);
                                            }
                                        }
//                                        }


                                    }


                                }

                                if (fields.isEmpty()) {
                                    Log.d("queryName", queryName + "");
                                    if (queryName.contains("List_COMBOBOX")) {
                                        onItemSelectedListener = setSpinnerListener(false, spinnerItems, listPosition, queryName);

                                        String[] temp = actionConfig.ActionValue.split("[.]");
                                        if (temp.length > 1) {
                                            String value = selectedListValues.get(temp[1].toUpperCase());
                                            Log.d("completeQuery", completeQuery + "");

                                            updateListComboBox(completeQuery, temp[1].toUpperCase());
                                        }

                                    } else {
                                        if (!queryName.contains("ContactList_REFRESHFORMLIST") && !queryName.contains("_REFRESHLIST")
                                                && !queryName.contains("_REFRESHFORMLIST") && !screen.equalsIgnoreCase("Message")) {
                                            ArrayList<String> imageName = new ArrayList<>();
                                            mGetUploadImage = new ArrayList<>();

                                            imageName = da_dynamics.getFormConfigMultiphoto(completeQuery);
                                            mGetUploadImage = loadIMage(imageName);

                                            if (mGetUploadImage.isEmpty()) {
                                                mGetUploadImage = loadIMage2(imageName);
                                            }

                                            if (mGetUploadImage.isEmpty()) {
                                                mGetUploadImage = loadIMage3(imageName);
                                            }

                                            System.out.println("imageName 1 :: " + imageName.toString());
                                            System.out.println("mGetUploadImage :: " + mGetUploadImage.toString());

                                            view = formContent.findViewWithTag("MULTIPHOTO");

                                            if (view != null) {
                                                horizontalscrollview = (LinearLayout) view;
                                                try {
                                                    horizontalscrollview.removeAllViews();
                                                } catch (Exception e) {
                                                    e.printStackTrace();
                                                }
                                                if (multicamera) {
                                                    takemultiIMage = true;
                                                } else {
                                                    takemultiIMage = false;
                                                }

                                                DynamicImageViewCreation(mGetUploadImage, horizontalscrollview, imageHeight, "");
                                            }
                                        }
                                    }

                                } else {

                                    if (fields.get(0).fieldName.equalsIgnoreCase("multiphoto")) {
                                        view = formContent.findViewWithTag(fields.get(0).fieldName.toUpperCase());

                                        horizontalscrollview = (LinearLayout) view;
                                        horizontalscrollview.removeAllViews();
                                        mGetUploadImage = new ArrayList<>();

                                        if (multicamera) {
                                            takemultiIMage = true;
                                        } else {
                                            takemultiIMage = false;
                                        }
                                        DynamicImageViewCreation(mGetUploadImage, horizontalscrollview, imageHeight, "");

                                    } else if (fields.get(0).fieldName.equals("MULTIPLEPHOTO")) {
                                        System.out.println("MULTIPLEPHOTO completeQuery :: " + completeQuery);

                                        ArrayList<String> imageName = new ArrayList<>();
                                        mGetUploadImage = new ArrayList<>();
                                        mGetUploadImage.removeAll(mGetUploadImage);

                                        imageName = da_dynamics.getFormConfigMultiphoto(completeQuery);
                                        mGetUploadImage = loadIMage(imageName);
                                        if (mGetUploadImage.isEmpty()) {
                                            mGetUploadImage = loadIMage2(imageName);
                                        }

                                        if (mGetUploadImage.isEmpty()) {
                                            mGetUploadImage = loadIMage3(imageName);
                                        }

                                        System.out.println("imageName 2 :: " + imageName.toString());
                                        System.out.println("mGetUploadImage :: " + mGetUploadImage.toString());

                                        view = formContent.findViewWithTag(fields.get(0).fieldName.toUpperCase());

                                        horizontalscrollview = (LinearLayout) view;
                                        horizontalscrollview.removeAllViews();

                                        if (multicamera) {
                                            takemultiIMage = true;
                                        } else {
                                            takemultiIMage = false;
                                        }
                                        DynamicImageViewCreation(mGetUploadImage, horizontalscrollview, imageHeight, "");

                                    }

                                }


                            } catch (Exception e) {
                                e.printStackTrace();
                            }


                        }
                    } else {
                        if (query.DBName != null) {
                            if (query.DBName.equalsIgnoreCase(SYSCONDB)) {
                                da_dynamics_syscon.executeQuery(completeQuery);
                            } else {

                                da_dynamics.executeQuery(completeQuery);
                            }
                        } else {
                            da_dynamics.executeQuery(completeQuery);

                        }
                    }

                }

                break;
            }
        }

    }

    public void executeQueryChild(String queryName, String fieldName, BE_ActionConfig actionConfig) {

        for (BE_QueryConfig query : actionConfigQueriesChild) {
            if (query.ScreenName.equalsIgnoreCase(queryName)) {

                System.out.println("executeQuery preQuery : " + query);

                System.out.println("executeQuery formValues : " + formValues);
                fileHelper.fileWriter("executeQuery formValues : " + formValues, writer);

                String completeQuery;


                if (queryName.endsWith("Querychart")) {
                    chartQuery = query.QueryText;
                }

                if (queryName.endsWith(QRY_EXECUTE_LIST)) {
                    for (HashMap<String, String> rowValues : listConfigValues) {
                        completeQuery = ut_common.getQuery(query, null, formValues, rowValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                        fileHelper.fileWriter("completeQuery: " + completeQuery, writer);

                        if (query.DBName.equals(SYSCONDB)) {
                            da_dynamics_syscon.executeQuery(completeQuery);

                        } else {
                            da_dynamics.executeQuery(completeQuery);
                        }
                    }


                } else {
                    Log.d("executeQuery selectedListValues", selectedListValues + "");
                    fileHelper.fileWriter("executeQuery selectedListValues : " + selectedListValues, writer);

                    completeQuery = ut_common.getQuery(query, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                    Log.d("executeQuery completeQuery 2", completeQuery + "");

                    fileHelper.fileWriter("executeQuery completeQuery 2 " + completeQuery, writer);

                    boolean select = completeQuery.toUpperCase().trim().startsWith("SELECT");
                    if (query.ScreenName.equalsIgnoreCase(queryName) && actionConfig.ActionType.equalsIgnoreCase(AT_GET)) {
                        AT_GETURL = "http://dummy.restapiexample.com/api/v1/employees";// ut_sp.getStringValue(SP_CUSTOMAPI) + query.ScreenName;
                        AT_GETURL = AT_GETURL.replace("'", "");
                    }

                    if (query.ScreenName.equalsIgnoreCase(queryName) && actionConfig.ActionType.equalsIgnoreCase(AT_POST)) {
                        AT_POSTURL = "http://dummy.restapiexample.com/api/v1/employees";// ut_sp.getStringValue(SP_CUSTOMAPI) + query.ScreenName;
                        AT_POSTURL = AT_POSTURL.replace("'", "");

                    }
                    if (select) {
                        double distance;
                        ArrayList<BE_Location> customerLocation;
                        LinearLayout horizontalscrollview = null;

                        if (queryName.contains(AT_CHECKLOCATION)) {

                            customerLocation = da_dynamics.getCustomeData(completeQuery);

                            Location startPoint = new Location("locationA");
                            startPoint.setLatitude(currentLatitude);
                            startPoint.setLongitude(currentLongitude);

                            Location endPoint = new Location("locationA");
                            endPoint.setLatitude(customerLocation.get(0).latitude);
                            endPoint.setLongitude(customerLocation.get(0).longitude);

                            distance = startPoint.distanceTo(endPoint);

                            if (distance > Double.parseDouble(ut_sp.getStringValue("SYSTEM.captureLocationRange").toUpperCase())) {
                                executeActionConfigChild(fieldName, "LocationMatch", "");
                            } else if (distance <= Double.parseDouble(ut_sp.getStringValue("SYSTEM.captureLocationRange").toUpperCase())) {
                                executeActionConfigChild(fieldName, "LocationNotMatch", "");
                            } else {
                                executeActionConfigChild(fieldName, "errorInLocation", "");
                            }

                        }

                        if (queryName.endsWith(AT_REFRESHLIST)) {
                            listConfigQuery = completeQuery;
                            if (screen.equalsIgnoreCase("FORM-MDTLIST") || screen.equalsIgnoreCase("PickingList")) {
                                listPage = 0;
                                listLimit = 0;
                            }

                            if (screen.equalsIgnoreCase("Sales Items 1")) {
                                allLoad = false;
                                allLoadChild = false;
                                //   listPage = 0;
                                //   listLimit = 15;
                            }

                            initListView(screen);

                        } else if (queryName.endsWith(AT_REFRESHFORMLIST)) {
                            for (BE_FormConfig config : formConfigs) {
                                if (actionConfig.ActionValue.endsWith(config.FieldName)) {
                                    if (SolutionName.equals("WMS")) {
                                        View view = formContent.findViewWithTag(config.FieldName.toUpperCase());
                                        formListScreenName = screen + FC_FORM + FC_LISTVIEW + "_" + config.FieldName;
                                        String formListScreenName2 = screen + FC_FORM + FC_LISTVIEW;
                                        createContainer(formListScreenName, formContent, (LinearLayout) view, config, "RefreshList", formListScreenName2);
                                        break;
                                    } else {
                                        View view = formContent.findViewWithTag(config.FieldName.toUpperCase());
                                        formListScreenName = screen + FC_FORM + FC_LISTVIEW + "_" + config.FieldName + AT_REFRESHFORMLIST;
                                        String formListScreenName2 = screen + FC_FORM + FC_LISTVIEW;
                                        createContainerRefresh(formListScreenName, formContent, (LinearLayout) view, config.FieldName, "RefreshList", actionConfig.ActionPlan, formListScreenName2);
                                        //createContainer(formListScreenName, formContent, (LinearLayout) view, config, "RefreshList");
                                        break;
                                    }
                                }
                            }

                        } else if (queryName.endsWith(AT_REFESHPRESENTATION)) {
//                            viewPager = findViewById(R.id.pager_introduction);
                            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(actionConfig.ActionPlan);
                            String query1 = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                            fileHelper.fileWriter("PresentationexecuteQuery Query : " + query1, writer);
                            ArrayList<BE_Presentation> rtn = da_dynamics.PresentationexecuteQuery(query1);
                            Presentation presentation = new Presentation();
                            presentation.execute(MainActivity.this, rtn, viewPager, fileHelper);

                        } else if (query.ScreenName.equalsIgnoreCase("AccessLevelFromAgentTable")) {
                            //  validateLogin(formValues.get("USERID"), formValues.get("PASSWORD"));

                        }

                        Log.d("query.ScreenName ", query.ScreenName + "");

                        if (query.ScreenName.equalsIgnoreCase(screen)) {
                            //Update all ListView
                            listConfigQuery = completeQuery;
                            initListView(screen);
                        } else if (query.ScreenName.equals(screen + "_FORM")) {
                            //Update all FormView

                        } else if (query.ScreenName.contains("_FORM_" + FC_COMBO_BOX + "_")) {
                            String[] temp = query.ScreenName.split("_");
                            String targetFieldName = temp[temp.length - 1];
                            System.out.println("targetFieldName : " + targetFieldName);
                            updateComboBox(completeQuery, targetFieldName, "");

                        } else if (query.ScreenName.equalsIgnoreCase(queryName) && actionConfig.ActionType.equalsIgnoreCase(AT_DROPDOWN)) {
                            onItemSelectedListener = setSpinnerListener(false, spinnerItems, listPosition, queryName);

                            String[] temp = actionConfig.ActionValue.split("[.]");

                            if (temp.length > 1) {
                                String value = selectedListValues.get(temp[1].toUpperCase());
                                updateListComboBox(completeQuery, temp[1].toUpperCase());

                            }


                        } else if (query.ScreenName.equalsIgnoreCase(queryName) && actionConfig.ActionType.equalsIgnoreCase(AT_SENDMESSAGE)) {

                            HashMap<String, String> values = da_dynamics.getFormConfigValues(completeQuery);
                            Intent i = new Intent(Intent.ACTION_SEND);
                            i.setType("message/rfc822");
                            i.putExtra(Intent.EXTRA_EMAIL, values.get("sendTo"));
                            i.putExtra(Intent.EXTRA_SUBJECT, "subject of email");
                            i.putExtra(Intent.EXTRA_TEXT, values.get("MessageText"));
                            try {
                                startActivity(Intent.createChooser(i, "Send mail..."));
                            } catch (ActivityNotFoundException ex) {
                                Toast.makeText(getApplicationContext(), "There are no email clients installed.", Toast.LENGTH_SHORT).show();
                            }


                        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_DELETEFILE) && queryName.endsWith("_DeleteFile")) {

                            HashMap<String, String> rtn = new HashMap<>();
                            Log.d("Delete file query ", completeQuery + "");

                            fileHelper.fileWriter("Delete file query : " + completeQuery, writer);

                            rtn = da_dynamics.LastDocNoexecuteQuery(completeQuery);
                            Object FilePath = rtn.get("DeleteFilePath".toUpperCase());
                            Object Filename = rtn.get("DeleteFile".toUpperCase());
                            fileHelper.DelteFiles(FilePath != null ? FilePath.toString() : null, Filename != null ? Filename.toString() : null);

                        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_COPYFILE) && queryName.endsWith("_CopyFile")) {

                            HashMap<String, String> rtn = new HashMap<>();
                            rtn = da_dynamics.LastDocNoexecuteQuery(completeQuery);

                            Object DestinationFilePath = rtn.get("DestinationFilePath".toUpperCase());
                            Object SourceFilePath = rtn.get("SourceFilePath".toUpperCase());
                            Object DestinationFile = rtn.get("DestinationFile".toUpperCase());
                            Object SourceFile = rtn.get("SourceFile".toUpperCase());
                            fileHelper.CopyFiles(DestinationFilePath != null ? DestinationFilePath.toString() : null,
                                    SourceFilePath != null ? SourceFilePath.toString() : null,
                                    DestinationFile != null ? DestinationFile.toString() : null,
                                    SourceFile != null ? SourceFile.toString() : null);


                        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_LASTDOCNO)) {
                            HashMap<String, String> rtn = new HashMap<>();
                            rtn = da_dynamics.LastDocNoexecuteQuery(completeQuery);
                            if (rtn.containsKey("TRANSNO")) {
                                Object value = rtn.get("TRANSNO");
                                ut_sp.setStringValue(SQL_TRANSDOCNO, value.toString());

                            }
                        } else if (actionConfig.ActionType.equalsIgnoreCase(AT_CHECKVERSION)) {
                            da_dynamics.executeQuery(completeQuery);
                        } else {

                            try {

                                ArrayList<BE_QueryFields> fields = ut_common.getFieldsInQuery(completeQuery);
                                fileHelper.fileWriter("updateScreenByQuery fields : " + fields.toString(), writer);

                                Log.d("updateScreenByQuery fields ", fields + "");
                                Log.d("getFormConfigValues Query ", completeQuery + "");

                                fileHelper.fileWriter("getFormConfigValues Query : " + completeQuery, writer);
                                HashMap<String, String> values = da_dynamics.getFormConfigValues(completeQuery);
                                View view = null;

                                Log.d("values", values + "");
                                fileHelper.fileWriter("values : " + values, writer);


                                for (BE_QueryFields field : fields) {

                                    System.out.println("compCode : " + field.compCode);
                                    System.out.println("filed Value : " + values.toString());
                                    System.out.println("fieldName : " + field.fieldName);
                                    fileHelper.fileWriter("fieldName : " + field.fieldName, writer);

                                    if (field.compCode.equals(SQL_FORMVIEW)) {

                                        view = formContent.findViewWithTag(field.fieldName.toUpperCase());

                                        String text = values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase());
                                        Log.v("View N", "" + view);
                                        fileHelper.fileWriter("View N : " + view, writer);

                                        ut_sp.setStringValue("FormView." + field.fieldName, text);

                                        if (view != null) {
                                            if (view instanceof AutoCompleteTextView) {

                                                ArrayList<BE_ComboBox> spinnerItems = formSpinners.get(fieldName.toUpperCase());
                                                if (spinnerItems != null) {
                                                    int index = -1;
                                                    for (int i = 0; i < spinnerItems.size(); i++) {
                                                        if (spinnerItems.get(i).Code.equals(text)) {
                                                            index = i;
                                                            break;
                                                        }
                                                    }

                                                    if (index >= 0) {
                                                        AutoCompleteTextView spinner = (AutoCompleteTextView) view;
                                                        spinner.setSelection(index);
                                                    }
                                                }
                                            } else if (view instanceof CheckBox) {

                                                CheckBox checkBox = (CheckBox) view;
                                                if (text.equals("1") || text.equals("true")) {
                                                    checkBox.setChecked(true);
                                                } else {
                                                    checkBox.setChecked(false);
                                                }

                                            } else if (view instanceof MaterialButton) {
                                                MaterialButton button = (MaterialButton) view;
                                                button.setText(text);

                                            } else if (view instanceof TextInputEditText) {
                                                TextView textView = (TextView) view;
                                                textView.setText(text);

                                            } else if (view instanceof EditText) {
                                                EditText editText = (EditText) view;
                                                editText.setText(text);
                                            } else if (view instanceof MaterialEditText) {
                                                MaterialEditText editText = (MaterialEditText) view;
                                                editText.setText(text);
                                            } else if (view instanceof MaterialEditText_back) {
                                                MaterialEditText_back editText = (MaterialEditText_back) view;
                                                editText.setText(text);
                                            } else if (view instanceof HorizontalScrollView) {


                                            }

                                            formValues.put(field.fieldName.toUpperCase(), values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()));

                                        }


                                    } else if (field.compCode.equals(SQL_LISTVIEW)) {


                                        if (screen.equals("Sales Items-All") || screen.equals("Sales Items-His") || screen.equals("Sales Items-ExC")) {

                                            String val = da_systemList.getSystemValue("select SystemValue from SystemList where Code = 'UseLastPosition'");

                                            if (val != null) {
                                                if (val.equals("1")) {
                                                    if (formlist) {
                                                        if (FormList_llValues != null) {
                                                            view = FormList_llValues.findViewWithTag(field.fieldName + "#" + lastpos);
                                                        } else {
                                                            view = listConfigView.findViewWithTag(field.fieldName + "#" + lastpos);
                                                        }
                                                    } else {
                                                        if (listConfigView.getChildCount() >= 2) {
                                                            view = listConfigView.findViewWithTag(field.fieldName + "#" + lastpos);
                                                        } else {
                                                            if (FormList_llValues != null) {
                                                                view = FormList_llValues.findViewWithTag(field.fieldName + "#" + lastpos);
                                                            } else {
                                                                view = listConfigView.findViewWithTag(field.fieldName + "#" + lastpos);
                                                            }
                                                        }
                                                    }

                                                    Log.v("View N", "" + view);

                                                    updateViewValue(view, values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()), field.fieldName, "listSpinners", lastpos);
                                                    selectedListValues.put(field.fieldName.toUpperCase(), values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()));
                                                } else {
                                                    if (formlist) {
                                                        if (FormList_llValues != null) {
                                                            view = FormList_llValues.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                                                        } else {
                                                            view = listConfigView.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                                                        }
                                                    } else {
                                                        if (listConfigView.getChildCount() >= 2) {
                                                            view = listConfigView.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                                                        } else {
                                                            if (FormList_llValues != null) {
                                                                view = FormList_llValues.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                                                            } else {
                                                                view = listConfigView.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                                                            }
                                                        }
                                                    }
                                                    Log.v("View N", "" + view);

                                                    updateViewValue(view, values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()), field.fieldName, "listSpinners", selectedListIndex);
                                                    selectedListValues.put(field.fieldName.toUpperCase(), values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()));

                                                }
                                            }
                                        } else {

                                            try {
                                                System.out.println("formlist : " + formlist);
                                                if (formlist) {
                                                    if (FormList_llValues != null) {
                                                        view = FormList_llValues.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                                                    } else {
                                                        view = listConfigView.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                                                    }
                                                } else {
                                                    System.out.println("listConfigView count : " + listConfigView.getChildCount());
                                                    view = listConfigView.findViewWithTag(field.fieldName + "#" + selectedListIndex);

                                                }

                                                Log.v("View N", "" + view);

                                                updateViewValue(view, values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()), field.fieldName, "listSpinners", selectedListIndex);
                                                selectedListValues.put(field.fieldName.toUpperCase(), values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()));
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                                fileHelper.fileWriter("Exception : " + e.getLocalizedMessage(), writer);
                                            }
                                        }
//                                        }


                                    }


                                }

                                if (fields.isEmpty()) {
                                    Log.d("queryName", queryName + "");
                                    if (queryName.contains("List_COMBOBOX")) {
                                        onItemSelectedListener = setSpinnerListener(false, spinnerItems, listPosition, queryName);

                                        String[] temp = actionConfig.ActionValue.split("[.]");
                                        if (temp.length > 1) {
                                            String value = selectedListValues.get(temp[1].toUpperCase());
                                            Log.d("completeQuery", completeQuery + "");

                                            updateListComboBox(completeQuery, temp[1].toUpperCase());
                                        }

                                    } else {
                                        if (!queryName.contains("ContactList_REFRESHFORMLIST") && !screen.equalsIgnoreCase("Message")) {
                                            ArrayList<String> imageName = new ArrayList<>();
                                            mGetUploadImage = new ArrayList<>();

                                            imageName = da_dynamics.getFormConfigMultiphoto(completeQuery);
                                            mGetUploadImage = loadIMage(imageName);

                                            if (mGetUploadImage.isEmpty()) {
                                                mGetUploadImage = loadIMage2(imageName);
                                            }

                                            if (mGetUploadImage.isEmpty()) {
                                                mGetUploadImage = loadIMage3(imageName);
                                            }

                                            System.out.println("imageName 3 :: " + imageName.toString());
                                            System.out.println("mGetUploadImage :: " + mGetUploadImage.toString());

                                            view = formContent.findViewWithTag("MULTIPHOTO");

                                            if (view != null) {
                                                horizontalscrollview = (LinearLayout) view;
                                                try {
                                                    horizontalscrollview.removeAllViews();
                                                } catch (Exception e) {
                                                    e.printStackTrace();
                                                }
                                                if (multicamera) {
                                                    takemultiIMage = true;
                                                } else {
                                                    takemultiIMage = false;
                                                }

                                                DynamicImageViewCreation(mGetUploadImage, horizontalscrollview, imageHeight, "");
                                            }
                                        }
                                    }

                                } else {

                                    if (fields.get(0).fieldName.equalsIgnoreCase("multiphoto")) {
                                        view = formContent.findViewWithTag(fields.get(0).fieldName.toUpperCase());

                                        horizontalscrollview = (LinearLayout) view;
                                        horizontalscrollview.removeAllViews();
                                        mGetUploadImage = new ArrayList<>();

                                        if (multicamera) {
                                            takemultiIMage = true;
                                        } else {
                                            takemultiIMage = false;
                                        }
                                        DynamicImageViewCreation(mGetUploadImage, horizontalscrollview, imageHeight, "");

                                    } else if (fields.get(0).fieldName.equals("MULTIPLEPHOTO")) {
                                        System.out.println("MULTIPLEPHOTO completeQuery :: " + completeQuery);

                                        ArrayList<String> imageName = new ArrayList<>();
                                        mGetUploadImage = new ArrayList<>();
                                        mGetUploadImage.removeAll(mGetUploadImage);

                                        imageName = da_dynamics.getFormConfigMultiphoto(completeQuery);
                                        mGetUploadImage = loadIMage(imageName);
                                        if (mGetUploadImage.isEmpty()) {
                                            mGetUploadImage = loadIMage2(imageName);
                                        }

                                        if (mGetUploadImage.isEmpty()) {
                                            mGetUploadImage = loadIMage3(imageName);
                                        }

                                        System.out.println("imageName 4 :: " + imageName.toString());
                                        System.out.println("mGetUploadImage :: " + mGetUploadImage.toString());

                                        view = formContent.findViewWithTag(fields.get(0).fieldName.toUpperCase());

                                        horizontalscrollview = (LinearLayout) view;
                                        horizontalscrollview.removeAllViews();

                                        if (multicamera) {
                                            takemultiIMage = true;
                                        } else {
                                            takemultiIMage = false;
                                        }
                                        DynamicImageViewCreation(mGetUploadImage, horizontalscrollview, imageHeight, "");

                                    }

                                }


                            } catch (Exception e) {
                                e.printStackTrace();
                            }


                        }
                    } else {
                        if (query.DBName != null) {
                            if (query.DBName.equalsIgnoreCase(SYSCONDB)) {
                                da_dynamics_syscon.executeQuery(completeQuery);
                            } else {

                                da_dynamics.executeQuery(completeQuery);
                            }
                        } else {
                            da_dynamics.executeQuery(completeQuery);

                        }
                    }

                }

                break;
            }
        }

    }

    private ArrayList<UploadImage> loadIMage(ArrayList<String> imageName) {

        File fileDirectory = new File(fileHelper.getSalesDirectoryPath() + "/Photo/");

        Log.d("fileDirectory", fileDirectory + "");

        fileHelper.fileWriter("fileDirectory : " + fileDirectory, writer);

        if (fileDirectory.exists()) {
            File[] dirFiles = fileDirectory.listFiles();
            System.out.println("dirFiles : " + dirFiles);

            if (dirFiles.length != 0) {

                for (int i = 0; i < dirFiles.length; i++) {
                    String fileOutput = dirFiles[i].toString().substring(dirFiles[i].toString().lastIndexOf("/") + 1);
                    String pic = dirFiles[i].toString();      //get path of your image

                    if (imageName.size() > 0) {
                        for (int ss = 0; ss < imageName.size(); ss++) {
                            System.out.println("imageName : " + imageName.get(ss).toUpperCase() + " -- fileOutput : " + fileOutput.toUpperCase());

                            if (imageName.get(ss).toUpperCase().equals(fileOutput.toUpperCase())) {

                                Bitmap bitmap = BitmapFactory.decodeFile(pic);

                                if (bitmap != null) {
                                    uploadImage = new UploadImage();
                                    uploadImage.setImage(bitmap);
                                    uploadImage.setName(fileOutput);
                                }
                                System.out.println("mGetUploadImage : " + mGetUploadImage);
                                System.out.println("uploadImage : " + uploadImage);

                                if (!mGetUploadImage.contains(uploadImage)) {
                                    mGetUploadImage.add(uploadImage);
                                }
                                System.out.println("mGetUploadImage : " + mGetUploadImage);

                            }

                        }
                    }
                }
            }
        }

        System.out.println("mGetUploadImage : " + mGetUploadImage);
        return mGetUploadImage;

    }

    private ArrayList<UploadImage> loadIMage2(ArrayList<String> imageName) {

        File fileDirectory = new File(fileHelper.getSalesDirectoryPath() + "/TakePhoto/");

        System.out.println("fileDirectory : " + fileDirectory);
        fileHelper.fileWriter("fileDirectory : " + fileDirectory, writer);
        if (fileDirectory.exists()) {
            File[] dirFiles = fileDirectory.listFiles();

            if (dirFiles.length != 0) {

                for (int i = 0; i < dirFiles.length; i++) {
                    String fileOutput = dirFiles[i].toString().substring(dirFiles[i].toString().lastIndexOf("/") + 1);
                    String pic = dirFiles[i].toString();      //get path of your image

                    if (imageName.size() > 0) {
                        for (int ss = 0; ss < imageName.size(); ss++) {
                            if (imageName.get(ss).toUpperCase().contains(fileOutput.toString().toUpperCase())) {

                                Bitmap bitmap = BitmapFactory.decodeFile(pic);

                                if (bitmap != null) {
                                    uploadImage = new UploadImage();
                                    uploadImage.setImage(bitmap);
                                    uploadImage.setName(fileOutput);
                                }
                                if (!mGetUploadImage.contains(uploadImage)) {
                                    mGetUploadImage.add(uploadImage);
                                }
                            }

                        }
                    }
                }
            }
        }

        return mGetUploadImage;

    }

    private ArrayList<UploadImage> loadIMage3(ArrayList<String> imageName) {

        File fileDirectory = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/");

        System.out.println("fileDirectory : " + fileDirectory);
        fileHelper.fileWriter("fileDirectory : " + fileDirectory, writer);
        if (fileDirectory.exists()) {
            File[] dirFiles = fileDirectory.listFiles();

            if (dirFiles.length != 0) {

                for (int i = 0; i < dirFiles.length; i++) {
                    String fileOutput = dirFiles[i].toString().substring(dirFiles[i].toString().lastIndexOf("/") + 1);
                    String pic = dirFiles[i].toString();      //get path of your image

                    if (imageName.size() > 0) {
                        for (int ss = 0; ss < imageName.size(); ss++) {
                            if (imageName.get(ss).toUpperCase().contains(fileOutput.toString().toUpperCase())) {

                                Bitmap bitmap = BitmapFactory.decodeFile(pic);

                                if (bitmap != null) {
                                    uploadImage = new UploadImage();
                                    uploadImage.setImage(bitmap);
                                    uploadImage.setName(fileOutput);
                                }
                                if (!mGetUploadImage.contains(uploadImage)) {
                                    mGetUploadImage.add(uploadImage);
                                }
                            }

                        }
                    }
                }
            }
        }

        return mGetUploadImage;

    }

    public void updateScreenByQuery(String query) {
        try {
            ArrayList<BE_QueryFields> fields = ut_common.getFieldsInQuery(query);
            fileHelper.fileWriter("updateScreenByQuery fields : " + fields.toString(), writer);

            System.out.println("updateScreenByQuery fields : " + fields.toString());
            fileHelper.fileWriter("getFormConfigValues Query : " + query, writer);
            HashMap<String, String> values = da_dynamics.getFormConfigValues(query);

            for (BE_QueryFields field : fields) {
                if (field.compCode.equals(SQL_FORMVIEW)) {
                    View view = formContent.findViewWithTag(field.fieldName.toUpperCase());
                    updateViewValue(view, values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()), field.fieldName, "formSpinners", 0);

                    formValues.put(field.fieldName.toUpperCase(), values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()));

                } else if (field.compCode.equals(SQL_LISTVIEW)) {
                    View view = null;
                    if (listConfigView.getChildCount() >= 1) {
                        view = listConfigView.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                    } else {
                        if (FormList_llValues != null) {
                            view = FormList_llValues.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                        } else {
                            view = listConfigView.findViewWithTag(field.fieldName + "#" + selectedListIndex);
                        }
                    }

                    updateViewValue(view, values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()), field.fieldName, "listSpinners", selectedListIndex);
                    selectedListValues.put(field.fieldName.toUpperCase(), values.get(field.compCode.toUpperCase() + field.fieldName.toUpperCase()));
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //TODO update for other view
    public void updateViewValue(View view, String text, String
            fieldName, String formlistSpinners, int position) {

        if (view != null) {

            if (formlistSpinners.equals("formSpinners")) {
                if (view instanceof AutoCompleteTextView) {

                    ArrayList<BE_ComboBox> spinnerItems = formSpinners.get(fieldName.toUpperCase());
                    if (spinnerItems != null) {
                        int index = -1;
                        for (int i = 0; i < spinnerItems.size(); i++) {
                            if (spinnerItems.get(i).Code.equals(text)) {
                                index = i;
                                break;
                            }
                        }

                        if (index >= 0) {
                            AutoCompleteTextView spinner = (AutoCompleteTextView) view;
                            spinner.setSelection(index);
                        }
                    }
                } else if (view instanceof CheckBox) {

                    CheckBox checkBox = (CheckBox) view;
                    if (text.equals("1") || text.equals("true")) {
                        checkBox.setChecked(true);
                    } else {
                        checkBox.setChecked(false);
                    }

                } else if (view instanceof MaterialButton) {
                    MaterialButton button = (MaterialButton) view;
                    button.setText(text);

                } else if (view instanceof TextInputEditText) {
                    TextView textView = (TextView) view;
                    textView.setText(text);

                } else if (view instanceof EditText) {
                    EditText editText = (EditText) view;
                    editText.setText(text);


                } else if (view instanceof TextView) {
                    TextView editText = (TextView) view;
                    editText.setText(text);
                }

            } else {

                String DataMemberType = "";

                for (int i = 0; i < listConfigs.size(); i++) {
                    if (listConfigs.get(i).ScreenName.equalsIgnoreCase(screen) && listConfigs.get(i).FieldName.equalsIgnoreCase(fieldName)) {
                        DataMemberType = listConfigs.get(i).DataMemberType;
                    }
                }
                Log.v("View N", "" + view);
                Log.v("View TEXT", "" + text);

                if (view instanceof Spinner) {
                    ArrayList<BE_ComboBox> spinnerItems = listSpinners.get(fieldName.toUpperCase());
                    Log.v("spinnerItems", spinnerItems + "");
                    if (spinnerItems != null) {
                        int index = -1;
                        for (int i = 0; i < spinnerItems.size(); i++) {
                            if (spinnerItems.get(i).Code.equals(text)) {
                                index = i;
                                break;
                            }
                        }

                        if (index >= 0) {
                            Spinner spinner = (Spinner) view;
                            spinner.setSelection(index);
                        }
                    }
                } else if (view instanceof CheckBox) {
                    boolean isChecked = false;
                    CheckBox checkBox = (CheckBox) view;
                    if (checkBox.isEnabled()) {
                        if (text.equals("1") || text.equals("true")) {
                            checkBox.setChecked(true);
                            isChecked = true;
                        } else {
                            isChecked = false;
                            checkBox.setChecked(false);
                        }
                    } else {
                        checkBox.setEnabled(true);
                        if (text.equals("1") || text.equals("true")) {
                            checkBox.setChecked(true);
                            isChecked = true;
                        } else {
                            isChecked = false;
                            checkBox.setChecked(false);
                        }
                        checkBox.setEnabled(false);
                    }

                    if (listLimit <= position) {

                        if (isChecked) {
                            hashMapArrayList2.get(position).put(fieldName.toUpperCase() + position, "1");
                            selectedListValues.put(fieldName.toUpperCase(), "1");
                        } else {
                            hashMapArrayList2.get(position).put(fieldName.toUpperCase() + position, "0");
                            selectedListValues.put(fieldName.toUpperCase(), "0");
                        }

                    } else {
                        if (isChecked) {
                            hashMapArrayList.get(position).put(fieldName.toUpperCase() + position, "1");
                            selectedListValues.put(fieldName.toUpperCase(), "1");
                        } else {
                            hashMapArrayList.get(position).put(fieldName.toUpperCase() + position, "0");
                            selectedListValues.put(fieldName.toUpperCase(), "0");
                        }

                    }


                } else if (view instanceof MaterialButton) {
                    MaterialButton button = (MaterialButton) view;
                    button.setText(text);

                } else if (view instanceof EditText) {

                    if (view != null && !((EditText) view).getText().toString().equals(text)) {
                        EditText editText = (EditText) view;
                        editText.setText(text);
                    }
                } else if (view instanceof Switch) {
                    Switch switchButton = (Switch) view;
                    if (text.equals("1")) {
                        switchButton.setChecked(true);
                    } else {
                        switchButton.setChecked(false);
                    }


                } else if (view instanceof TextView) {
                    TextView textView = (TextView) view;
                    if (DataMemberType.equalsIgnoreCase("CURRENCY")) {
                        DA_System da_system = new DA_System(getApplicationContext());
                        String currencySymbol = da_system.getCurrency();

                        if (system.get(0).PriceRoundingDigits != null) {
                            if (!system.get(0).PriceRoundingDigits.isEmpty() && !system.get(0).PriceRoundingDigits.equals("0")) {
                                String formt = "###,###,##0.";
                                int count = parseInt(system.get(0).PriceRoundingDigits);
                                for (int j = 0; j < count; j++) {
                                    formt = formt + "0";
                                }
                                NumberFormat CurrencyFormat1 = new DecimalFormat(formt);
                                text = CurrencyFormat1.format(Double.parseDouble(text));
                                text = currencySymbol + " " + text;
                            } else if (system.get(0).PriceRoundingDigits.equals("0")) {
                                NumberFormat CurrencyFormat2 = new DecimalFormat("###,###,##0");
                                text = CurrencyFormat2.format(Double.parseDouble(text));
                                text = currencySymbol + " " + text;
                            } else {
                                NumberFormat CurrencyFormat3 = new DecimalFormat("###,###,##0.00");
                                text = CurrencyFormat3.format(Double.parseDouble(text));
                                text = currencySymbol + " " + text;
                            }
                        } else {
                            NumberFormat CurrencyFormat4 = new DecimalFormat("###,###,##0.00");
                            text = CurrencyFormat4.format(Double.parseDouble(text));
                            text = currencySymbol + " " + text;
                        }
                        textView.setText(text);
                    } else {
                        textView.setText(text);
                    }
                }

            }
        } else {
            Log.v("View NUll", "" + view);
            fileHelper.fileWriter("View NUll : " + view, writer);
        }
    }

    //// Barcode update
    public void updateFormValuesPopup(String key, String value) {
        for (BE_FormConfig config : formConfigs) {
            View view = formContent.findViewWithTag(key.toUpperCase());
            if (view instanceof EditText) {
                TextView textView = (TextView) view;
                textView.setText(value);
            }
        }
        formValues.put(key.toUpperCase(), value);
        System.out.println("FormValues 2 : " + formValues);
        executeActionConfig("POPUP", AN_POPUPFIELDENTERED, "");

    }


    //TODO update for other view
    public void updateFormValues(HashMap<String, String> Fields, LinearLayout formContent, String fieldName, LinearLayout listBottomvalue) {

        String value = "";
        View view1 = null;
        System.out.println("UPDATEFOOTER :: 1 " + Fields.entrySet());
        fileHelper.fileWriter("UPDATEFOOTER :: 1 " + Fields.entrySet(), writer);

        String DataMemberType = "";
        String fieldcontrol = "";
        String newText = "";
        String[] field = new String[0];
        String fields = "";

        for (Map.Entry<String, String> entry : Fields.entrySet()) {

            for (int i = 0; i < formConfigs.size(); i++) {
                System.out.println("entry key "+entry.getKey());
                if (entry.getKey().contains(".")) {
                    field = entry.getKey().split("[.]");
                    fields = field[1];
                    System.out.println("formConfigs.get(i) "+ formConfigs.get(i).ScreenName+" screen "+screen);
                    if (formConfigs.get(i).ScreenName.equals(screen) && formConfigs.get(i).FieldName.equalsIgnoreCase(field[1])) {
                        DataMemberType = formConfigs.get(i).DataMemberType;
                        fieldcontrol = formConfigs.get(i).FieldControl;
                        newText = formConfigs.get(i).NewText;
                    }
                } else {
                    field = new String[]{entry.getKey()};
                    fields = entry.getKey();

                    if (formConfigs.get(i).ScreenName.equals(screen) && formConfigs.get(i).FieldName.equalsIgnoreCase(entry.getKey())) {
                        DataMemberType = formConfigs.get(i).DataMemberType;
                        fieldcontrol = formConfigs.get(i).FieldControl;
                        newText = formConfigs.get(i).NewText;
                    }
                }
            }

            if (entry.getKey().toUpperCase().equals("FORMVIEW." + fieldName.toUpperCase())) {
                ut_sp.setStringValue("FormView." + fieldName, entry.getValue());
            }

            System.out.println("KEY :: " + entry.getKey());
            System.out.println("DataMemberType :: " + DataMemberType);

            if (fieldcontrol.equals(FC_STATUSBAR)) {
                if (entry.getKey().contains(".")) {
                    String tagName[] = entry.getKey().split("[.]");
                    view1 = listBottomvalue.findViewWithTag(tagName[1].toUpperCase());
                } else {
                    view1 = listBottomvalue.findViewWithTag(entry.getKey().toUpperCase());
                }
            } else if (fieldcontrol.equals(FC_TITLE)) {
                if (entry.getKey().contains(".")) {
                    String tagName[] = entry.getKey().split("[.]");
                    view1 = titleLayout.findViewWithTag(tagName[1].toUpperCase());
                } else {
                    view1 = titleLayout.findViewWithTag(entry.getKey());
                    System.out.println("titleLayout key "+entry.getKey());
                }
            } else {
                if (entry.getKey().contains(".")) {
                    String tagName[] = entry.getKey().split("[.]");
                    view1 = formContent.findViewWithTag(tagName[1].toUpperCase());
                } else if (entry.getKey().equals(FC_TITLE)) {
                    System.out.println("title key "+entry.getKey());
                    view1 = titleLayout.findViewWithTag(entry.getKey().toUpperCase());
                } else {
                    System.out.println("formContent key "+entry.getKey());
                    view1 = formContent.findViewWithTag(entry.getKey());
                }
            }
            System.out.println("View123 " + view1);

            if (view1 != null) {

                System.out.println("View :: " + view1);
                if (view1 instanceof MaterialEditText) {
                    value = entry.getValue();
                    if (DataMemberType.equalsIgnoreCase("CURRENCY")) {
                        DA_System da_system = new DA_System(getApplicationContext());
                        String currencySymbol = da_system.getCurrency();

                        if (system.get(0).PriceRoundingDigits != null) {
                            if (!system.get(0).PriceRoundingDigits.isEmpty() && !system.get(0).PriceRoundingDigits.equals("0")) {
                                String formt = "###,###,###,##0.";
                                int count = parseInt(system.get(0).PriceRoundingDigits);
                                for (int j = 0; j < count; j++) {
                                    formt = formt + "0";
                                }
                                NumberFormat CurrencyFormat1 = new DecimalFormat(formt);
                                value = CurrencyFormat1.format(Double.parseDouble(value));
//                                value = currencySymbol + " " + value;
                            } else if (system.get(0).PriceRoundingDigits.equals("0")) {
                                NumberFormat CurrencyFormat2 = new DecimalFormat("###,###,###,##0");
                                value = CurrencyFormat2.format(Double.parseDouble(value));
//                                value = currencySymbol + " " + value;
                            } else {
                                NumberFormat CurrencyFormat3 = new DecimalFormat("###,###,###,##0.00");
                                value = CurrencyFormat3.format(Double.parseDouble(value));
//                                value = currencySymbol + " " + value;
                            }
                        } else {
                            NumberFormat CurrencyFormat4 = new DecimalFormat("###,###,###,##0.00");
                            value = CurrencyFormat4.format(Double.parseDouble(value));
//                            value = currencySymbol + " " + value;
                        }
                        System.out.println("value : " + value);
                        ((MaterialEditText) view1).setValue(currencySymbol + " " + value);
                        formValues.put(fields.toUpperCase(), value);

                    } else if (DataMemberType.equalsIgnoreCase(THOUSANDSEPARATOR)) {
                        NumberFormat CurrencyFormat = new DecimalFormat("###,###,##0.00");
                        if (value.isEmpty()) {
                            value = "0.00";
                        } else {
                            String valueText2 = CurrencyFormat.format(Double.parseDouble(value));
                            value = valueText2;
                        }
                        ((MaterialEditText) view1).setValue(value);
                        formValues.put(fields.toUpperCase(), value);

                    } else if (DataMemberType.equalsIgnoreCase("DATE")) {
                        String inputPattern = system.get(0).DateFormatView;
                        String outputPattern = system.get(0).DateFormatString;

                        SimpleDateFormat inputFormat = new SimpleDateFormat(inputPattern);
                        SimpleDateFormat outputFormat = new SimpleDateFormat(outputPattern);

                        Date date = null;
                        String str = null;

                        try {
                            date = inputFormat.parse(value);
                            str = outputFormat.format(date);
                        } catch (ParseException e) {
                            e.printStackTrace();
                        }

                        ((MaterialEditText) view1).setValue(str);
                        formValues.put(fields.toUpperCase(), str);

                    } else {
                        ((MaterialEditText) view1).setValue(value);
                        formValues.put(fields.toUpperCase(), value);

                    }

                } else if (view1 instanceof MaterialEditText_back) {
                    value = entry.getValue();
                    if (DataMemberType.equalsIgnoreCase("CURRENCY")) {
                        DA_System da_system = new DA_System(getApplicationContext());
                        String currencySymbol = da_system.getCurrency();

                        if (system.get(0).PriceRoundingDigits != null) {
                            if (!system.get(0).PriceRoundingDigits.isEmpty() && !system.get(0).PriceRoundingDigits.equals("0")) {
                                String formt = "###,###,###,##0.";
                                int count = parseInt(system.get(0).PriceRoundingDigits);
                                for (int j = 0; j < count; j++) {
                                    formt = formt + "0";
                                }
                                NumberFormat CurrencyFormat1 = new DecimalFormat(formt);
                                value = CurrencyFormat1.format(Double.parseDouble(value));
//                                value = currencySymbol + " " + value;
                            } else if (system.get(0).PriceRoundingDigits.equals("0")) {
                                NumberFormat CurrencyFormat2 = new DecimalFormat("###,###,###,##0");
                                value = CurrencyFormat2.format(Double.parseDouble(value));
//                                value = currencySymbol + " " + value;
                            } else {
                                NumberFormat CurrencyFormat3 = new DecimalFormat("###,###,###,##0.00");
                                value = CurrencyFormat3.format(Double.parseDouble(value));
//                                value = currencySymbol + " " + value;
                            }
                        } else {
                            NumberFormat CurrencyFormat4 = new DecimalFormat("###,###,###,##0.00");
                            value = CurrencyFormat4.format(Double.parseDouble(value));
//                            value = currencySymbol + " " + value;
                        }
                        ((MaterialEditText_back) view1).setValue(currencySymbol + " " + value);
                        formValues.put(fields.toUpperCase(), value);

                    } else if (DataMemberType.equalsIgnoreCase(THOUSANDSEPARATOR)) {
                        NumberFormat CurrencyFormat = new DecimalFormat("###,###,##0.00");
                        if (value.isEmpty()) {
                            value = "0.00";
                        } else {
                            String valueText2 = CurrencyFormat.format(Double.parseDouble(value));
                            value = valueText2;
                        }
                        ((MaterialEditText_back) view1).setValue(value);
                        formValues.put(fields.toUpperCase(), value);

                    } else if (DataMemberType.equalsIgnoreCase("DATE")) {
                        String inputPattern = system.get(0).DateFormatView;
                        String outputPattern = system.get(0).DateFormatString;

                        SimpleDateFormat inputFormat = new SimpleDateFormat(inputPattern);
                        SimpleDateFormat outputFormat = new SimpleDateFormat(outputPattern);

                        Date date = null;
                        String str = null;

                        try {
                            date = inputFormat.parse(value);
                            str = outputFormat.format(date);
                        } catch (ParseException e) {
                            e.printStackTrace();
                        }

                        ((MaterialEditText_back) view1).setValue(str);
                        formValues.put(fields.toUpperCase(), str);

                    } else {
                        ((MaterialEditText_back) view1).setValue(value);
                        formValues.put(fields.toUpperCase(), value);
                    }

                } else if (view1 instanceof ImageView) {
                    value = entry.getValue();
                    String path = "";

                    for (int i = 0; i < formConfigs.size(); i++) {

                        if ((formConfigs.get(i).FieldControl.startsWith("IMAGE") || formConfigs.get(i).FieldControl.equalsIgnoreCase("TAKEPHOTO")) && formConfigs.get(i).FieldName.equalsIgnoreCase(entry.getKey().toUpperCase())) {

                            if (formConfigs.get(i).FieldName.equalsIgnoreCase("PlanogramNew")) {
                                masterImageName = value;
                            }
                            Bitmap finalbitmap = null;

                            if (formConfigs.get(i).DataMemberType.equalsIgnoreCase("DISPLAYIMAGES")) {
                                path = fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + value;

                                if (formConfigs.get(i).FieldName.equalsIgnoreCase("PlanogramNew")) {
                                    masterImage = new File(path);
                                }

                                System.out.println("ImagePath : " + path);
                                BitmapFactory.Options options = new BitmapFactory.Options();
                                options.inPreferredConfig = Bitmap.Config.ARGB_8888;
                                Bitmap bitmap = BitmapFactory.decodeFile(path, options);
                                if (bitmap != null) {
                                    ((ImageView) view1).setImageBitmap(bitmap);
                                    finalbitmap = bitmap;
                                } else {
                                    ((ImageView) view1).setImageDrawable(getResources().getDrawable(R.drawable.noimageavailable));
                                }
                            } else {
                                path = fileHelper.getSalesDirectoryPath() + "/Photo/" + value;
                                System.out.println("ImagePath : " + path);
                                BitmapFactory.Options options = new BitmapFactory.Options();
                                options.inPreferredConfig = Bitmap.Config.ARGB_8888;
                                Bitmap bitmap = BitmapFactory.decodeFile(path, options);
                                if (bitmap != null) {
                                    if (formConfigs.get(i).FieldName.equalsIgnoreCase("PlanogramNew")) {
                                        masterImage = new File(path);
                                        System.out.println("masterImage : " + masterImage);
                                    }
                                    ((ImageView) view1).setImageBitmap(bitmap);
                                    finalbitmap = bitmap;
                                } else {

                                    path = fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + value;
                                    System.out.println("ImagePath : " + path);
                                    BitmapFactory.Options options1 = new BitmapFactory.Options();
                                    options1.inPreferredConfig = Bitmap.Config.ARGB_8888;
                                    Bitmap bitmap1 = BitmapFactory.decodeFile(path, options1);
                                    if (bitmap1 != null) {
                                        if (formConfigs.get(i).FieldName.equalsIgnoreCase("PlanogramNew")) {
                                            masterImage = new File(path);
                                            System.out.println("masterImage : " + masterImage);
                                        }
                                        ((ImageView) view1).setImageBitmap(bitmap1);
                                        finalbitmap = bitmap1;
                                    } else {

                                        path = fileHelper.getSalesDirectoryPath() + "/DisplayImages/" + value;
                                        System.out.println("ImagePath : " + path);
                                        BitmapFactory.Options options2 = new BitmapFactory.Options();
                                        options2.inPreferredConfig = Bitmap.Config.ARGB_8888;
                                        Bitmap bitmap2 = BitmapFactory.decodeFile(path, options2);

                                        if (bitmap2 != null) {
                                            if (formConfigs.get(i).FieldName.equalsIgnoreCase("PlanogramNew")) {
                                                masterImage = new File(path);
                                                System.out.println("masterImage : " + masterImage);
                                            }

                                            ((ImageView) view1).setImageBitmap(bitmap2);
                                            finalbitmap = bitmap2;
                                        } else {
                                            ((ImageView) view1).setImageDrawable(getResources().getDrawable(R.drawable.noimageavailable));
                                        }
                                    }

                                }

                            }
                            if (formConfigs.get(i).FieldControl.equals(FC_IMAGEWITHPREVIEW)) {
                                ((ImageView) view1).setOnClickListener(new OnImageClickListener(formConfigs.get(i), finalbitmap));
                            }

                        }
                    }

                } else if (view1 instanceof CheckBox) {
                    if (entry.getValue().equals("1") || entry.getValue().equals("true")) {
                        ((CheckBox) view1).setChecked(true);
                    } else {
                        ((CheckBox) view1).setChecked(false);
                    }
                } else if (view1 instanceof TextView) {
                    value = entry.getValue();
                    if (fieldcontrol.equalsIgnoreCase(FC_STATUSBAR)) {

                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
//                            ((TextView) view1).setText(Html.fromHtml(newText + " : " + value, Html.FROM_HTML_MODE_COMPACT));
                            ((TextView) view1).setText(Html.fromHtml(value, Html.FROM_HTML_MODE_COMPACT));
                        } else {
//                            ((TextView) view1).setText(Html.fromHtml(newText + " : " + value));
                            ((TextView) view1).setText(Html.fromHtml(value));
                        }
                    } else {
                        ((TextView) view1).setText(value);
                    }
                    formValues.put(fields.toUpperCase(), value);
                } else if (view1 instanceof MaterialSpinnerBackNew) {
                    value = entry.getValue();
                    if (fieldcontrol.equalsIgnoreCase(FC_COMBO_BOX)) {
                        ((MaterialSpinnerBackNew) view1).setValue(value);
                    }

                    formValues.put(fields.toUpperCase(), value);

                } else if (view1 instanceof MaterialEditTextAreaBack) {
                    value = entry.getValue();
                    if (fieldcontrol.equalsIgnoreCase(FC_TEXTAREA)) {
                        ((MaterialEditTextAreaBack) view1).setValue(value);
                    }

                    formValues.put(fields.toUpperCase(), value);

                } else if (view1 instanceof MaterialEditTextDate) {

                    MaterialEditTextDate simpleEdit = (MaterialEditTextDate) view1;

                    String valueText = entry.getValue();
                    SimpleDateFormat format;

                    Calendar calendar = Calendar.getInstance();
                    int mYear = calendar.get(Calendar.YEAR);
                    int mMonth = calendar.get(Calendar.MONTH);
                    int mDay = calendar.get(Calendar.DAY_OF_MONTH);
                    calendar.set(mYear, mMonth, mDay);

                    if (DataMemberType.toString().equalsIgnoreCase("String") || DataMemberType.toString().equalsIgnoreCase("DATETIME")) {
                        if (valueText == null) {
                            format = new SimpleDateFormat(system.get(0).DateTimeFormatString);
                            String values = format.format(Date.parse(String.valueOf(calendar.getTime())));
                            simpleEdit.setValue(values);
                        } else {
                            simpleEdit.setValue(ut_dateTime.isDateFormatValid(system, valueText.split(" ")[0]));
                        }

                    } else if (DataMemberType.toString().equalsIgnoreCase("DATE")) {

                        if (valueText == null) {
                            format = new SimpleDateFormat(system.get(0).DateFormatString);
                            String values = format.format(Date.parse(String.valueOf(calendar.getTime())));
                            simpleEdit.setValue(values);

                            formValues.put(entry.getKey().toUpperCase(), values);
                        } else {
                            simpleEdit.setValue(valueText);
                        }

                    } else if (DataMemberType.toString().equalsIgnoreCase("TIME")) {

                        if (valueText == null) {
                            format = new SimpleDateFormat(system.get(0).TimeFormatString);
                            String dateString = format.format(Date.parse(String.valueOf(calendar.getTime())));
                            simpleEdit.setValue(dateString);
                        } else {
                            simpleEdit.setValue(ut_dateTime.isDateFormatValid(system, valueText.split(" ")[1]));
                        }
                    }

                } else if (view1 instanceof LinearLayout) {

                    LinearLayout layout = (LinearLayout) view1;
                    if (layout.getChildCount() > 0) {
                        for (int i = 0; i < layout.getChildCount(); i++) {
                            View view = layout.getChildAt(i);

                            System.out.println("VIEW ONE : " + view);
                            System.out.println("VIEW TAG : " + view.getTag());
                            System.out.println("VIEW Key : " + entry.getKey());

                            if (view.getTag().toString().equalsIgnoreCase(entry.getKey().toString())) {
                                if (view instanceof TextView) {
                                    TextView textView = (TextView) view;
                                    textView.setText(entry.getValue());
                                }
                            }
                        }
                    }
                }
            }
        }
    }


    private void ReadOnlyEnableDisble(BE_ActionConfig actionConfig) {

        if (actionConfig.ActionValue.contains("FormView.")) {

            String[] split = actionConfig.ActionValue.split("FormView.");
            View view = formContent.findViewWithTag(split[1].toUpperCase());
            System.out.println("VIEW : " + view);
            if (actionConfig.ActionType.equalsIgnoreCase(AT_READONLYENABLE)) {
                if (view instanceof CheckBox) {
                    CheckBox checkBox = (CheckBox) view;
                    checkBox.setEnabled(true);
                } else if (view instanceof MaterialButton) {
                    MaterialButton button = (MaterialButton) view;
                    button.setEnabled(true);
                } else if (view instanceof MaterialEditText) {
                    MaterialEditText editText = (MaterialEditText) view;
                    editText.setEnable(true);
                } else if (view instanceof MaterialEditText_back) {
                    MaterialEditText_back editText = (MaterialEditText_back) view;
                    editText.setEnable(true);
                } else if (view instanceof MaterialSpinner) {
                    MaterialSpinner textView = (MaterialSpinner) view;
                    textView.setClickable(true);
                    textView.setFocusable(true);
                    textView.setEnabled(true);
                } else if (view instanceof MaterialSpinnerBack) {
                    MaterialSpinnerBack textView = (MaterialSpinnerBack) view;
                    textView.setClickable(true);
                    textView.setFocusable(true);
                    textView.setEnabled(true);
                }
            } else {
                if (view instanceof CheckBox) {
                    CheckBox checkBox = (CheckBox) view;
                    checkBox.setEnabled(false);
                } else if (view instanceof MaterialButton) {
                    MaterialButton button = (MaterialButton) view;
                    button.setEnabled(false);
                } else if (view instanceof MaterialEditText) {
                    MaterialEditText editText = (MaterialEditText) view;
                    editText.setEnable(false);
                } else if (view instanceof MaterialEditText_back) {
                    MaterialEditText_back editText = (MaterialEditText_back) view;
                    editText.setEnable(false);
                } else if (view instanceof MaterialSpinner) {
                    MaterialSpinner textView = (MaterialSpinner) view;
                    textView.setClickable(false);
                    textView.setFocusable(false);
                    textView.setEnabled(false);
                } else if (view instanceof MaterialSpinnerBack) {
                    MaterialSpinnerBack textView = (MaterialSpinnerBack) view;
                    textView.setClickable(false);
                    textView.setFocusable(false);
                    textView.setEnabled(false);
                }
            }

        } else if (actionConfig.ActionValue.contains("ListView.")) {
            String[] split = actionConfig.ActionValue.split("ListView.");
            if (selectedListIndex == -1) {
                View view;
                if (formlist) {
                    for (int i = 0; i < FormList_llValues.getChildCount(); i++) {
                        view = FormList_llValues.findViewWithTag(split[1].toUpperCase() + "#" + i);
                        System.out.println("VIEW : " + view);
                        System.out.println("selectedListIndex : " + i);
                        if (actionConfig.ActionType.equalsIgnoreCase(AT_READONLYENABLE)) {
                            if (view instanceof CheckBox) {
                                CheckBox checkBox = (CheckBox) view;
                                checkBox.setEnabled(true);
                            } else if (view instanceof MaterialButton) {
                                MaterialButton button = (MaterialButton) view;
                                button.setEnabled(true);
                            } else if (view instanceof EditText) {
                                EditText editText = (EditText) view;
                                editText.setEnabled(true);
                            } else if (view instanceof Spinner) {
                                Spinner textView = (Spinner) view;
                                textView.setEnabled(true);
                            } else if (view instanceof RadioGroup) {
                                RadioGroup textView = (RadioGroup) view;
                                textView.setEnabled(true);
                            }
                        } else {
                            if (view instanceof CheckBox) {
                                CheckBox checkBox = (CheckBox) view;
                                checkBox.setEnabled(false);
                            } else if (view instanceof MaterialButton) {
                                MaterialButton button = (MaterialButton) view;
                                button.setEnabled(false);
                            } else if (view instanceof EditText) {
                                EditText editText = (EditText) view;
                                editText.setEnabled(false);
                            } else if (view instanceof Spinner) {
                                Spinner textView = (Spinner) view;
                                textView.setEnabled(false);
                            } else if (view instanceof RadioGroup) {
                                RadioGroup textView = (RadioGroup) view;
                                textView.setEnabled(false);
                            }
                        }
                    }
                } else {
                    for (int i = 0; i < listConfigView.getChildCount(); i++) {
                        view = listConfigView.findViewWithTag(split[1].toUpperCase() + "#" + i);
                        System.out.println("VIEW : " + view);
                        System.out.println("selectedListIndex : " + i);
                        if (actionConfig.ActionType.equalsIgnoreCase(AT_READONLYENABLE)) {
                            if (view instanceof CheckBox) {
                                CheckBox checkBox = (CheckBox) view;
                                checkBox.setEnabled(true);
                            } else if (view instanceof MaterialButton) {
                                MaterialButton button = (MaterialButton) view;
                                button.setEnabled(true);
                            } else if (view instanceof EditText) {
                                EditText editText = (EditText) view;
                                editText.setEnabled(true);
                            } else if (view instanceof Spinner) {
                                Spinner textView = (Spinner) view;
                                textView.setEnabled(true);
                            } else if (view instanceof RadioGroup) {
                                RadioGroup textView = (RadioGroup) view;
                                textView.setEnabled(true);
                            }
                        } else {
                            if (view instanceof CheckBox) {
                                CheckBox checkBox = (CheckBox) view;
                                checkBox.setEnabled(false);
                            } else if (view instanceof MaterialButton) {
                                MaterialButton button = (MaterialButton) view;
                                button.setEnabled(false);
                            } else if (view instanceof EditText) {
                                EditText editText = (EditText) view;
                                editText.setEnabled(false);
                            } else if (view instanceof Spinner) {
                                Spinner textView = (Spinner) view;
                                textView.setEnabled(false);
                            } else if (view instanceof RadioGroup) {
                                RadioGroup textView = (RadioGroup) view;
                                textView.setEnabled(false);
                            }
                        }
                    }
                }

            } else {
                View view;
                if (formlist) {
                    view = FormList_llValues.findViewWithTag(split[1].toUpperCase() + "#" + selectedListIndex);
                } else {
                    view = listConfigView.findViewWithTag(split[1].toUpperCase() + "#" + selectedListIndex);
                }
                System.out.println("VIEW : " + view);
                System.out.println("selectedListIndex : " + selectedListIndex);
                if (actionConfig.ActionType.equalsIgnoreCase(AT_READONLYENABLE)) {
                    if (view instanceof CheckBox) {
                        CheckBox checkBox = (CheckBox) view;
                        checkBox.setEnabled(true);
                    } else if (view instanceof MaterialButton) {
                        MaterialButton button = (MaterialButton) view;
                        button.setEnabled(true);
                    } else if (view instanceof EditText) {
                        EditText editText = (EditText) view;
                        editText.setEnabled(true);
                    } else if (view instanceof Spinner) {
                        Spinner textView = (Spinner) view;
                        textView.setEnabled(true);
                    } else if (view instanceof RadioGroup) {
                        RadioGroup textView = (RadioGroup) view;
                        textView.setEnabled(true);
                    }
                } else {
                    if (view instanceof CheckBox) {
                        CheckBox checkBox = (CheckBox) view;
                        checkBox.setEnabled(false);
                    } else if (view instanceof MaterialButton) {
                        MaterialButton button = (MaterialButton) view;
                        button.setEnabled(false);
                    } else if (view instanceof EditText) {
                        EditText editText = (EditText) view;
                        editText.setEnabled(false);
                    } else if (view instanceof Spinner) {
                        Spinner textView = (Spinner) view;
                        textView.setEnabled(false);
                    } else if (view instanceof RadioGroup) {
                        RadioGroup textView = (RadioGroup) view;
                        textView.setEnabled(false);
                    }
                }
            }
        }

    }

    public void updateComboBox(String query, String fieldName, String
            userInsertedvalue) {
        View view = formContent.findViewWithTag(fieldName.toUpperCase());
        System.out.println("view : " + view);
        if (query.equalsIgnoreCase("others")) {
            ArrayList<BE_ComboBox> rtn = new ArrayList<>();
            BE_ComboBox comboBox = new BE_ComboBox();
//            comboBox.Text = userInsertedvalue;
//            comboBox.Code = "0";
//            rtn.add(comboBox);
            int tempselectedIndex = 0;
            if (view instanceof AutoCompleteTextView) {
                AutoCompleteTextView spinner = (AutoCompleteTextView) view;
                ArrayList<String> spinnerValue = new ArrayList<>();
                try {
                    ArrayAdapter<String> spinnerAdapter = null;
//                    spinnerValue.add(userInsertedvalue);
                    for (int i = 0; i < formSpinners.get(fieldName.toUpperCase()).size(); i++) {
                        spinnerValue.add(formSpinners.get(fieldName.toUpperCase()).get(i).Text);
                        if (spinnerValue.get(i).toString().equals(userInsertedvalue)) {
                            tempselectedIndex = i;
                            //  break;
                        }
                    }

                    spinner.setText(userInsertedvalue);
                    spinner.setSelection(tempselectedIndex);
                    spinnerAdapter = new ArrayAdapter<String>(MainActivity.this, R.layout.list_itemautotrial, spinnerValue);
                    spinner.setAdapter(spinnerAdapter);
                    spinnerAdapter.notifyDataSetChanged();
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        } else {

            if (view instanceof MaterialSpinner) {
                MaterialSpinner spinner = (MaterialSpinner) view;
                ArrayList<BE_ComboBox> comboBoxes = getComboBoxValues(query, fieldName, screen);

                if (comboBoxes.size() > 1) {
                    formValues.put(fieldName.toUpperCase(), comboBoxes.get(0).Code);
                }

                boolean hasAction = false;
                for (BE_ActionConfig config : actionConfigs) {
                    if (config.FieldName.toUpperCase().equals(fieldName.toUpperCase())) {
                        hasAction = true;
                        break;
                    }
                }

                ut_view.updateComboBox(spinner, comboBoxes, hasAction, fieldName.toUpperCase(),
                        (Code, Text, hasAction1) -> {

                            String value = Code;
                            fileHelper.fileWriter("onItemSelected fieldName : " + fieldName + " onItemSelected value : " + value, writer);
                            if (Text.equals("Othersss") || Text.equals("OTHERSss")) {
                                executeActionConfig(fieldName, AN_COMBOBOXFORMITEMCLICKED, "");
                            } else {
                                fileHelper.fileWriter("onItemSelected item.Code : " + Code, writer);
                                formValues.put(fieldName.toUpperCase(), Code);
                            }

                            fileHelper.fileWriter("formValues " + fieldName.toUpperCase() + ": " + formValues.get(fieldName.toUpperCase()), writer);
                            System.out.println("formValues " + fieldName.toUpperCase() + ": " + formValues.get(fieldName.toUpperCase()));

                            System.out.println("hasAction1 : " + hasAction1);

                            if (hasAction1) {
//                                if (formValues.get(fieldName.toUpperCase()) != null) {
                                executeActionConfig(fieldName, AN_COMBOBOXFORMITEMCLICKED, "");
//                                }
                            }

                        });

            } else if (view instanceof MaterialSpinnerBack) {
                MaterialSpinnerBack spinner = (MaterialSpinnerBack) view;
                ArrayList<BE_ComboBox> comboBoxes = getComboBoxValues(query, fieldName, screen);

                if (comboBoxes.size() > 1) {
                    formValues.put(fieldName.toUpperCase(), comboBoxes.get(0).Code);
                }

                boolean hasAction = false;
                for (BE_ActionConfig config : actionConfigs) {
                    if (config.FieldName.toUpperCase().equals(fieldName.toUpperCase())) {
                        hasAction = true;
                        break;
                    }
                }

                ut_view.updateComboBox(spinner, comboBoxes, hasAction, fieldName.toUpperCase(),
                        (Code, Text, hasAction1) -> {

                            String value = Code;
                            fileHelper.fileWriter("onItemSelected fieldName : " + fieldName + " onItemSelected value : " + value, writer);
                            if (Text.equals("Othersss") || Text.equals("OTHERSss")) {
                                executeActionConfig(fieldName, AN_COMBOBOXFORMITEMCLICKED, "");
                            } else {
                                fileHelper.fileWriter("onItemSelected item.Code : " + Code, writer);
                                formValues.put(fieldName.toUpperCase(), Code);
                            }

                            fileHelper.fileWriter("formValues " + fieldName.toUpperCase() + ": " + formValues.get(fieldName.toUpperCase()), writer);
                            System.out.println("formValues " + fieldName.toUpperCase() + ": " + formValues.get(fieldName.toUpperCase()));

                            System.out.println("hasAction1 : " + hasAction1);

                            if (hasAction1) {
//                                if (formValues.get(fieldName.toUpperCase()) != null) {
                                executeActionConfig(fieldName, AN_COMBOBOXFORMITEMCLICKED, "");
//                                }
                            }

                        });

            } else if (view instanceof MaterialSpinnerBackNew) {
                String NewText = "";
                MaterialSpinnerBackNew spinner = (MaterialSpinnerBackNew) view;
                ArrayList<BE_ComboBox> comboBoxes = getComboBoxValues(query, fieldName, screen);

                if (comboBoxes.size() > 1) {
                    formValues.put(fieldName.toUpperCase(), comboBoxes.get(0).Code);
                }

                boolean hasAction = false;
                for (BE_ActionConfig config : actionConfigs) {
                    if (config.FieldName.toUpperCase().equals(fieldName.toUpperCase())) {
                        hasAction = true;
                        break;
                    }
                }

                DA_FormConfig da_formConfig = new DA_FormConfig(this);
                ArrayList<BE_FormConfig> formConfigs = da_formConfig.getFormConfigs(screen, language);

                System.out.println("formConfigs : " + formConfigs);

                for (BE_FormConfig config : formConfigs) {

                    if (fieldName.equalsIgnoreCase(config.FieldName)) {
                        NewText = config.NewText;
                        break;
                    }
                }

                ut_view.updateComboBoxNew(spinner, comboBoxes, hasAction, NewText, fieldName.toUpperCase(),
                        (Code, Text, hasAction1) -> {

                            String value = Code;
                            fileHelper.fileWriter("onItemSelected fieldName : " + fieldName + " onItemSelected value : " + value, writer);
                            if (Text.equals("Othersss") || Text.equals("OTHERSss")) {
                                executeActionConfig(fieldName, AN_COMBOBOXFORMITEMCLICKED, "");
                            } else {
                                fileHelper.fileWriter("onItemSelected item.Code : " + Code, writer);
                                formValues.put(fieldName.toUpperCase(), Code);
                            }

                            fileHelper.fileWriter("formValues " + fieldName.toUpperCase() + ": " + formValues.get(fieldName.toUpperCase()), writer);
                            System.out.println("formValues " + fieldName.toUpperCase() + ": " + formValues.get(fieldName.toUpperCase()));

                            System.out.println("hasAction1 : " + hasAction1);

                            if (hasAction1) {
                                executeActionConfig(fieldName, AN_COMBOBOXFORMITEMCLICKED, "");
                            }

                        });

            }
        }

    }

    AdapterView.OnItemSelectedListener onItemSelectedListener = null;

    public void updateListComboBox(String query, String fieldName) {


        View view = null;

        System.out.println("listConfigView : " + listConfigView.getChildCount());

        try {

            if (formlist) {
                if (FormList_llValues != null) {
                    view = FormList_llValues.findViewWithTag(fieldName.toUpperCase() + "#" + selectedListIndex);
                } else {
                    view = listConfigView.findViewWithTag(fieldName.toUpperCase() + "#" + selectedListIndex);
                }
            } else {
                if (listConfigView.getChildCount() >= 2) {
                    view = listConfigView.findViewWithTag(fieldName.toUpperCase() + "#" + selectedListIndex);
                } else {
                    if (FormList_llValues != null) {
                        view = FormList_llValues.findViewWithTag(fieldName.toUpperCase() + "#" + selectedListIndex);
                    } else {
                        view = listConfigView.findViewWithTag(fieldName.toUpperCase() + "#" + selectedListIndex);
                    }

                }
            }


        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println("View : " + view);
        System.out.println("View tag : " + fieldName.toUpperCase() + "#" + selectedListIndex);

        if (view instanceof Spinner) {
            Spinner spinner = (Spinner) view;
            ArrayList<BE_ComboBox> comboBoxes = getComboBoxValues(query, fieldName, screen);
            if (comboBoxes.size() > 1) {
                selectedListValues.put(fieldName.toUpperCase(), comboBoxes.get(0).Code);
            }
            boolean hasAction = false;
            for (BE_ActionConfig config : actionConfigs) {
                if (config.FieldName.toUpperCase().equalsIgnoreCase(fieldName.toUpperCase())) {
                    hasAction = config.hasAction;
                    hasAction = true;
                    break;
                }
            }
            System.out.println("hasAction : " + hasAction);

            view.performClick();
            onItemSelectedListener = setSpinnerListener(hasAction, comboBoxes, listPosition, "");
            ut_view.updateListComboBox(spinner, comboBoxes, onItemSelectedListener);
        }

    }

    private AdapterView.OnItemSelectedListener setSpinnerListener(
            final boolean hasAction,
            final ArrayList<BE_ComboBox> spinnerItems, int pos, String queryName) {

        return new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {

                Object tag = adapterView.getTag();
                if (tag != null) {
                    String s_temp[] = tag.toString().split("[#]");
                    String fieldName = tag.toString();
                    String value = adapterView.getItemAtPosition(i).toString();
                    fileHelper.fileWriter("onItemSelected fieldName 4: " + s_temp[0], writer);
                    fileHelper.fileWriter("onItemSelected value 4: " + value, writer);

                    try {
                        if (selectedListValues.isEmpty()) {
                            selectedListValues.putAll(listConfigValues.get(pos));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    for (BE_ComboBox item : spinnerItems) {
                        if (item.Text.equals(value)) {
                            fileHelper.fileWriter("onItemSelected item.Code " + item.Code, writer);
                            selectedListValues.put(s_temp[0], item.Code);
                            break;
                        }

                    }

                    fileHelper.fileWriter("selectedListValues " + fieldName.toUpperCase() + ": " + selectedListValues.get(s_temp[0]), writer);

                    if (hasAction) {
                        executeActionConfig(s_temp[0], AN_COMBOBOXITEMCLICKED, "");
                    }
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {
            }
        };
    }

    public void callQRCode(BE_ActionConfig config) {
        try {
            Intent intent = new Intent(MainActivity.this, ScannerActivity.class);
            intent.putExtra(QR_ACTION_VALUE, config.ActionValue);
            startActivityForResult(intent, QR_REQUEST_CODE);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public Bitmap mark(Bitmap src) {

        String CustomerID = da_systemList.getSystemValue("SELECT SystemValue FROM SystemList WHERE code='CustomerID'");
        String outletName = "";
        if (CustomerID != null && !CustomerID.isEmpty()) {
            outletName = da_dynamics.NoexecuteQuery("SELECT Customername from customers where CustNo='" + CustomerID + "'");
        }


        String latitude = ut_sp.getStringValue(SQL_LATITUDE);
        String longitude = ut_sp.getStringValue(SQL_LONGITUDE);

        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
        String dateTime = sdf.format(Calendar.getInstance().getTime());

        int w = src.getWidth();
        int h = src.getHeight();
        Bitmap result = Bitmap.createBitmap(w, h, src.getConfig());
        Canvas canvas = new Canvas(result);

        Typeface plain2 = Typeface.createFromAsset(getAssets(), "fonts/CalibriLight.ttf");

        TextPaint textPaint = new TextPaint();
        textPaint.setTypeface(plain2);
        textPaint.setStrokeWidth(16);
        textPaint.setTextSize(22);
        textPaint.setAntiAlias(true);
        textPaint.setPathEffect(null);
        textPaint.setColor(Color.WHITE);


        float height = textPaint.measureText("yY");
        canvas.drawBitmap(src, 0, 0, null);
        if (outletName != null && !outletName.isEmpty()) {
            canvas.drawText(outletName, 0, src.getHeight() - 80, textPaint);
        }
        canvas.drawText(dateTime, 0, src.getHeight() - 60, textPaint);
        canvas.drawText("Lat : " + latitude, 0, src.getHeight() - 40, textPaint);
        canvas.drawText("Long : " + longitude, 0, src.getHeight() - 20, textPaint);
        return result;
    }


    public static Bitmap drawMultilineTextToBitmap(Context gContext, Bitmap bitmap, String gText) {
        // prepare canvas
        Resources resources = gContext.getResources();
        float scale = resources.getDisplayMetrics().density;
        Bitmap.Config bitmapConfig = bitmap.getConfig();
        // set default bitmap config if none
        if (bitmapConfig == null) {
            bitmapConfig = Bitmap.Config.ARGB_8888;
        }
        // so we need to convert it to mutable one
        bitmap = bitmap.copy(bitmapConfig, true);
        Canvas canvas = new Canvas(bitmap);
        TextPaint paint = new TextPaint(Paint.LINEAR_TEXT_FLAG | Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setAntiAlias(true);
        paint.setColor(Color.rgb(0, 0, 0));
        paint.setFakeBoldText(true);
        paint.setTextSize(10);
        int textWidth = canvas.getWidth() - (int) (16 * scale);
        // init StaticLayout for text
        StaticLayout textLayout = new StaticLayout(gText, paint,
                canvas.getWidth(), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f,
                false);
        // get height of multiline text
        int textHeight = textLayout.getHeight();
        // get position of text's top left corner
        float x = (bitmap.getWidth() - textWidth);
        float y = (bitmap.getHeight() - textHeight);
        // draw text to the Canvas Left
        canvas.save();
        canvas.translate((canvas.getWidth() / 2) - (textLayout.getWidth() / 2), y);
        textLayout.draw(canvas);
        canvas.restore();
        return bitmap;
    }


    public int getCameraPhotoOrientation(Context context, Uri imageUri, String imagePath) {
        int rotate = 0;
        try {
            context.getContentResolver().notifyChange(imageUri, null);
            File imageFile = new File(imagePath);

            ExifInterface exif = new ExifInterface(imageFile.getAbsolutePath());
            int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);

            switch (orientation) {
                case ExifInterface.ORIENTATION_ROTATE_270:
                    rotate = 270;
                    break;
                case ExifInterface.ORIENTATION_ROTATE_180:
                    rotate = 180;
                    break;
                case ExifInterface.ORIENTATION_ROTATE_90:
                    rotate = 90;
                    break;
            }

            Log.i("RotateImage", "Exif orientation: " + orientation);
            Log.i("RotateImage", "Rotate value: " + rotate);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return rotate;
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        uploadImage = new UploadImage();

        try {
            fileHelper.fileWriter("requestCode : " + requestCode + " , resultCode : " + resultCode, writer);
            fileHelper.fileWriter("output.getPath() : " + output.getPath(), writer);
            Bitmap bitmap2 = BitmapFactory.decodeFile(output.getPath());
        } catch (Exception e) {
            e.printStackTrace();
            fileHelper.fileWriter("Camera Exception one : " + e.getLocalizedMessage(), writer);
        }

        try {
            ut_sp.setStringValue(UT_Constants.AN_PHOTORETAKEN, "1");
            locationFinder = new FindAddress(MainActivity.this, null, formValues, fileHelper, writer);
            locationFinder.Search2();

            if (requestCode == QR_REQUEST_CODE) {
                String actionValue = data.getStringExtra(QR_ACTION_VALUE);
                String fieldName = actionValue.replace(SQL_FORMVIEW, "");

                if (resultCode == RESULT_OK) {
                    String contents = data.getStringExtra("SCAN_RESULT");

                    if (actionValue.startsWith(SQL_FORMVIEW)) {
                        View view = formContent.findViewWithTag(fieldName);
                        updateViewValue(view, contents, fieldName, "formSpinners", 0);
                    } else if (actionValue.startsWith(SQL_LISTVIEW)) {
                        View view = listConfigView.findViewWithTag(fieldName + "#" + selectedListIndex);
                        updateViewValue(view, contents, fieldName, "listSpinners", selectedListIndex);
                    }

                    formValues.put(SQL_BARCODE.toUpperCase(), contents);
                    System.out.println("Scanned data : " + contents);
                    System.out.println("SQL_BARCODE data : " + SQL_BARCODE.toUpperCase());

                    // Set scanned value in SearchView
                    simpleSearchView.setQuery(contents, false); // Set the text without triggering search

                    // Retrieve the last known search field name (if config is null)
                    String searchFieldName = formValues.containsKey("searchFieldName")
                            ? formValues.get("searchFieldName")
                            : "default_field";  // Replace with a suitable default if needed
                    System.out.println("searchFieldName "+searchFieldName);
                    // Store scanned data in form values
                    formValues.put("searchvalue", contents);
                    searchFilterSecond = contents;

                    String screenSignature = screen + "_" + FC_SEARCH + "_" + searchFieldName;
                    BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                    listConfigQuery = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues,
                            paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits,
                            AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

                    System.out.println("Triggered search with query: " + listConfigQuery);

                    scFilterLayout.removeAllViews();
                    scFilterselectedvalues.clear();

                    executeActionConfig(searchFieldName, AN_SEARCHOPEN, "");
                    listPage = 0;

                    // Manually call search function to update the list
                    initListViewSearch(screen);

                    doScanData(""); // Keep if required
                }


              /*  if (resultCode == RESULT_OK) {
                    String contents = data.getStringExtra("SCAN_RESULT");
                    if (actionValue.startsWith(SQL_FORMVIEW)) {
                        View view = formContent.findViewWithTag(fieldName);
                        updateViewValue(view, contents, fieldName, "formSpinners", 0);

                    } else if (actionValue.startsWith(SQL_LISTVIEW)) {
                        View view = listConfigView.findViewWithTag(fieldName + "#" + selectedListIndex);
                        updateViewValue(view, contents, fieldName, "listSpinners", selectedListIndex);
                    }
                    formValues.put(SQL_BARCODE.toUpperCase(), contents);
                    System.out.println("Scanned data : " + contents);
                    System.out.println("SQL_BARCODE data : " + SQL_BARCODE.toUpperCase());
                    simpleSearchView.setQuery(contents, true);

                    doScanData("");

                }*/ else if (resultCode == RESULT_CANCELED) {
                    //handle cancel
                }
            } else if (requestCode == TAKE_PICTURE) {
                if (resultCode == RESULT_OK) {

                    try {
                        boolean formExecute;

                        formExecute = executeActionConfig(imageTakePhoto.getTag().toString(), AN_PHOTOTAKEN, "");

                        if (formExecute) {
                            Bitmap bitmap2 = BitmapFactory.decodeFile(output.getPath());
                            int nh = (int) (bitmap2.getHeight() * (1024.0 / bitmap2.getWidth()));
                            Bitmap scaled = Bitmap.createScaledBitmap(bitmap2, 1024, nh, true);

                            //----------------
                            ExifInterface ei = new ExifInterface(output.getPath());
                            int orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,
                                    ExifInterface.ORIENTATION_UNDEFINED);

                            System.out.println("orientation : " + orientation);
                            Bitmap rotatedBitmap = null;
                            switch (orientation) {

                                case ExifInterface.ORIENTATION_ROTATE_90:
                                    rotatedBitmap = rotateImage(scaled, 90);
                                    break;

                                case ExifInterface.ORIENTATION_ROTATE_180:
                                    rotatedBitmap = rotateImage(scaled, 180);
                                    break;

                                case ExifInterface.ORIENTATION_ROTATE_270:
                                    rotatedBitmap = rotateImage(scaled, 270);
                                    break;

                                case ExifInterface.ORIENTATION_NORMAL:
                                default:
                                    rotatedBitmap = scaled;
                            }
                            //-------------------

                            Bitmap photo = mark(rotatedBitmap);

                            imageTakePhoto.setImageBitmap(photo);


//                            fileHelper.saveTakePhoto(photo, tempCameraFilename, fileHelper.getSalesDirectoryPath() + "/Photo/");
//                            fileHelper.saveTakePhoto(photo, tempCameraFilename, fileHelper.getSalesDirectoryPath() + "/TakePhoto/");

                            try {
                                FileOutputStream fos = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Photo/" + tempCameraFilename);
                                photo.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos);
                                fos.close();

                                FileOutputStream fos2 = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + tempCameraFilename);
                                photo.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos2);
                                fos2.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }


                            fileHelper.DeletePhoto();
                        }


                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
            } else if (requestCode == SURVEY_TAKE_PICTURE) {
                if (resultCode == RESULT_OK) {

                    try {
                        boolean formExecute;

                        formExecute = executeActionConfig(imageTakePhoto.getTag().toString(), AN_PHOTOTAKEN, "");

                        if (formExecute) {
                            Bitmap bitmap2 = BitmapFactory.decodeFile(output.getPath());
                            int nh = (int) (bitmap2.getHeight() * (1024.0 / bitmap2.getWidth()));
                            Bitmap scaled = Bitmap.createScaledBitmap(bitmap2, 1024, nh, true);

                            //----------------
                            ExifInterface ei = new ExifInterface(output.getPath());
                            int orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,
                                    ExifInterface.ORIENTATION_UNDEFINED);

                            System.out.println("orientation : " + orientation);
                            Bitmap rotatedBitmap = null;
                            switch (orientation) {

                                case ExifInterface.ORIENTATION_ROTATE_90:
                                    rotatedBitmap = rotateImage(scaled, 90);
                                    break;

                                case ExifInterface.ORIENTATION_ROTATE_180:
                                    rotatedBitmap = rotateImage(scaled, 180);
                                    break;

                                case ExifInterface.ORIENTATION_ROTATE_270:
                                    rotatedBitmap = rotateImage(scaled, 270);
                                    break;

                                case ExifInterface.ORIENTATION_NORMAL:
                                default:
                                    rotatedBitmap = scaled;
                            }
                            //-------------------

                            Bitmap photo = mark(rotatedBitmap);

                            imageTakePhoto.setImageBitmap(photo);


//                            fileHelper.saveTakePhoto(photo, surveyimageFilename, fileHelper.getSalesDirectoryPath() + "/TakePhoto/");
//                            fileHelper.saveTakePhoto(photo, surveyimageFilename, fileHelper.getSalesDirectoryPath() + "/Photo/");

                            try {
                                FileOutputStream fos = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Photo/" + surveyimageFilename);
                                photo.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos);
                                fos.close();

                                FileOutputStream fos2 = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + surveyimageFilename);
                                photo.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos2);
                                fos2.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }


                            fileHelper.DeletePhoto();


                            for (int a = 0; a < surveyModelArrayList.size(); a++) {
                                if (surveyModelArrayList.get(a).getControlName().contains(cameraSurveyConfig.PanelName)) {
                                    surveyModelArrayList.get(a).setAnswer(surveyimageFilename);
                                }
                            }


                        }


                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
            } else if (requestCode == TAKE_PIC) {
                if (resultCode == RESULT_OK) {

                    System.out.println("ListCameraTagFieldname : " + ListCameraTagFieldname);

                    image = (ImageView) findViewById(ListCameraTagFieldname);

                    String TAGNAME = image.getTag().toString();

                    String[] TagName = TAGNAME.split("#", 0);

                    System.out.println("TAGNAME : " + TAGNAME);

                    listExecute = executeActionConfig(TagName[0].toUpperCase(), AN_PHOTOTAKEN, "");

                    if (screen.equals("Merchandising")) {
                        listExecute = executeActionConfig("Cam", AN_PHOTOTAKEN, "");
                    }

                    Bitmap bitmap2 = BitmapFactory.decodeFile(output.getPath());
                    int nh = (int) (bitmap2.getHeight() * (1024.0 / bitmap2.getWidth()));
                    Bitmap scaled = Bitmap.createScaledBitmap(bitmap2, 1024, nh, true);

                    //----------------
                    ExifInterface ei = new ExifInterface(output.getPath());
                    int orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,
                            ExifInterface.ORIENTATION_UNDEFINED);

                    System.out.println("orientation : " + orientation);
                    Bitmap rotatedBitmap = null;
                    switch (orientation) {

                        case ExifInterface.ORIENTATION_ROTATE_90:
                            rotatedBitmap = rotateImage(scaled, 90);
                            break;

                        case ExifInterface.ORIENTATION_ROTATE_180:
                            rotatedBitmap = rotateImage(scaled, 180);
                            break;

                        case ExifInterface.ORIENTATION_ROTATE_270:
                            rotatedBitmap = rotateImage(scaled, 270);
                            break;

                        case ExifInterface.ORIENTATION_NORMAL:
                        default:
                            rotatedBitmap = scaled;
                    }
                    //-------------------
                    photo = mark(rotatedBitmap);


                    if (listExecute) {
                        previousScreenName = screen;
                        image.setImageBitmap(photo);
                    }

                    if (photo != null) {
                        uploadImage = new UploadImage();
                        uploadImage.setImage(photo);
                        uploadImage.setName(tempCameraFilename);
                    }
                    imageListPreview.add(new UploadImageList(TAGNAME, uploadImage));

//                    fileHelper.saveTakePhoto(photo, tempCameraFilename, fileHelper.getSalesDirectoryPath() + "/TakePhoto/");
//                    fileHelper.saveTakePhoto(photo, tempCameraFilename, fileHelper.getSalesDirectoryPath() + "/Photo/");

                    try {
                        FileOutputStream fos = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Photo/" + tempCameraFilename);
                        photo.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos);
                        fos.close();

                        FileOutputStream fos2 = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + tempCameraFilename);
                        photo.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos2);
                        fos2.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    fileHelper.DeletePhoto();

                }
            } else if (requestCode == TAKEPHOTO_WITHPREVIEW) {
                if (resultCode == RESULT_OK) {

                    System.out.println("ListCameraTagFieldname 2 : " + ListCameraTagFieldname);

                    image = (ImageView) findViewById(ListCameraTagFieldname);
                    String TAGNAME = image.getTag().toString();
                    String[] TagName = TAGNAME.split("#", 0);
                    System.out.println("TAGNAME 2 : " + TAGNAME);
                    listExecute = executeActionConfig(TagName[0].toUpperCase(), AN_PHOTOTAKEN, "");
                    if (screen.equals("Merchandising")) {
                        listExecute = executeActionConfig("Cam", AN_PHOTOTAKEN, "");
                    }

                    Bitmap bitmap2 = BitmapFactory.decodeFile(output.getPath());
                    int nh = (int) (bitmap2.getHeight() * (1024.0 / bitmap2.getWidth()));
                    Bitmap scaled = Bitmap.createScaledBitmap(bitmap2, 1024, nh, true);

                    //----------------
                    ExifInterface ei = new ExifInterface(output.getPath());
                    int orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,
                            ExifInterface.ORIENTATION_UNDEFINED);

                    System.out.println("orientation : " + orientation);
                    Bitmap rotatedBitmap = null;
                    switch (orientation) {

                        case ExifInterface.ORIENTATION_ROTATE_90:
                            rotatedBitmap = rotateImage(scaled, 90);
                            break;

                        case ExifInterface.ORIENTATION_ROTATE_180:
                            rotatedBitmap = rotateImage(scaled, 180);
                            break;

                        case ExifInterface.ORIENTATION_ROTATE_270:
                            rotatedBitmap = rotateImage(scaled, 270);
                            break;

                        case ExifInterface.ORIENTATION_NORMAL:
                        default:
                            rotatedBitmap = scaled;
                    }
                    //-------------------
                    photo = mark(rotatedBitmap);


                    if (listExecute) {
                        previousScreenName = screen;
                        image.setImageBitmap(photo);
                    }

                    System.out.println("listCameraFilename : " + tempCameraFilename);

                    if (photo != null) {
                        uploadImage = new UploadImage();
                        uploadImage.setImage(photo);
                        uploadImage.setName(tempCameraFilename);
                    }


                    imageListPreview.add(new UploadImageList(TAGNAME, uploadImage));

//                    fileHelper.saveTakePhoto(photo, tempCameraFilename, fileHelper.getSalesDirectoryPath() + "/TakePhoto/");
//                    fileHelper.saveTakePhoto(photo, tempCameraFilename, fileHelper.getSalesDirectoryPath() + "/Photo/");

                    try {
                        FileOutputStream fos = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Photo/" + tempCameraFilename);
                        photo.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos);
                        fos.close();

                        FileOutputStream fos2 = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + tempCameraFilename);
                        photo.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos2);
                        fos2.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    fileHelper.DeletePhoto();
                }
            } else if (requestCode == MENU_PIC) {
                if (resultCode == RESULT_OK) {

                    formValues.put(imageTag.toUpperCase(), tempCameraFilename);

                    Bitmap bitmap2 = BitmapFactory.decodeFile(output.getPath());
                    int nh = (int) (bitmap2.getHeight() * (1024.0 / bitmap2.getWidth()));
                    Bitmap scaled = Bitmap.createScaledBitmap(bitmap2, 1024, nh, true);

                    //----------------
                    ExifInterface ei = new ExifInterface(output.getPath());
                    int orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,
                            ExifInterface.ORIENTATION_UNDEFINED);

                    System.out.println("orientation : " + orientation);
                    Bitmap rotatedBitmap = null;
                    switch (orientation) {

                        case ExifInterface.ORIENTATION_ROTATE_90:
                            rotatedBitmap = rotateImage(scaled, 90);
                            break;

                        case ExifInterface.ORIENTATION_ROTATE_180:
                            rotatedBitmap = rotateImage(scaled, 180);
                            break;

                        case ExifInterface.ORIENTATION_ROTATE_270:
                            rotatedBitmap = rotateImage(scaled, 270);
                            break;

                        case ExifInterface.ORIENTATION_NORMAL:
                        default:
                            rotatedBitmap = scaled;
                    }
                    //-------------------

                    photo = mark(rotatedBitmap);

//                    fileHelper.saveTakePhoto(photo, tempCameraFilename, fileHelper.getSalesDirectoryPath() + "/TakePhoto/");
//                    fileHelper.saveTakePhoto(photo, tempCameraFilename, fileHelper.getSalesDirectoryPath() + "/Photo/");

                    try {
                        FileOutputStream fos = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Photo/" + tempCameraFilename);
                        photo.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos);
                        fos.close();

                        FileOutputStream fos2 = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + tempCameraFilename);
                        photo.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos2);
                        fos2.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    fileHelper.DeletePhoto();
                    executeActionConfig(imageTag, AN_PHOTOTAKEN, "");

                }
            } else if (requestCode == TAKE_PIC_WITHPREVIEW) {
                if (resultCode == RESULT_OK) {
                    boolean bexecute = false;
                    if (screen.equals("Merchandising")) {
                        bexecute = executeActionConfig("Cam", AN_PHOTOTAKEN, "");

                    }
                    if (bexecute) {
                        ImageView image = (ImageView) this.findViewById((Integer) cameraListFieldname);
                        Bitmap bitmap2 = BitmapFactory.decodeFile(output.getPath());
                        int nh = (int) (bitmap2.getHeight() * (1024.0 / bitmap2.getWidth()));
                        Bitmap scaled = Bitmap.createScaledBitmap(bitmap2, 1024, nh, true);

                        //----------------
                        ExifInterface ei = new ExifInterface(output.getPath());
                        int orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,
                                ExifInterface.ORIENTATION_UNDEFINED);

                        System.out.println("orientation : " + orientation);
                        Bitmap rotatedBitmap = null;
                        switch (orientation) {

                            case ExifInterface.ORIENTATION_ROTATE_90:
                                rotatedBitmap = rotateImage(scaled, 90);
                                break;

                            case ExifInterface.ORIENTATION_ROTATE_180:
                                rotatedBitmap = rotateImage(scaled, 180);
                                break;

                            case ExifInterface.ORIENTATION_ROTATE_270:
                                rotatedBitmap = rotateImage(scaled, 270);
                                break;

                            case ExifInterface.ORIENTATION_NORMAL:
                            default:
                                rotatedBitmap = scaled;
                        }
                        //-------------------

                        Bitmap photo = mark(rotatedBitmap);
                        image.setImageBitmap(photo);

                        if (photo.equals(defaultListCamerabitMap)) {

                        }
//                        fileHelper.saveTakePhoto(photo, listCameraFilename, fileHelper.getSalesDirectoryPath() + "/TakePhoto/");
//                        fileHelper.saveTakePhoto(photo, listCameraFilename, fileHelper.getSalesDirectoryPath() + "/Photo/");

                        try {
                            FileOutputStream fos = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Photo/" + listCameraFilename);
                            photo.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos);
                            fos.close();

                            FileOutputStream fos2 = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + listCameraFilename);
                            photo.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos2);
                            fos2.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }

                        fileHelper.DeletePhoto();
                        image.setOnClickListener(new OnListTakePhotImageWithPreview(photo, image, listCameraFilename, cameraListFieldname));
                    }
                }
            } else if (requestCode == TAKE_MULTIPLEPIC) {
//                if (resultCode == RESULT_OK) {
//                try {
//                    System.out.println("URI : " + data.getData());
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }

                System.out.println("resultCode : " + resultCode);

                mGetUploadImage = new ArrayList<>();
                uploadImage = new UploadImage();

                System.out.println("output.getPath() : " + output.getPath());

                Bitmap bitmap2 = BitmapFactory.decodeFile(output.getPath());
                int nh = (int) (bitmap2.getHeight() * (1024.0 / bitmap2.getWidth()));
                Bitmap scaled = Bitmap.createScaledBitmap(bitmap2, 1024, nh, true);

                //----------------
                ExifInterface ei = new ExifInterface(output.getPath());
                int orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,
                        ExifInterface.ORIENTATION_UNDEFINED);

                System.out.println("orientation : " + orientation);
                Bitmap rotatedBitmap = null;
                switch (orientation) {

                    case ExifInterface.ORIENTATION_ROTATE_90:
                        rotatedBitmap = rotateImage(scaled, 90);
                        break;

                    case ExifInterface.ORIENTATION_ROTATE_180:
                        rotatedBitmap = rotateImage(scaled, 180);
                        break;

                    case ExifInterface.ORIENTATION_ROTATE_270:
                        rotatedBitmap = rotateImage(scaled, 270);
                        break;

                    case ExifInterface.ORIENTATION_NORMAL:
                    default:
                        rotatedBitmap = scaled;
                }
                //-------------------

                Bitmap bitmap = mark(rotatedBitmap);

                if (bitmap != null) {
                    System.out.println("Multiphoto mGetUploadImage 1 : " + mGetUploadImage);

                    takemultiIMage = true;
                    multicamera = true;
                    boolean bexecute = executeActionConfig("MultiPhoto", AN_PHOTOTAKEN, "");

                    System.out.println("Multiphoto boolean : " + bexecute);

                    if (bexecute) {

                        LinearLayout horizontalscrollview = (LinearLayout) formContent.findViewWithTag(CameraTagFieldname);
                        horizontalscrollview.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, .2f));

                        uploadImage.setImage(bitmap);
                        uploadImage.setName(tempCameraFilename);
                        mGetUploadImage.add(uploadImage);

                        System.out.println("Multiphoto photosavepath : " + photosavepath);
                        System.out.println("Multiphoto mGetUploadImage 2 : " + mGetUploadImage);

//                        fileHelper.saveTakePhoto(bitmap, tempCameraFilename, fileHelper.getSalesDirectoryPath() + "/TakePhoto/");
//                        fileHelper.saveTakePhoto(bitmap, tempCameraFilename, fileHelper.getSalesDirectoryPath() + "/Photo/");

                        try {
                            FileOutputStream fos = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Photo/" + tempCameraFilename);
                            bitmap.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos);
                            fos.close();

                            FileOutputStream fos2 = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + tempCameraFilename);
                            bitmap.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos2);
                            fos2.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }

                        fileHelper.DeletePhoto();

                        takemultiIMage = true;
                        multicamera = true;
                        DynamicImageViewCreation(mGetUploadImage, horizontalscrollview, imageHeight, "");

                    }
                }
//                }
            } else if (requestCode == RETAKE_MULTIPLEPIC) {

                mGetUploadImage = new ArrayList<>();
                uploadImage = new UploadImage();

                System.out.println("output.getPath() : " + output.getPath());

                Bitmap bitmap2 = BitmapFactory.decodeFile(output.getPath());
                int nh = (int) (bitmap2.getHeight() * (1024.0 / bitmap2.getWidth()));
                Bitmap scaled = Bitmap.createScaledBitmap(bitmap2, 1024, nh, true);

                //----------------
                ExifInterface ei = new ExifInterface(output.getPath());
                int orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,
                        ExifInterface.ORIENTATION_UNDEFINED);

                System.out.println("orientation : " + orientation);
                Bitmap rotatedBitmap = null;
                switch (orientation) {

                    case ExifInterface.ORIENTATION_ROTATE_90:
                        rotatedBitmap = rotateImage(scaled, 90);
                        break;

                    case ExifInterface.ORIENTATION_ROTATE_180:
                        rotatedBitmap = rotateImage(scaled, 180);
                        break;

                    case ExifInterface.ORIENTATION_ROTATE_270:
                        rotatedBitmap = rotateImage(scaled, 270);
                        break;

                    case ExifInterface.ORIENTATION_NORMAL:
                    default:
                        rotatedBitmap = scaled;
                }
                //-------------------

                Bitmap bitmap = mark(rotatedBitmap);

                if (bitmap != null) {
                    System.out.println("Multiphoto mGetUploadImage 1 : " + mGetUploadImage);

                    takemultiIMage = true;
                    multicamera = true;
                    boolean bexecute = executeActionConfig("MultiPhoto", AN_PHOTORETAKEN, "");

                    System.out.println("Multiphoto boolean : " + bexecute);

                    if (bexecute) {
                        LinearLayout horizontalscrollview = (LinearLayout) formContent.findViewWithTag(CameraTagFieldname);
                        horizontalscrollview.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, .2f));

                        uploadImage.setImage(bitmap);
                        uploadImage.setName(tempCameraFilename);
                        mGetUploadImage.add(uploadImage);

                        System.out.println("Multiphoto photosavepath : " + photosavepath);
                        System.out.println("Multiphoto mGetUploadImage 2 : " + mGetUploadImage);

//                        fileHelper.saveTakePhoto(bitmap, tempCameraFilename, fileHelper.getSalesDirectoryPath() + "/TakePhoto/");
//                        fileHelper.saveTakePhoto(bitmap, tempCameraFilename, fileHelper.getSalesDirectoryPath() + "/Photo/");

                        try {
                            FileOutputStream fos = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Photo/" + tempCameraFilename);
                            bitmap.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos);
                            fos.close();

                            FileOutputStream fos2 = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + tempCameraFilename);
                            bitmap.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos2);
                            fos2.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }

                        fileHelper.DeletePhoto();

                        takemultiIMage = true;
                        multicamera = true;
                        DynamicImageViewCreation(mGetUploadImage, horizontalscrollview, imageHeight, "");

                    }
                }
            } else if (requestCode == RETAKE_PHOTOLIST) {
                mGetUploadImage = new ArrayList<>();
                uploadImage = new UploadImage();

                System.out.println("output.getPath() : " + output.getPath());

                Bitmap bitmap2 = BitmapFactory.decodeFile(output.getPath());
                int nh = (int) (bitmap2.getHeight() * (1024.0 / bitmap2.getWidth()));
                Bitmap scaled = Bitmap.createScaledBitmap(bitmap2, 1024, nh, true);

                //----------------
                ExifInterface ei = new ExifInterface(output.getPath());
                int orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,
                        ExifInterface.ORIENTATION_UNDEFINED);

                System.out.println("orientation : " + orientation);
                Bitmap rotatedBitmap = null;
                switch (orientation) {

                    case ExifInterface.ORIENTATION_ROTATE_90:
                        rotatedBitmap = rotateImage(scaled, 90);
                        break;

                    case ExifInterface.ORIENTATION_ROTATE_180:
                        rotatedBitmap = rotateImage(scaled, 180);
                        break;

                    case ExifInterface.ORIENTATION_ROTATE_270:
                        rotatedBitmap = rotateImage(scaled, 270);
                        break;

                    case ExifInterface.ORIENTATION_NORMAL:
                    default:
                        rotatedBitmap = scaled;
                }
                //-------------------

                Bitmap bitmap = mark(rotatedBitmap);

                if (bitmap != null) {
                    System.out.println("Multiphoto mGetUploadImage 1 : " + mGetUploadImage);

                    takemultiIMage = true;
                    multicamera = true;
                    boolean bexecute = executeActionConfig(FC_TAKEPHOTOWITHPREVIEW, AN_PHOTORETAKEN, "");

                    System.out.println("Multiphoto boolean : " + bexecute);

                    if (bexecute) {
                        uploadImage.setImage(bitmap);
                        uploadImage.setName(tempCameraFilename);
                        mGetUploadImage.add(uploadImage);

                        System.out.println("Multiphoto photosavepath : " + photosavepath);
                        System.out.println("Multiphoto mGetUploadImage 2 : " + mGetUploadImage);

//                        fileHelper.saveTakePhoto(bitmap, tempCameraFilename, fileHelper.getSalesDirectoryPath() + "/TakePhoto/");
//                        fileHelper.saveTakePhoto(bitmap, tempCameraFilename, fileHelper.getSalesDirectoryPath() + "/Photo/");

                        try {
                            FileOutputStream fos = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/Photo/" + tempCameraFilename);
                            bitmap.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos);
                            fos.close();

                            FileOutputStream fos2 = new FileOutputStream(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + tempCameraFilename);
                            bitmap.compress(Bitmap.CompressFormat.JPEG, imageCompressSize, fos2);
                            fos2.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }

                        fileHelper.DeletePhoto();

                        updatePhotTaken(bitmap, FIELDNAMEPHOTOTAKEN);

                    }
                }
            } else if (requestCode == 1000) {
                Uri uri = data.getData();
                InputStream inputStream = null;
                try {
                    inputStream = getContentResolver().openInputStream(uri);
                    OutputStream out = null;
                    if (inputStream != null) {

                        File outputFile = new File(fileHelper.getSalesDirectoryFolder(), "simplrSales.xml");
                        try {
                            out = new FileOutputStream(outputFile);
                            copyAssetFiles(inputStream, out);

                        } catch (FileNotFoundException e) {
                            throw new RuntimeException(e);
                        }

                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                getXMLData();
                deletesysconfile();
                deletesalesfile();
                finish();
            } else if (requestCode == 10) {
                opentimer(actionValueforTimer);
            } else if (requestCode == PICKFILE_REQUEST_CODE) {

                try {
                    Uri uri = data.getData();
                    System.out.println("uri : " + uri);
                    System.out.println("uri path : " + uri.getPath());

                    Cursor mCursor =
                            getApplicationContext().getContentResolver().query(uri, null, null, null, null);
                    int indexedname = mCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
                    mCursor.moveToFirst();
                    String filename = mCursor.getString(indexedname);
                    mCursor.close();


                    File file = new File(uri.getPath());
                    long size = getFileSize(this, uri);

                    if (size <= 10485760) {
                        System.out.println("size : " + size);
                        System.out.println("FiledName attach : " + attachFieldName);

                        long MEGABYTE = 1024 * 1024;
                        System.out.println("MEGABYTE : " + MEGABYTE);
                        double b = size / MEGABYTE;
                        System.out.println("MEGABYTE : " + b + " MB");

                        InputStream inputStream = null;
                        try {
                            inputStream = getContentResolver().openInputStream(uri);
                            OutputStream out = null;
                            if (inputStream != null) {

                                File outputFile = new File(fileHelper.getSalesDirectoryPath() + "/Photo/", filename);
                                try {
                                    out = new FileOutputStream(outputFile);
                                    copyAssetFiles(inputStream, out);

                                } catch (FileNotFoundException e) {
                                    throw new RuntimeException(e);
                                }

                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        fileNameList.add(filename);
                        fileAdapter.notifyDataSetChanged();

                        formValues.put(attachFieldName.toUpperCase(), filename);
                        executeActionConfig(attachFieldName, AN_FILEATTACHCOMPLETED, "");
                    } else {
                        executeActionConfig(attachFieldName, AN_FILEATTACHFAIL, "");
                        Toast.makeText(getApplicationContext(), "File size is higher then 10 MB", Toast.LENGTH_SHORT).show();
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }


            } else if (requestCode == PICK_IMAGE_REQUEST && resultCode == RESULT_OK && data != null && data.getData() != null) {
                Uri uri = data.getData();

                try {

                    File file = getFileFromUri(this, uri);

                    Bitmap bitmap2 = MediaStore.Images.Media.getBitmap(getContentResolver(), uri);
                    int nh = (int) (bitmap2.getHeight() * (1024.0 / bitmap2.getWidth()));
                    Bitmap scaled = Bitmap.createScaledBitmap(bitmap2, 1024, nh, true);

                    //----------------
                    ExifInterface ei = new ExifInterface(file);
                    int orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,
                            ExifInterface.ORIENTATION_UNDEFINED);

                    Bitmap rotatedBitmap = null;
                    switch (orientation) {

                        case ExifInterface.ORIENTATION_ROTATE_90:
                            rotatedBitmap = rotateImage(scaled, 90);
                            break;

                        case ExifInterface.ORIENTATION_ROTATE_180:
                            rotatedBitmap = rotateImage(scaled, 180);
                            break;

                        case ExifInterface.ORIENTATION_ROTATE_270:
                            rotatedBitmap = rotateImage(scaled, 270);
                            break;

                        case ExifInterface.ORIENTATION_NORMAL:
                        default:
                            rotatedBitmap = scaled;
                    }
                    //-------------------

                    Bitmap bitmap = mark(rotatedBitmap);

                    if (bitmap != null) {
                        File masterfile1 = new File(getPath(uri, this));
                        imageTakePhoto.setImageBitmap(bitmap);

                        fileHelper.saveTakePhoto(bitmap, formCameraFilename, fileHelper.getSalesDirectoryPath() + "/Photo/");


                        if (formCameraFilename.startsWith("M_")) {
                            masterImage = new File(fileHelper.getSalesDirectoryPath() + "/Photo/" + formCameraFilename);
                            masterImageName = formCameraFilename;
                        } else if (formCameraFilename.startsWith("T_")) {
                            transImage = new File(fileHelper.getSalesDirectoryPath() + "/Photo/" + formCameraFilename);
                            transImageName = formCameraFilename;
                        }

                        executeActionConfig(imageTakePhoto.getTag().toString(), AN_PHOTOTAKEN, "");

                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            fileHelper.fileWriter("Camera Exception two : " + e.getLocalizedMessage(), writer);

        }

    }

    public static String getPath(Uri uri, Context context) {
        final boolean needToCheckUri = Build.VERSION.SDK_INT >= 19;
        String selection = null;
        String[] selectionArgs = null;
        if (needToCheckUri && DocumentsContract.isDocumentUri(context, uri)) {
            if (isExternalStorageDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split(":");
                return Environment.getExternalStorageDirectory() + "/" + split[1];
            } else if (isDownloadsDocument(uri)) {
                final String id = DocumentsContract.getDocumentId(uri);
                if (id.startsWith("raw:")) {
                    return id.replaceFirst("raw:", "");
                }
                uri = ContentUris.withAppendedId(
                        Uri.parse("content://downloads/public_downloads"), Long.valueOf(id));
            } else if (isMediaDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split(":");
                final String type = split[0];
                switch (type) {
                    case "image":
                        uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                        break;
                    case "video":
                        uri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
                        break;
                    case "audio":
                        uri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                        break;
                }
                selection = "_id=?";
                selectionArgs = new String[]{
                        split[1]
                };
            }
        }
        if ("content".equalsIgnoreCase(uri.getScheme())) {
            String[] projection = {
                    MediaStore.Images.Media.DATA
            };
            try (Cursor cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, null)) {
                if (cursor != null && cursor.moveToFirst()) {
                    int columnIndex = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
                    return cursor.getString(columnIndex);
                }
            } catch (Exception e) {
                Log.e("on getPath", "Exception", e);
            }
        } else if ("file".equalsIgnoreCase(uri.getScheme())) {
            return uri.getPath();
        }
        return null;
    }

    private static boolean isExternalStorageDocument(Uri uri) {
        return "com.android.externalstorage.documents".equals(uri.getAuthority());
    }

    private static boolean isDownloadsDocument(Uri uri) {
        return "com.android.providers.downloads.documents".equals(uri.getAuthority());
    }

    private static boolean isMediaDocument(Uri uri) {
        return "com.android.providers.media.documents".equals(uri.getAuthority());
    }


    public static File getFileFromUri(Context context, Uri uri) {
        String[] projection = {MediaStore.Images.Media.DATA};
        ContentResolver contentResolver = context.getContentResolver();
        Cursor cursor = contentResolver.query(uri, projection, null, null, null);

        if (cursor != null) {
            int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
            cursor.moveToFirst();
            String filePath = cursor.getString(column_index);
            cursor.close();
            return new File(filePath);
        }
        return null;
    }

    public static long getFileSize(Context context, Uri uri) {
        long fileSize = 0;

        if (uri != null) {
            ContentResolver contentResolver = context.getContentResolver();
            Cursor cursor = contentResolver.query(uri, null, null, null, null);
            try {
                if (cursor != null && cursor.moveToFirst()) {
                    int sizeIndex = cursor.getColumnIndex(OpenableColumns.SIZE);
                    if (sizeIndex != -1) {
                        fileSize = cursor.getLong(sizeIndex);
                    }
                }
            } finally {
                if (cursor != null) {
                    cursor.close();
                }
            }
        }

        return fileSize;
    }

    private void updatePhotTaken(Bitmap bitmap, String fieldnamephototaken) {

        System.out.println("fieldnamephototaken : " + fieldnamephototaken);
        View view = null;
        view = listConfigView.findViewWithTag(fieldnamephototaken);
        if (view == null) {
            view = FormList_llValues.findViewWithTag(fieldnamephototaken);
        }

        System.out.println("VIEW : " + view);

        if (view instanceof ImageView) {
            if (bitmap == null) {
                ((ImageView) view).setImageDrawable(getResources().getDrawable(R.drawable.ic_camera));
            } else {
                ((ImageView) view).setImageBitmap(bitmap);
            }
        }

    }

    private void getXMLData() {
        System.out.println("UpdateXML");
        Document doc = fileHelper.AccessXmlfile("simplrSales.xml");

        String DBSolutionName = doc.getElementsByTagName("SolutionName").item(0).getTextContent();
        ut_sp.setStringValue(XML_SOLUTION_NAME, DBSolutionName);

        String DBSyncURL = doc.getElementsByTagName("DBSyncURL").item(0).getTextContent();
        ut_sp.setStringValue(XML_DB_SYNC_URL, DBSyncURL);

        String DBPathURL = doc.getElementsByTagName("DBPathURL").item(0).getTextContent();
        ut_sp.setStringValue(XML_DB_PATH_URL, DBPathURL);

        String GETURL = doc.getElementsByTagName("GetURL").item(0).getTextContent();
        ut_sp.setStringValue(XML_GET_URL, GETURL);

        String POSTURL = doc.getElementsByTagName("PostURL").item(0).getTextContent();
        ut_sp.setStringValue(XML_POST_URL, POSTURL);

    }

    public static Bitmap rotateImage(Bitmap source, float angle) {
        Matrix matrix = new Matrix();
        matrix.postRotate(angle);
        return Bitmap.createBitmap(source, 0, 0, source.getWidth(), source.getHeight(),
                matrix, true);
    }


    public void DynamicImageViewCreation(ArrayList<UploadImage> mGetUploadImage, LinearLayout cameraLayout, int imageHeight, String fieldControl) {


        if (!takemultiIMage) {
            TotalUploadImage.removeAll(TotalUploadImage);
        }

        System.out.println("replacebitmapImage : " + replacebitmapImage);
        System.out.println("TotalUploadImage : " + TotalUploadImage);
        System.out.println("mGetUploadImage : " + mGetUploadImage);
        if (replacebitmapImage != null) {

            if (mGetUploadImage == null) {
                for (int i = 0; i < TotalUploadImage.size(); i++) {
                    if (TotalUploadImage.get(i).getName().equalsIgnoreCase(replacebitmapImage)) {
                        TotalUploadImage.remove(i);
                    }
                }
            } else if (!TotalUploadImage.isEmpty()) {

                boolean imageHere = false;

                for (int i = 0; i < TotalUploadImage.size(); i++) {
                    if (TotalUploadImage.get(i).getName().equalsIgnoreCase(replacebitmapImage)) {
                        TotalUploadImage.set(i, mGetUploadImage.get(0));
                        imageHere = true;
                    }
                }

                if (!imageHere) {
                    TotalUploadImage.add(mGetUploadImage.get(0));
                }

            } else {
                TotalUploadImage.add(mGetUploadImage.get(0));
            }
        } else {
            if (!TotalUploadImage.containsAll(mGetUploadImage)) {
                TotalUploadImage.addAll(mGetUploadImage);
            }
        }

        System.out.println("TotalUploadImage : " + TotalUploadImage);

        LinearLayout linearLayout = new LinearLayout(MainActivity.this);
        linearLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        linearLayout.setOrientation(LinearLayout.VERTICAL);

        RecyclerView recyclerView = new RecyclerView(MainActivity.this);
        recyclerView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));

        FlexboxLayoutManager layoutManager = new FlexboxLayoutManager(this);
        layoutManager.setFlexDirection(FlexDirection.ROW);
        layoutManager.setJustifyContent(JustifyContent.FLEX_START);
        recyclerView.setLayoutManager(layoutManager);

        multiImageAdapter = new MultiImageAdapter(MainActivity.this, TotalUploadImage, imageHeight);
        recyclerView.setAdapter(multiImageAdapter);

        multiImageAdapter.setOnItemClickListener(new MultiImageAdapter.OnItemClickListener() {
            @Override
            public void onItemClick(View view, int position) {
                OnTakePhotImage(TotalUploadImage, TotalUploadImage.get(position).getImage(), TotalUploadImage.get(position).getName(), cameraLayout, position, fieldControl);
            }
        });


        try {
            cameraLayout.requestLayout();
            cameraLayout.removeAllViews();
        } catch (Exception e) {
        }
        linearLayout.removeAllViews();
        linearLayout.addView(recyclerView);
        cameraLayout.addView(linearLayout);

        replacebitmapImage = null;
        multicamera = false;
    }

    public void DynamicImageViewCreationOnline
            (ArrayList<String> mGetUploadImage, LinearLayout
                    cameraLayout, int imageHeight, String fieldControl) {

        LinearLayout linear = new LinearLayout(MainActivity.this);
        linear.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        linear.setOrientation(LinearLayout.VERTICAL);

        RecyclerView recyclerView = new RecyclerView(MainActivity.this);
        recyclerView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));

        LinearLayoutManager layoutManager = new LinearLayoutManager(getApplicationContext(), RecyclerView.HORIZONTAL, false);
        recyclerView.setLayoutManager(layoutManager);

        multiImageAdapterOnline = new MultiImageAdapterOnline(MainActivity.this, mGetUploadImage, imageHeight);
        recyclerView.setAdapter(multiImageAdapterOnline);

        multiImageAdapterOnline.setOnItemClickListener(new MultiImageAdapterOnline.OnItemClickListener() {
            @Override
            public void onItemClick(View view, int position) {
                OnTakePhotImageOnline(mGetUploadImage.get(position), fieldControl);
            }
        });


        try {
            cameraLayout.requestLayout();
            cameraLayout.removeAllViews();
        } catch (Exception e) {
            e.printStackTrace();
        }
        linear.removeAllViews();
        linear.addView(recyclerView);
        cameraLayout.addView(linear);

        replacebitmapImage = null;
        multicamera = false;
    }

    private void OnTakePhotImage(ArrayList<UploadImage> totalUploadImage, Bitmap bitmapImage, String name, LinearLayout cameraLayout, int position, String fieldControl) {

        if (fieldControl.toUpperCase().equals("MULTIPLEPHOTOWITHPREVIEW")) {
            ut_dialog.ShowPopupView(MainActivity.this, bitmapImage);
        } else {

            ut_dialog.ShowPopup(MainActivity.this, new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    for (int i = 0; i < totalUploadImage.size(); i++) {
                        if (totalUploadImage.get(i).getImage().equals(bitmapImage)) {
                            replacebitmapImage = totalUploadImage.get(i).getName();
                        }

                    }
                    tempCameraFilename = name;

                    File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
                    output = new File(dir, tempCameraFilename);

                    Uri photoURI = FileProvider.getUriForFile(MainActivity.this, getApplicationContext().getPackageName() + ".fileprovider", output);

                    Intent cameraIntent = null;
                    cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                    cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                    startActivityForResult(cameraIntent, RETAKE_MULTIPLEPIC);
                    //  someActivityResultLauncher.launch(cameraIntent);
                    ut_dialog.popupWindow.dismiss();

                }
            }, new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    replacebitmapImage = name;
                    takemultiIMage = false;
                    fileHelper.FiledeleteMultiphoto(fileHelper.getSalesDirectoryPath() + "/Photo/" + name);
                    fileHelper.FiledeleteMultiphoto(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + name);
                    TotalUploadImage.remove(position);
                    formValues.put("MULTIPHOTO", name);
                    executeActionConfig("", AN_DeleteImageWithPreview, "");
                    ut_dialog.popupWindow.dismiss();
                    multiImageAdapter.notifyDataSetChanged();

                }
            }, new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    ut_dialog.popupWindow.dismiss();
                }
            }, bitmapImage);
        }
    }

    private void OnTakePhotImageOnline(String name, String fieldControl) {
        ut_dialog.ShowPopupViewOnline(MainActivity.this, name);
    }

    public void OnTakePhotImageSingle(ArrayList<UploadImageList> uploadImageLists, int position, int pos, String tag) {
        ut_dialog.ShowPopup(MainActivity.this, new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                tempCameraFilename = uploadImageLists.get(pos).getUploadImage().getName();
                FIELDNAMEPHOTOTAKEN = uploadImageLists.get(pos).getName();
                System.out.println("tempCameraFilename : " + tempCameraFilename);
                System.out.println("FIELDNAMEPHOTOTAKEN : " + FIELDNAMEPHOTOTAKEN);

                File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
                output = new File(dir, tempCameraFilename);

                Uri photoURI = FileProvider.getUriForFile(MainActivity.this, getApplicationContext().getPackageName() + ".fileprovider", output);

                Intent cameraIntent = null;
                cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                startActivityForResult(cameraIntent, RETAKE_PHOTOLIST);
                ut_dialog.popupWindow.dismiss();

            }
        }, new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectedListValues.put(tag.toUpperCase(), uploadImageLists.get(pos).getUploadImage().getName());
                System.out.println("ListValue : " + selectedListValues);
                FIELDNAMEPHOTOTAKEN = uploadImageLists.get(pos).getName();
                replacebitmapImage = uploadImageLists.get(pos).getUploadImage().getName();
                fileHelper.FiledeleteMultiphoto(fileHelper.getSalesDirectoryPath() + "/Photo/" + uploadImageLists.get(pos).getUploadImage().getName());
                fileHelper.FiledeleteMultiphoto(fileHelper.getSalesDirectoryPath() + "/TakePhoto/" + uploadImageLists.get(pos).getUploadImage().getName());
                uploadImageLists.remove(pos);
                executeActionConfig("", AN_DeleteImageWithPreview, "");
                ut_dialog.popupWindow.dismiss();
                updatePhotTaken(null, FIELDNAMEPHOTOTAKEN);

            }
        }, new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ut_dialog.popupWindow.dismiss();
            }
        }, uploadImageLists.get(pos).getUploadImage().getImage());
    }

    @Override
    public boolean onNavigationItemSelected(MenuItem menuItem) {
        return false;
    }

    private ArrayList<BE_ComboBox> getSearchComboBoxValues(String fieldName) {
        ArrayList<BE_ComboBox> rtn = new ArrayList<>();
        String screenSearch = screen + "_" + FC_SEARCH + "_" + FC_COMBO_BOX + "_" + fieldName;
        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSearch);
        String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
        if (!query.equals("")) {
            fileHelper.fileWriter("getComboBoxValues Query : " + query, writer);
            rtn = da_dynamics.getComboBoxValues(query);
        }
        return rtn;
    }

    TextView NoDataFound;

    //  Displaying Dynamic values from selected filter
    @SuppressLint("NewApi")
    private void ListDynamicView
    (ArrayList<BE_ListConfig> configs, ArrayList<HashMap<String, String>> configsValues, HashMap<String, String> formValues, HashMap<String, String> selectedListValues, HashMap<String, String> paramFormValues, HashMap<String, String> paramSelectedListValues) {
        NoDataFound = new TextView(this);
        NoDataFound.setLayoutParams(new LinearLayout.LayoutParams((int) (screenWidth), LinearLayout.LayoutParams.MATCH_PARENT));
        NoDataFound.setGravity(Gravity.CENTER);
        NoDataFound.setTextSize(26);
        NoDataFound.setTextColor(getResources().getColor(R.color.textColor));
        NoDataFound.setTypeface(Typeface.DEFAULT_BOLD);
        NoDataFound.setText("No Record Found");
        try {
            listConfigView.removeAllViews();
        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println("listConfigValues : " + listConfigValues);
        if (!listConfigValues.isEmpty()) {
            listConfigView.setVisibility(View.VISIBLE);
            if (!Functions.isEmpty()) {

                if (Functions.get(0).DesignType == 1) {

                    listConfigHeader.setVisibility(View.GONE);
                    zerothCardview.setVisibility(View.GONE);
                    ListconfigcustomGrid listconfig = new ListconfigcustomGrid(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                    listconfig.Listconfigcustom(screen, scrollView, configs, listConfigValues, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding);
                }

                if (Functions.get(0).ScreenType != null) {

                    if (Functions.get(0).ScreenType.equals("5")) {

                        LinearLayout layout = new LinearLayout(this);
                        layout.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));

                        RecyclerView recyclerView = new RecyclerView(this);
                        recyclerView.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));

                        GridLayoutManager layoutManager = new GridLayoutManager(getApplicationContext(), 2);
                        recyclerView.setLayoutManager(layoutManager);

                        productListAdapter = new ProductListAdapter(MainActivity.this, ut_common, ut_sp, screen, scrollView, configs, listConfigValues, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, ut_view, typeFace, fileHelper, da_queryConfig, da_dynamics, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, heightRatio);
                        recyclerView.setAdapter(productListAdapter);

                        layout.addView(recyclerView);
                        listConfigView.addView(layout);

                    } else {

                        Listconfigcustom listconfig = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                        listconfig.initConfiguration(screen, scrollView, configs, listConfigValues, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, listConfigContainer, "", "");
                    }
                } else {

                    Listconfigcustom listconfig = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                    listconfig.initConfiguration(screen, scrollView, configs, listConfigValues, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, listConfigContainer, "", "");
                }

            } else {

                Listconfigcustom listconfig = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                listconfig.initConfiguration(screen, scrollView, configs, listConfigValues, listConfigView, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, listConfigContainer, "", "");

            }
            listConfigView.removeView(NoDataFound);

        } else {
            listConfigView.addView(NoDataFound);
        }

        progressBar.setVisibility(View.GONE);
    }

    public void doScanData(String fieldName) {
        executeActionConfig(fieldName, AN_SCANNEDDATA, "");
    }

    public CompoundButton.OnCheckedChangeListener onFormCheckBoxValueChanged() {
        return new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                Object tag = buttonView.getTag();
                if (tag != null) {
                    //Log.d("formCheckBox tag", tag.toString());
                    executeActionConfig(tag.toString(), AN_FORMCHECKBOXVALUECHANGED, "");
                }
            }
        };
    }

    public void ListSpinners(HashMap<String, ArrayList<BE_ComboBox>> listSpinnerValue) {
        listSpinners = listSpinnerValue;
    }


    public void doValueChanged(String fieldName, String Fieldcontrol, int index, HashMap<String, String> xselectedListValues, ArrayList<HashMap<String, String>> xfinalselectvalues, int mlastpos, String screen) {

        try {

            selectedListIndex = index;
            this.lastpos = mlastpos;
            selectedListValues = xselectedListValues;
            System.out.println("doCheckBoxValueChanged 1 : " + xselectedListValues.toString());

            String primaryKey = ut_sp.getStringValue(PRIMARYKEY);
            System.out.println("PRIMARYKEY : " + primaryKey);

            try {

                if (Fieldcontrol.equals(FC_OPTIONGROUP)) {
                    finalselectvalues2.clear();
                    finalselectvalues2.add(new HashMap<>(selectedListValues));
                } else if (Fieldcontrol.equals(FC_OPTION)) {
                    if (selectedListValues.containsKey("SELECTED")) {
                        if (selectedListValues.get("SELECTED").equals("1")) {
                            if (finalselectvalues2 != null) {
                                if (!finalselectvalues2.contains(selectedListValues)) {
                                    finalselectvalues2.add(new HashMap<>(selectedListValues));
                                }
                            } else {
                                finalselectvalues2 = new ArrayList<>();
                                finalselectvalues2.add(new HashMap<>(selectedListValues));
                            }
                        } else {
                            for (int i = 0; i < finalselectvalues2.size(); i++) {

                                try {

                                    if (selectedListValues.get("ORDERNO").toString().equals(finalselectvalues2.get(i).get("ORDERNO").toString())) {
                                        finalselectvalues2.remove(i);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                try {
                                    if (selectedListValues.get("INVNO").toString().equals(finalselectvalues2.get(i).get("INVNO").toString())) {
                                        finalselectvalues2.remove(i);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                try {
                                    if (selectedListValues.get("RECEIPTNO").toString().equals(finalselectvalues2.get(i).get("RECEIPTNO").toString())) {
                                        finalselectvalues2.remove(i);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                try {
                                    if (selectedListValues.get("SERVICENO").toString().equals(finalselectvalues2.get(i).get("SERVICENO").toString())) {
                                        finalselectvalues2.remove(i);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                try {
                                    if (selectedListValues.get("DOCNO").toString().equals(finalselectvalues2.get(i).get("DOCNO").toString())) {
                                        finalselectvalues2.remove(i);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                try {
                                    if (selectedListValues.get("RTNNO").toString().equals(finalselectvalues2.get(i).get("RTNNO").toString())) {
                                        finalselectvalues2.remove(i);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                try {
                                    if (selectedListValues.get("CRNOTENO").toString().equals(finalselectvalues2.get(i).get("CRNOTENO").toString())) {
                                        finalselectvalues2.remove(i);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }


                            }

                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            System.out.println("Fieldcontrol : " + Fieldcontrol);
            System.out.println("finalselectvalues2 : " + finalselectvalues2);
            fileHelper.fileWriter("doCheckBoxValueChanged : " + selectedListValues.toString(), writer);

            if (Fieldcontrol.equalsIgnoreCase(FC_OPTION) || Fieldcontrol.equalsIgnoreCase(FC_DISABLEDOPTION)) {
                executeActionConfigList(fieldName, AN_CHECKBOXVALUECHANGED, "", screen);
            } else if (Fieldcontrol.equalsIgnoreCase(FC_TEXT_BOX) || Fieldcontrol.equalsIgnoreCase(FC_EDITABLETEXTBOX)
                    || Fieldcontrol.equalsIgnoreCase(FC_NUMERICUPDOWN) || Fieldcontrol.equalsIgnoreCase(FC_NUMERICUPDOWNHILIGHT)) {
                try {
                    da_dynamics.executeQuery("update SystemList set SystemValue= '0' WHERE code='UseLastPosition'");
                } catch (Exception e) {
                    e.printStackTrace();
                }
                executeActionConfigList(fieldName, AN_LISTVALUECHANGED, "", screen);
            } else if (Fieldcontrol.equalsIgnoreCase(FC_COMBO_BOX)) {
                executeActionConfigList(fieldName, AN_COMBOBOXITEMCLICKED, "", screen);
            } else if (Fieldcontrol.equalsIgnoreCase(FC_BUTTON)) {
                executeActionConfigList(fieldName, AN_TBLROWBUTTONPRESSED, "", screen);
            } else if (Fieldcontrol.equalsIgnoreCase(FC_OPTIONGROUP)) {
                executeActionConfigList(fieldName, AN_OPTIONGROUPCHANGED, "", screen);
            } else if (Fieldcontrol.equalsIgnoreCase(FC_DATEPICKER)) {
                executeActionConfigList(fieldName, AN_LISTDATEPICKERCLICKED, "", screen);
            }

        } catch (ConcurrentModificationException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void doValueChangedChild(String fieldName, String Fieldcontrol, int index, HashMap<String, String> xselectedListValues, ArrayList<HashMap<String, String>> xfinalselectvalues, int mlastpos) {

        try {

            selectedListIndex = index;
            this.lastpos = mlastpos;
            selectedListValues = xselectedListValues;
            System.out.println("doCheckBoxValueChanged 1 : " + xselectedListValues.toString());


            String primaryKey = ut_sp.getStringValue(PRIMARYKEY);
            System.out.println("PRIMARYKEY : " + primaryKey);

            try {

                if (Fieldcontrol.equals(FC_OPTIONGROUP)) {
                    finalselectvalues2.clear();
                    finalselectvalues2.add(new HashMap<>(selectedListValues));
                } else {
                    if (selectedListValues.containsKey("SELECTED")) {
                        if (selectedListValues.get("SELECTED").equals("1")) {
                            if (finalselectvalues2 != null) {
                                if (!finalselectvalues2.contains(selectedListValues)) {
                                    finalselectvalues2.add(new HashMap<>(selectedListValues));
                                }
                            } else {
                                finalselectvalues2 = new ArrayList<>();
                                finalselectvalues2.add(new HashMap<>(selectedListValues));
                            }
                        } else {
                            for (int i = 0; i < finalselectvalues2.size(); i++) {

                                try {

                                    if (selectedListValues.get("ORDERNO").toString().equals(finalselectvalues2.get(i).get("ORDERNO").toString())) {
                                        finalselectvalues2.remove(i);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                try {
                                    if (selectedListValues.get("INVNO").toString().equals(finalselectvalues2.get(i).get("INVNO").toString())) {
                                        finalselectvalues2.remove(i);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                try {
                                    if (selectedListValues.get("RECEIPTNO").toString().equals(finalselectvalues2.get(i).get("RECEIPTNO").toString())) {
                                        finalselectvalues2.remove(i);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                try {
                                    if (selectedListValues.get("SERVICENO").toString().equals(finalselectvalues2.get(i).get("SERVICENO").toString())) {
                                        finalselectvalues2.remove(i);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                try {
                                    if (selectedListValues.get("DOCNO").toString().equals(finalselectvalues2.get(i).get("DOCNO").toString())) {
                                        finalselectvalues2.remove(i);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                try {
                                    if (selectedListValues.get("RTNNO").toString().equals(finalselectvalues2.get(i).get("RTNNO").toString())) {
                                        finalselectvalues2.remove(i);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                try {
                                    if (selectedListValues.get("CRNOTENO").toString().equals(finalselectvalues2.get(i).get("CRNOTENO").toString())) {
                                        finalselectvalues2.remove(i);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            System.out.println("Fieldcontrol : " + Fieldcontrol);
            fileHelper.fileWriter("doCheckBoxValueChanged : " + selectedListValues.toString(), writer);

            if (Fieldcontrol.equalsIgnoreCase(FC_OPTION) || Fieldcontrol.equalsIgnoreCase(FC_DISABLEDOPTION)) {
                executeActionConfigChild(fieldName, AN_CHECKBOXVALUECHANGED, "");
            } else if (Fieldcontrol.equalsIgnoreCase(FC_TEXT_BOX) || Fieldcontrol.equalsIgnoreCase(FC_EDITABLETEXTBOX) || Fieldcontrol.equalsIgnoreCase(FC_NUMERICUPDOWN)) {
                try {
                    da_dynamics.executeQuery("update SystemList set SystemValue= '0' WHERE code='UseLastPosition'");
                } catch (Exception e) {
                    e.printStackTrace();
                }
                executeActionConfigChild(fieldName, AN_LISTVALUECHANGED, "");
            } else if (Fieldcontrol.equalsIgnoreCase(FC_COMBO_BOX)) {
                executeActionConfigChild(fieldName, AN_COMBOBOXITEMCLICKED, "");
            } else if (Fieldcontrol.equalsIgnoreCase(FC_BUTTON)) {
                executeActionConfigChild(fieldName, AN_TBLROWBUTTONPRESSED, "");
            } else if (Fieldcontrol.equalsIgnoreCase(FC_OPTIONGROUP)) {
                executeActionConfigChild(fieldName, AN_OPTIONGROUPCHANGED, "");
            } else if (Fieldcontrol.equalsIgnoreCase(FC_DATEPICKER)) {
                executeActionConfigChild(fieldName, AN_LISTDATEPICKERCLICKED, "");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }


    }

    public void createFormContentListView(LinearLayout formContent, BE_FormConfig
            config, String screen) {

        formListScreenName = screen + FC_FORM + FC_LISTVIEW + "_" + config.FieldName;
        String formListScreenName2 = screen + FC_FORM + FC_LISTVIEW;

        refreshListName = formListScreenName;

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        llParentLayoutformlist = new LinearLayout(this);
        llParentLayoutformlist.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        llParentLayoutformlist.setOrientation(LinearLayout.VERTICAL);
        llParentLayoutformlist.setTag(config.FieldName.toUpperCase());

        createContainer(formListScreenName, formContent, llParentLayoutformlist, config, "", formListScreenName2);

    }

    private void createContainer(String formListScreenName, LinearLayout
            formContent, LinearLayout llParLayout, BE_FormConfig config, String refreshList, String formListScreenName2) {
        progressBar.setVisibility(View.VISIBLE);
        System.out.println("View : " + llParLayout);

        try {
            if (llParLayout != null) {
                llParLayout.removeAllViews();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        //Generate container
        hsContainer = new HorizontalScrollView(this);
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);
        hsContainer.setLayoutParams(params);
        hsContainer.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);
        hsContainer.setFocusable(true);
        hsContainer.setFocusableInTouchMode(true);
        hsContainer.setSmoothScrollingEnabled(true);
        hsContainer.setTag(config.FieldName.toUpperCase());
//        hsContainer.setBackground(getResources().getDrawable(R.drawable.list_back_color));
        hsContainer.setElevation(10);

        LinearLayout llContainer = new LinearLayout(this);
        llContainer.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        llContainer.setOrientation(LinearLayout.VERTICAL);

        try {
            //Generate header
            CardView cardView = new CardView(this);
            cardView.setRadius(15f);
            cardView.setCardElevation(0f);
            cardView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));

            LinearLayout llHeader = new LinearLayout(this);
            llHeader.setOrientation(LinearLayout.HORIZONTAL);
            String projectName = ut_sp.getStringValue(SP_PROJECTNAME);

            if (projectName.equalsIgnoreCase("WSA13UAT") || projectName.equalsIgnoreCase("WSAUAT") || projectName.equalsIgnoreCase("WSALIVE")) {
                llHeader.setBackgroundColor(getResources().getColor(R.color.transparent));
            } else {
                llHeader.setBackgroundColor(getResources().getColor(R.color.colorPrimary));
            }

            listConfigs = da_listConfig.getListConfigs(formListScreenName, language, screenWidth);
            initListConfigHeader(llHeader, listConfigs, scrollView, listConfigView);
            cardView.addView(llHeader);
            llContainer.addView(cardView);

        } catch (Exception e) {
            e.printStackTrace();
        }


        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        nsValues = new NestedScrollView(this);
        nsValues.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, contentHeight));

        llValues = new LinearLayout(this);
        LinearLayout.LayoutParams params2 = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        llValues.setLayoutParams(params2);
        llValues.setOrientation(LinearLayout.VERTICAL);
        if (!listConfigs.isEmpty()) {
            DA_ColorConfig da_colorConfig = new DA_ColorConfig(this);
            colorConfigs = da_colorConfig.getColorConfigs(screen);
        }

        formlist = true;
        FormList_llValues = new LinearLayout(this);
        FormList_llValues.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        FormList_llValues.setOrientation(LinearLayout.VERTICAL);
        FormList_llValues.setTag(config.FieldName.toUpperCase());

        long timer = 0;
        if (formListScreenName.equals("Sales Summary")) {
            timer = (long) 0.5;
        } else {
            timer = 0;
        }

        queryListConfig = da_queryConfig.getQueryConfig(formListScreenName);
        listConfigQuery = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

        String field = screen.substring("/".lastIndexOf(screen) + 1);
        setOnListClick();
        setOnListLongClick();
        fileHelper.fileWriter("ListConfig createContainer : ", writer);

        if (formListScreenName.contains("Sales Summary")) {
            Disposable d = Single.timer(timer, TimeUnit.SECONDS)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(ignored -> {
                        fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);
                        listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);  //load all values
                        initAddmainList(formListScreenName, listConfigs, listConfigValues, FormList_llValues, null, listConfigQuery, 0, null, hsContainer, config.FieldName, formListScreenName2);
                    });
            disposables.add(d);
        } /*else if (screen.equals("Configuration")) {
            fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);
            listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit);  //load all values
            initAddmainList(formListScreenName, listConfigs, listConfigValues, FormList_llValues, null, listConfigQuery, 0, null, hsContainer, config.FieldName, formListScreenName2);

        } */ else {

            System.out.println("MapListAdapter 001 ");
            fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);
            listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);  //load all values
            initAddmainList(formListScreenName, listConfigs, listConfigValues, FormList_llValues, null, listConfigQuery, 0, null, hsContainer, config.FieldName, formListScreenName2);

        }

        nsValues.addView(llValues);
        llContainer.addView(nsValues);
        hsContainer.addView(llContainer);
        llParLayout.addView(hsContainer);

        layoutArrayListllvalue.add(llValues);
        layoutArrayList.add(FormList_llValues);

        if (refreshList.equals("")) {
            formContent.addView(llParLayout);
        }
    }

    private void createContainerSearchlist(String formListScreenName, LinearLayout
            formContent, LinearLayout llParLayout, BE_FormConfig config, String refreshList,
                                           ArrayList<HashMap<String, String>> listConfigValues) {
        progressBar.setVisibility(View.VISIBLE);
        System.out.println("View : " + llParLayout);

        String formListScreenName2 = screen + FC_FORM + FC_LISTVIEW;

        try {
            llParLayout.removeAllViews();
        } catch (Exception e) {
            e.printStackTrace();
        }

        //Generate container
        hsContainer = new HorizontalScrollView(this);
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);
        hsContainer.setLayoutParams(params);
        hsContainer.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);
        hsContainer.setFocusable(true);
        hsContainer.setFocusableInTouchMode(true);
        hsContainer.setSmoothScrollingEnabled(true);
        hsContainer.setTag(config.FieldName.toUpperCase());
//        hsContainer.setBackground(getResources().getDrawable(R.drawable.list_back_color));
        hsContainer.setElevation(10);

        LinearLayout llContainer = new LinearLayout(this);
        llContainer.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        llContainer.setOrientation(LinearLayout.VERTICAL);

        try {
            //Generate header
            CardView cardView = new CardView(this);
            cardView.setRadius(15f);
            cardView.setCardElevation(0f);
            cardView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));

            LinearLayout llHeader = new LinearLayout(this);
            llHeader.setOrientation(LinearLayout.HORIZONTAL);
            String projectName = ut_sp.getStringValue(SP_PROJECTNAME);

            if (projectName.equalsIgnoreCase("WSA13UAT") || projectName.equalsIgnoreCase("WSAUAT") || projectName.equalsIgnoreCase("WSALIVE")) {
                llHeader.setBackgroundColor(getResources().getColor(R.color.transparent));
            } else {
                llHeader.setBackgroundColor(getResources().getColor(R.color.colorPrimary));
            }

            listConfigs = da_listConfig.getListConfigs(formListScreenName, language, screenWidth);
            initListConfigHeader(llHeader, listConfigs, scrollView, listConfigView);
            cardView.addView(llHeader);
            llContainer.addView(cardView);

        } catch (Exception e) {
            e.printStackTrace();
        }


        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        int paddings = 5;
        float density = getResources().getDisplayMetrics().density;
        int padding = (int) (paddings * density);

        nsValues = new NestedScrollView(this);
        nsValues.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, contentHeight));
//        nsValues.setPadding(0, padding, 0, padding);

        llValues = new LinearLayout(this);
        LinearLayout.LayoutParams params2 = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, contentHeight);
        llValues.setLayoutParams(params2);
        llValues.setOrientation(LinearLayout.VERTICAL);
        if (!listConfigs.isEmpty()) {
            DA_ColorConfig da_colorConfig = new DA_ColorConfig(this);
            colorConfigs = da_colorConfig.getColorConfigs(screen);
        }

        formlist = true;
        FormList_llValues = new LinearLayout(this);
        FormList_llValues.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
        FormList_llValues.setOrientation(LinearLayout.VERTICAL);
        FormList_llValues.setTag(config.FieldName.toUpperCase());

        long timer = 0;
        if (formListScreenName.equals("Sales Summary")) {
            timer = (long) 0.5;
        } else {
            timer = 0;
        }

//        queryListConfig = da_queryConfig.getQueryConfig(formListScreenName);
//        listConfigQuery = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

        String field = screen.substring("/".lastIndexOf(screen) + 1);
        setOnListClick();
        setOnListLongClick();
        fileHelper.fileWriter("ListConfig createContainer : ", writer);


        System.out.println("MapListAdapter 001 ");
        fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);


        initAddmainList(formListScreenName, listConfigs, listConfigValues, FormList_llValues, null, listConfigQuery, 0, null, hsContainer, config.FieldName, formListScreenName2);


        nsValues.addView(llValues);
        llContainer.addView(nsValues);
        hsContainer.addView(llContainer);
        llParLayout.addView(hsContainer);

        layoutArrayListllvalue.add(llValues);

        for (int a = 0; a < layoutArrayList.size(); a++) {
            if (layoutArrayList.get(a).getTag().toString().equalsIgnoreCase(FormList_llValues.getTag().toString())) {
                layoutArrayList.remove(a);
                layoutArrayList.add(FormList_llValues);
            } else {
                layoutArrayList.add(FormList_llValues);
            }
        }

    }

    private void createContainerEXPANDABLE(String formListScreenName, LinearLayout
            formContent, LinearLayout llParLayout, BE_FormConfig config, String refreshList) {
        progressBar.setVisibility(View.VISIBLE);

        try {
            if (llParLayout != null) {
                llParLayout.removeAllViews();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        //Generate container
        hsContainer = new HorizontalScrollView(this);
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);
        params.leftMargin = 15;
        hsContainer.setLayoutParams(params);
        hsContainer.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);
        hsContainer.setFocusable(true);
        hsContainer.setFocusableInTouchMode(true);
        hsContainer.setSmoothScrollingEnabled(true);
        hsContainer.setTag(config.FieldName.toUpperCase());

        LinearLayout llContainer = new LinearLayout(this);
        llContainer.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        llContainer.setOrientation(LinearLayout.VERTICAL);

        try {
            //Generate header
            LinearLayout llHeader = new LinearLayout(this);
            llHeader.setOrientation(LinearLayout.HORIZONTAL);
            String projectName = ut_sp.getStringValue(SP_PROJECTNAME);

            if (projectName.equalsIgnoreCase("WSA13UAT") || projectName.equalsIgnoreCase("WSAUAT") || projectName.equalsIgnoreCase("WSALIVE")) {
                llHeader.setBackgroundColor(getResources().getColor(R.color.transparent));
            }

            listConfigs = da_listConfig.getListConfigs(formListScreenName, language, screenWidth);
            initListConfigHeader(llHeader, listConfigs, scrollView, listConfigView);
            llContainer.addView(llHeader);
        } catch (Exception e) {
            e.printStackTrace();
        }


        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        nsValues = new NestedScrollView(this);
        nsValues.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, contentHeight));


        llValues = new LinearLayout(this);
        LinearLayout.LayoutParams params2 = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
        params2.setMargins(20, 0, 20, 0);
        llValues.setLayoutParams(params2);
        llValues.setOrientation(LinearLayout.VERTICAL);
        if (!listConfigs.isEmpty()) {
            DA_ColorConfig da_colorConfig = new DA_ColorConfig(this);
            colorConfigs = da_colorConfig.getColorConfigs(screen);
        }

        formlist = true;
        FormList_llValues = new LinearLayout(this);
        FormList_llValues.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
        FormList_llValues.setOrientation(LinearLayout.VERTICAL);
        FormList_llValues.setTag(config.FieldName.toUpperCase());

        queryListConfig = da_queryConfig.getQueryConfig(formListScreenName);
        listConfigQuery = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

        String field = screen.substring("/".lastIndexOf(screen) + 1);
        setOnListClick();
        setOnListLongClick();
        fileHelper.fileWriter("ListConfig createContainer : ", writer);

        fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);
        listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);  //load all values
        initAddmainListEXPANDABLE(formListScreenName, listConfigs, listConfigValues, FormList_llValues, null, listConfigQuery, 0, null, hsContainer);

        nsValues.addView(llValues);
        layoutArrayListllvalue.add(llValues);
        llContainer.addView(nsValues);
        hsContainer.addView(llContainer);
        llParLayout.addView(hsContainer);
        layoutArrayList.add(FormList_llValues);

        if (refreshList.equals("")) {
            formContent.addView(llParLayout);
        }


    }

    private void createContainerRefresh2(String formListScreenName, LinearLayout
            formContent, LinearLayout llParLayout, BE_FormConfig config, String refreshList, String actionPlan, String formListScreenName2) {
        progressBar.setVisibility(View.VISIBLE);

        listPage = 0;
        String screenName = formListScreenName.replace("_REFRESHFORMLIST", "");

        listConfigs = da_listConfig.getListConfigs(screenName, language, screenWidth);
        System.out.println("listConfigs : " + listConfigs);

        queryListConfig = da_queryConfig.getQueryConfig(actionPlan);
        listConfigQuery = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

        setOnListClick();
        setOnListLongClick();

        System.out.println("MapListAdapter 00 ");
        fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);
        listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);  //load all values

        System.out.println("FieldName : " + config.FieldName.toUpperCase());
        View view = nsValues.findViewWithTag(config.FieldName.toUpperCase());
        System.out.println("FORMLIST view : " + view);
        System.out.println("FORMLIST layoutArrayList : " + layoutArrayList);
        System.out.println("FORMLIST FormList_llValues : " + FormList_llValues.getTag());

//        if (screen.contains("Message") || !layoutArrayList.isEmpty()) {
        if (screen.contains("Message")) {
            System.out.println("layoutArrayList : " + layoutArrayList);
            System.out.println("layoutArrayListllvalues : " + layoutArrayListllvalue);

            for (int i = 0; i < layoutArrayList.size(); i++) {
                if (layoutArrayList.get(i).getTag().toString().equalsIgnoreCase(config.FieldName)) {
                    LinearLayout FormList_llValues = layoutArrayList.get(i);
                    try {
                        if (config.FieldName.toUpperCase().equals(FormList_llValues.getTag().toString().toUpperCase())) {
                            System.out.println("View : " + FormList_llValues.getTag());
                            if (FormList_llValues.getTag() != null) {
                                initAddmainList(formListScreenName, listConfigs, listConfigValues, FormList_llValues, null, listConfigQuery, i, screen, hsContainer, config.FieldName, formListScreenName2);
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        } else {
            if (view != null) {
                FormList_llValues = (LinearLayout) view;
                initAddmainList(formListScreenName, listConfigs, listConfigValues, FormList_llValues, null, listConfigQuery, 0, null, hsContainer, config.FieldName, formListScreenName2);
            } else {
                initAddmainList(formListScreenName, listConfigs, listConfigValues, FormList_llValues, null, listConfigQuery, 0, null, hsContainer, config.FieldName, formListScreenName2);
            }
        }

    }

    private void createContainerRefresh(String formListScreenName, LinearLayout
            formContent, LinearLayout llParLayout, String config, String refreshList, String actionPlan, String formListScreenName2) {
        try {
            progressBar.setVisibility(View.VISIBLE);

            System.out.println("formListScreenName : " + formListScreenName);
            System.out.println("ScreenName : " + screen);
            listPage = 0;
            String screenName = formListScreenName.replace("_REFRESHFORMLIST", "");

            listConfigs = da_listConfig.getListConfigs(screenName, language, screenWidth);
            System.out.println("listConfigs : " + listConfigs);

            queryListConfig = da_queryConfig.getQueryConfig(actionPlan);
            listConfigQuery = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

            setOnListClick();
            setOnListLongClick();

            System.out.println("MapListAdapter 00 ");
            fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);
            listConfigValues = da_dynamics.getListConfigValues(screen, listConfigs, listConfigQuery, listPage, listLimit, MdtlistLimit);  //load all values

            System.out.println("FieldName : " + config.toUpperCase());
            View view = nsValues.findViewWithTag(config.toUpperCase());
            System.out.println("FORMLIST view : " + view);
            System.out.println("FORMLIST layoutArrayList : " + layoutArrayList);
            System.out.println("FORMLIST FormList_llValues : " + FormList_llValues.getTag());

//        if (screen.contains("Message") || !layoutArrayList.isEmpty()) {
            if (screen.contains("Message")) {
                System.out.println("layoutArrayList : " + layoutArrayList);
                System.out.println("layoutArrayListllvalues : " + layoutArrayListllvalue);

                for (int i = 0; i < layoutArrayList.size(); i++) {
                    if (layoutArrayList.get(i).getTag().toString().equalsIgnoreCase(config)) {
                        LinearLayout FormList_llValues = layoutArrayList.get(i);
                        try {
                            if (config.toUpperCase().equals(FormList_llValues.getTag().toString().toUpperCase())) {
                                System.out.println("View : " + FormList_llValues.getTag());
                                if (FormList_llValues.getTag() != null) {
                                    initAddmainList(formListScreenName, listConfigs, listConfigValues, FormList_llValues, null, listConfigQuery, i, screen, hsContainer, config, formListScreenName2);
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            } else {
                if (view != null) {
                    FormList_llValues = (LinearLayout) view;
                    initAddmainList(formListScreenName, listConfigs, listConfigValues, FormList_llValues, null, listConfigQuery, 0, null, hsContainer, config, formListScreenName2);
                } else {
                    initAddmainList(formListScreenName, listConfigs, listConfigValues, FormList_llValues, null, listConfigQuery, 0, null, hsContainer, config, formListScreenName2);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void createContainermaplist(String formListScreenName, LinearLayout
            formContent, LinearLayout llParLayout, BE_FormConfig config, String
                                                refreshList, ArrayList<HashMap<String, String>> listConfigValues) {
        progressBar.setVisibility(View.VISIBLE);
        llParLayout.removeAllViews();
        //Generate container
        HorizontalScrollView hsContainer = new HorizontalScrollView(this);
        hsContainer.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        hsContainer.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);
        hsContainer.setFocusable(true);
        hsContainer.setFocusableInTouchMode(true);
        hsContainer.setSmoothScrollingEnabled(true);
        hsContainer.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                v.requestFocus();
                return false;
            }
        });
        LinearLayout llContainer = new LinearLayout(this);
        llContainer.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        llContainer.setOrientation(LinearLayout.VERTICAL);


        //Generate header
        LinearLayout llHeader = new LinearLayout(this);
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
        params.setMargins(30, 30, 30, 0);
        llHeader.setLayoutParams(params);
        llHeader.setOrientation(LinearLayout.HORIZONTAL);
        llHeader.setPadding(20, 0, 20, 0);
        String projectName = ut_sp.getStringValue(SP_PROJECTNAME);
        if (projectName.equalsIgnoreCase("WSA13UAT") || projectName.equalsIgnoreCase("WSAUAT") || projectName.equalsIgnoreCase("WSALIVE")) {
            llHeader.setBackgroundColor(getResources().getColor(R.color.transparent));
        } else {
//            llHeader.setBackground(getResources().getDrawable(R.drawable.box_back_withcorner_light));
        }
        listConfigs = da_listConfig.getListConfigs(formListScreenName, language, screenWidth);
        initListConfigHeader(llHeader, listConfigs, scrollView, listConfigView);
        llContainer.addView(llHeader);

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);

        nsValues = new NestedScrollView(this);
        nsValues.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, contentHeight));


        llValues = new LinearLayout(this);
        LinearLayout.LayoutParams params2 = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
        params2.setMargins(40, 0, 40, 0);
        llValues.setLayoutParams(params2);
        llValues.setOrientation(LinearLayout.VERTICAL);
        if (!listConfigs.isEmpty()) {
            DA_ColorConfig da_colorConfig = new DA_ColorConfig(this);
            colorConfigs = da_colorConfig.getColorConfigs(screen);
        }
        FormList_llValues = new LinearLayout(this);
        FormList_llValues.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
        FormList_llValues.setOrientation(LinearLayout.VERTICAL);

        queryListConfig = da_queryConfig.getQueryConfig(formListScreenName);
        listConfigQuery = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

        setOnListClick();
        setOnListLongClick();

        fileHelper.fileWriter("ListConfig Query : " + listConfigQuery, writer);

        initAddmainList(formListScreenName, listConfigs, this.listConfigValues, FormList_llValues, null, listConfigQuery, 0, null, hsContainer, config.FieldName, "");

        nsValues.addView(llValues);
        llContainer.addView(nsValues);
        hsContainer.addView(llContainer);
        llParLayout.addView(hsContainer);
        if (refreshList.equals("")) {
            formContent.addView(llParLayout);
        }


    }


    @Override
    protected void onDestroy() {
        super.onDestroy();
        disposables.clear();

        fileHelper.fileWriter("onDestroy Called : ", writer);
        System.out.println("onDestroy Called : ");

        if (screen.contains("FORM-LOGIN")) {
            hideFloatingView();
        }

        if (t != null) {
            t.cancel();
        }

        try {
            if (broadcastReceiver != null) {
                unregisterReceiver(broadcastReceiver);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {

            if (timer3 != null) {
                timer3.cancel();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }


        try {
            if (mPrintService != null) {
                mPrintService.stop();
            }
        } catch (Exception e) {
            e.printStackTrace();

        }

        if (viewpageRunnable != null) viewpageHandler.removeCallbacks(viewpageRunnable);

        try {
            if (delayTimer != null) {
                delayTimer.cancel();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void hideFloatingView() {
        stopService(new Intent(getApplicationContext(), FloatingViewService.class));
    }


    public void loadmapCustomer(LatLngBounds xLatLngBounds, List<Marker> lstMarcadores) {
        this.latLngBounds = xLatLngBounds;
        this.markerlist = lstMarcadores;

        System.out.println("mlistConfigs : " + markerlist);
        try {
            if (be_formConfig != null) {
                ArrayList<String> list = new ArrayList<>();
                String vall = "";
                try {
                    if (lstMarcadores != null) {
                        for (Marker marker : lstMarcadores) {
                            if (latLngBounds.contains(marker.getPosition())) {
                                if (vall.isEmpty()) {
                                    vall = "'" + marker.getTitle() + "'";
                                } else {
                                    vall = vall + ",'" + marker.getTitle() + "'";
                                }
                                list.add(marker.getTitle());
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                String query = "SELECT CustNo, Customername as CustName, address FROM Customers WHERE Customername IN (" + vall + ")";
                listConfigValues = da_dynamics.getMapListValues(query);

                System.out.println("listConfigValues : " + listConfigValues);
                System.out.println("be_formConfig : " + be_formConfig);

                try {

                    View view = formContent.findViewWithTag(be_formConfig.FieldName.toUpperCase());
                    formListScreenName = screen + FC_FORM + FC_LISTVIEW + "_" + be_formConfig.FieldName;
                    createContainermaplist(formListScreenName, formContent, (LinearLayout) view, be_formConfig, "RefreshList", listConfigValues);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    TextView NorecordFound;

    @SuppressLint("ResourceAsColor")
    private void initAddmainList(String
                                         formListScreenName, ArrayList<BE_ListConfig> formListConfigs, ArrayList<HashMap<String, String>> listConfigValues, LinearLayout
                                         FormList_llValues, BE_ActionConfig actionConfig, String listConfigQuery, int pos, String screen, HorizontalScrollView hsContainer, String fieldName, String formListScreenName2) {
        NorecordFound = new TextView(this);
        NorecordFound.setLayoutParams(new LinearLayout.LayoutParams((int) (screenWidth), LinearLayout.LayoutParams.MATCH_PARENT));
        NorecordFound.setGravity(Gravity.CENTER);
        NorecordFound.setTextSize(24);
        NorecordFound.setTextColor(Color.WHITE);
        NorecordFound.setTypeface(Typeface.DEFAULT_BOLD);
        NorecordFound.setText("No Record Found");

        System.out.println("listConfigValues : " + listConfigValues);
        System.out.println("actionConfig : " + actionConfig);

        FormList_llValues.removeAllViews();

        if (!listConfigValues.isEmpty()) {

            if (actionConfig == null) {

                System.out.println("MapListAdapter Functions : " + Functions);

                if (!Functions.isEmpty()) {

                    if (Functions.get(0).DesignType == 0) {

                        Listconfigcustom listConfigCustom = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                        listConfigCustom.initConfiguration(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer, fieldName, formListScreenName2);

                    } else if (Functions.get(0).DesignType == 1) {

                        listConfigHeader.setVisibility(View.GONE);
                        zerothCardview.setVisibility(View.GONE);
                        ListconfigcustomGrid listConfigCustom = new ListconfigcustomGrid(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                        listConfigCustom.Listconfigcustom(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding);
                    } else {
                        Listconfigcustom listConfigCustom = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                        listConfigCustom.initConfiguration(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer, fieldName, formListScreenName2);

                    }
                } else {
                    Listconfigcustom listConfigCustom = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                    listConfigCustom.initConfiguration(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer, fieldName, formListScreenName2);

                }


                FormList_llValues.invalidate();

                System.out.println("FormList_llValues TAG : " + FormList_llValues.getTag());

                if (FormList_llValues.getParent() != null) {
                    ((ViewGroup) FormList_llValues.getParent()).removeView(FormList_llValues);
                }

                if (screen != null) {
                    LinearLayout view = (LinearLayout) layoutArrayListllvalue.get(pos);
                    view.addView(FormList_llValues);
                } else {
                    llValues.addView(FormList_llValues);
                }

            } else {
                if (actionConfig != null) {
                    if (actionConfig.ActionType.equalsIgnoreCase(AT_DELMAINLISTVIEWROW)) {
                        setOnListClick();
                    } else {
                        if (!Functions.isEmpty()) {

                            if (Functions.get(0).DesignType == 0) {

                                Listconfigcustom listConfigCustom = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listConfigCustom.initConfiguration(formListScreenName, null, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer, fieldName, formListScreenName2);
                            } else if (Functions.get(0).DesignType == 1) {

                                listConfigHeader.setVisibility(View.GONE);
                                zerothCardview.setVisibility(View.GONE);

                                ListconfigcustomGrid listConfigCustom = new ListconfigcustomGrid(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listConfigCustom.Listconfigcustom(formListScreenName, null, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding);
                            } else {

                                Listconfigcustom listConfigCustom = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listConfigCustom.initConfiguration(formListScreenName, null, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer, fieldName, formListScreenName2);

                            }
                        } else {
                            Listconfigcustom listConfigCustom = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                            listConfigCustom.initConfiguration(formListScreenName, null, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer, fieldName, formListScreenName2);

                        }

                        if (FormList_llValues.getParent() != null) {
                            ((ViewGroup) FormList_llValues.getParent()).removeView(FormList_llValues);
                        }

                        if (screen != null) {
                            LinearLayout view = layoutArrayListllvalue.get(pos);
                            view.addView(FormList_llValues);
                        } else {
                            llValues.addView(FormList_llValues);
                        }
//                        llValues.addView(FormList_llValues);

                    }
                }
            }
        } else {

            if (!layoutArrayList.isEmpty()) {
                for (int i = 0; i < layoutArrayList.size(); i++) {

                    try {
                        if (layoutArrayList.get(i).getTag().toString().equalsIgnoreCase(FormList_llValues.getTag().toString())) {
                            layoutArrayList.get(i).removeAllViews();
                            layoutArrayList.get(i).addView(NorecordFound);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }

            } else {
                llValues.removeAllViews();
                NorecordFound.setVisibility(View.VISIBLE);
            }

        }
        progressBar.setVisibility(View.GONE);
    }

    @SuppressLint("ResourceAsColor")
    private void initAddmainListEXPANDABLE(String
                                                   formListScreenName, ArrayList<BE_ListConfig> formListConfigs, ArrayList<HashMap<String, String>> listConfigValues, LinearLayout
                                                   FormList_llValues, BE_ActionConfig actionConfig, String listConfigQuery, int pos, String screen, HorizontalScrollView hsContainer) {
        NorecordFound = new TextView(this);
        NorecordFound.setLayoutParams(new LinearLayout.LayoutParams((int) (screenWidth), LinearLayout.LayoutParams.MATCH_PARENT));
        NorecordFound.setGravity(Gravity.CENTER);
        NorecordFound.setTextSize(24);
        NorecordFound.setTextColor(Color.WHITE);
        NorecordFound.setTypeface(Typeface.DEFAULT_BOLD);
        NorecordFound.setText("No Record Found");

        System.out.println("listConfigValues : " + listConfigValues);

        if (!listConfigValues.isEmpty()) {

            if (actionConfig == null) {

                if (!Functions.isEmpty()) {
                    if (Functions.get(0).DesignType == 0) {
                        ListconfigcustomExpandable listConfigCustom = new ListconfigcustomExpandable(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                        listConfigCustom.initConfiguration(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer);
                    } else if (Functions.get(0).DesignType == 1) {
                        listConfigHeader.setVisibility(View.GONE);
                        zerothCardview.setVisibility(View.GONE);
                        ListconfigcustomGrid listConfigCustom = new ListconfigcustomGrid(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                        listConfigCustom.Listconfigcustom(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding);
                    } else {
                        ListconfigcustomExpandable listConfigCustom = new ListconfigcustomExpandable(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                        listConfigCustom.initConfiguration(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer);
                    }
                } else {
                    ListconfigcustomExpandable listConfigCustom = new ListconfigcustomExpandable(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                    listConfigCustom.initConfiguration(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer);
                }


                if (FormList_llValues.getParent() != null) {
                    ((ViewGroup) FormList_llValues.getParent()).removeView(FormList_llValues);
                }

                if (screen != null) {
                    LinearLayout view = (LinearLayout) layoutArrayListllvalue.get(pos);
                    view.addView(FormList_llValues);
                } else {
                    llValues.addView(FormList_llValues);
                }

            } else {
                if (actionConfig != null) {
                    if (actionConfig.ActionType.equalsIgnoreCase(AT_DELMAINLISTVIEWROW)) {
                        setOnListClick();
                    } else {
                        if (!Functions.isEmpty()) {

                            if (Functions.get(0).DesignType == 0) {

                                ListconfigcustomExpandable listConfigCustom = new ListconfigcustomExpandable(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listConfigCustom.initConfiguration(formListScreenName, null, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer);
                            } else if (Functions.get(0).DesignType == 1) {

                                listConfigHeader.setVisibility(View.GONE);
                                zerothCardview.setVisibility(View.GONE);

                                ListconfigcustomGrid listConfigCustom = new ListconfigcustomGrid(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listConfigCustom.Listconfigcustom(formListScreenName, null, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding);
                            } else {

                                ListconfigcustomExpandable listConfigCustom = new ListconfigcustomExpandable(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listConfigCustom.initConfiguration(formListScreenName, null, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer);

                            }
                        } else {
                            ListconfigcustomExpandable listConfigCustom = new ListconfigcustomExpandable(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                            listConfigCustom.initConfiguration(formListScreenName, null, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer);

                        }
                        llValues.addView(FormList_llValues);

                    }
                }
            }
        } else {
            llValues.removeAllViews();
            NorecordFound.setVisibility(View.VISIBLE);
        }
        progressBar.setVisibility(View.GONE);
    }

    @SuppressLint("ResourceAsColor")
    private void initAddmainListRefresh(String
                                                formListScreenName, ArrayList<BE_ListConfig> formListConfigs, ArrayList<HashMap<String, String>> listConfigValues, LinearLayout
                                                FormList_llValues, BE_ActionConfig actionConfig, String listConfigQuery) {
        NorecordFound = new TextView(this);
        NorecordFound.setLayoutParams(new LinearLayout.LayoutParams((int) (screenWidth), LinearLayout.LayoutParams.MATCH_PARENT));
        NorecordFound.setGravity(Gravity.CENTER);
        NorecordFound.setTextSize(24);
        NorecordFound.setTextColor(Color.WHITE);
        NorecordFound.setTypeface(Typeface.DEFAULT_BOLD);
        NorecordFound.setText("No Record Found");


        System.out.println("Refresh Call");

        if (!listConfigValues.isEmpty()) {

            if (!listConfigValues.get(0).isEmpty()) {

                if (actionConfig == null) {

                    if (!Functions.isEmpty()) {

                        if (Functions.get(0).DesignType == 0) {

                            Listconfigcustom listConfigCustom = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                            listConfigCustom.Listconfigcustom_Add(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCountrefresh, null, null, listConfigQuery, "", "");
                        } else if (Functions.get(0).DesignType == 1) {

                            listConfigHeader.setVisibility(View.GONE);
                            zerothCardview.setVisibility(View.GONE);
                            ListconfigcustomGrid listConfigCustom = new ListconfigcustomGrid(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                            listConfigCustom.Listconfigcustom_Add(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCountrefresh);
                        } else {
                            Listconfigcustom listConfigCustom = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                            listConfigCustom.Listconfigcustom_Add(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCountrefresh, null, null, this.listConfigQuery, "", "");

                        }
                    } else {
                        Listconfigcustom listConfigCustom = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                        listConfigCustom.Listconfigcustom_Add(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCountrefresh, null, null, this.listConfigQuery, "", "");

                    }
//                llValues.addView(FormList_llValues);

                } else {
                    if (actionConfig.ActionType.equalsIgnoreCase(AT_DELMAINLISTVIEWROW)) {
                        setOnListClick();
                        //   readListRowValues(llValues.getRootView());
                    } else {
                        if (!Functions.isEmpty()) {

                            if (Functions.get(0).DesignType == 0) {

                                Listconfigcustom listConfigCustom = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listConfigCustom.Listconfigcustom_Add(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCountrefresh, null, null, this.listConfigQuery, "", "");
                            } else if (Functions.get(0).DesignType == 1) {

                                listConfigHeader.setVisibility(View.GONE);
                                zerothCardview.setVisibility(View.GONE);

                                ListconfigcustomGrid listConfigCustom = new ListconfigcustomGrid(this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listConfigCustom.Listconfigcustom_Add(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCountrefresh);
                            } else {

                                Listconfigcustom listConfigCustom = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                                listConfigCustom.Listconfigcustom_Add(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCountrefresh, null, null, this.listConfigQuery, "", "");

                            }
                        } else {
                            Listconfigcustom listConfigCustom = new Listconfigcustom(MainActivity.this, ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
                            listConfigCustom.Listconfigcustom_Add(formListScreenName, nsValues, formListConfigs, listConfigValues, FormList_llValues, colorConfigs, onListClick, onListLongClick, textPadding, formValues, selectedListValues, paramFormValues, paramSelectedListValues, arrCountrefresh, null, null, this.listConfigQuery, "", "");

                        }
//                        llValues.addView(FormList_llValues);

                    }
                }
                FormList_llValues.invalidate();
                llValues.invalidate();
            }
        } else {
            NorecordFound.setVisibility(View.VISIBLE);
        }
        progressBar.setVisibility(View.GONE);
    }

    private void setAllConfigs() {

        DA_FormConfig da_formConfig = new DA_FormConfig(this);
        formConfigs = da_formConfig.getFormConfigs(screen, language);

        queryFormConfig = da_queryConfig.getQueryConfig(screen + "_FORM");
        //List config
        da_listConfig = new DA_ListConfig(this);
        listConfigs = da_listConfig.getListConfigs(screen, language, screenWidth);

        // Search config
        DA_SearchConfig da_searchConfig = new DA_SearchConfig(this);
        searchConfigs = da_searchConfig.getSearchConfigs(screen, language);

        // Color config
        if (!listConfigs.isEmpty()) {
            DA_ColorConfig da_colorConfig = new DA_ColorConfig(this);
            colorConfigs = da_colorConfig.getColorConfigs(screen);
        }

        readMessageConfig();

        DA_ActionConfig da_actionConfig = new DA_ActionConfig(this);
        actionConfigs = da_actionConfig.getActionConfigs(screen, ut_sp.getStringValue(SP_ACCESS_LEVEL));

        DA_MenuConfig da_menuConfig = new DA_MenuConfig(this);
        menuConfigs = da_menuConfig.getMenuconfig(screen, language, ut_sp.getStringValue(SP_ACCESS_LEVEL));


        multiLineIndex = false;
        for (BE_ListConfig listConfig : listConfigs) {
            if (listConfig.LineIndex.contains(".")) {
                multiLineIndex = true;
                break;
            }
        }


        if (!listConfigs.isEmpty()) {

            initFormContent(formContent, formConfigs, queryFormConfig, true, screen);
            queryListConfig = da_queryConfig.getQueryConfig(screen);
            listConfigQuery = ut_common.getQuery(queryListConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            initListView(screen);
            setToggleListener();

        } else {

            initFormContent(formContent, formConfigs, queryFormConfig, false, screen);
            listConfigContainer.setVisibility(HorizontalScrollView.GONE);
            toggleBtn.setVisibility(View.GONE);

        }


    }


    ArrayList<String> Header;

    public void createFormContentExpandableListView(LinearLayout
                                                            formContent, BE_FormConfig
                                                            config) {

        int contentHeight = Math.max(config.HeaderHeight, config.ValueHeight);
        contentHeight = (int) Math.round(contentHeight * heightRatio);
        ArrayList<BE_ExpandableListviewHeader> rtn = new ArrayList<>();

        String formExpListScreenName = screen + FC_FORM + "EXPLISTVIEW" + "_HEADER_" + config.FieldName;

        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(formExpListScreenName);

        String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);

        if (!query.equals("")) {
            fileHelper.fileWriter("getExpListviewValues Query : " + query, writer);
            rtn = da_dynamics.getExpListviewValues(query);
        }
        Header = new ArrayList<>();  /////Header of Expandable
        for (int i = 0; i < rtn.size(); i++) {
            Header.add(rtn.get(i).Header1);
        }

        LinearLayout llParentLayout = new LinearLayout(this);
        llParentLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, contentHeight, 1f));
        llParentLayout.setOrientation(LinearLayout.VERTICAL);

        initExpListConfigHeader(llParentLayout, config, Header, contentHeight);
        formContent.addView(llParentLayout);


    }

    public void savesign(BE_ActionConfig actionConfig) {

        if (actionConfig.ActionValue != null || !actionConfig.ActionValue.equals("")) {
            SignaturePad signaturePad;

            if (actionConfig.ActionValue.contains(".")) {

                String s_temp[] = actionConfig.ActionValue.split("[.]");
                signaturePad = (SignaturePad) formContent.findViewWithTag(s_temp[1].toUpperCase());

                Bitmap bitmapSignature = signaturePad.getSignatureBitmap();
                new SaveSignature(bitmapSignature, fileHelper, formValues, s_temp[1].toUpperCase()).execute();

            } else {

                signaturePad = (SignaturePad) formContent.findViewWithTag(actionConfig.ActionValue.toUpperCase());
                Bitmap bitmapSignature = signaturePad.getSignatureBitmap();

                new SaveSignature(bitmapSignature, fileHelper, formValues, actionConfig.ActionValue.toUpperCase()).execute();

            }

            Toast.makeText(this, "Signature Saved", Toast.LENGTH_SHORT).show();

        }

    }

    public void doClearSignature(BE_ActionConfig actionConfig) {

        if (actionConfig.ActionValue != null || !actionConfig.ActionValue.equals("")) {
            SignaturePad signaturePad;

            if (actionConfig.ActionValue.contains(".")) {

                String s_temp[] = actionConfig.ActionValue.split("[.]");
                signaturePad = (SignaturePad) formContent.findViewWithTag(s_temp[1].toUpperCase());
                signaturePad.clear();

                fileHelper.signaturepadFiledelete(s_temp[1].toUpperCase());
                formValues.put(s_temp[1].toUpperCase(), signfilename);

            } else {

                signaturePad = (SignaturePad) formContent.findViewWithTag(actionConfig.ActionValue.toUpperCase());
                signaturePad.clear();
                fileHelper.signaturepadFiledelete(formValues.get(actionConfig.ActionValue).toUpperCase());

            }
        }
    }

    public void isProgressLoading() {
        progressdialog = new Dialog(MainActivity.this);
        progressdialog.setContentView(R.layout.loading_dialog);
        progressdialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        progressdialog.setCancelable(true);
        progressdialog.getWindow().getAttributes().windowAnimations = R.style.animation;
        progressdialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);
        progressdialog.show();
    }

    private class OnImageClickListener implements View.OnClickListener {

        BE_FormConfig config;
        Bitmap bitmap;

        public OnImageClickListener(BE_FormConfig config, Bitmap bitmap) {

            this.config = config;
            this.bitmap = bitmap;
        }

        @Override
        public void onClick(View v) {

            executeActionConfig(config.FieldName, AN_FORMIMAGECLICKED, "");

            if (config.FieldControl.toUpperCase().equals("IMAGEWITHPREVIEW")) {
                openImageDialog(bitmap);
            }
        }
    }


    private void openImageDialog(Bitmap imageName) {

        Dialog dialog = new Dialog(this);
        dialog.setCancelable(true);
        dialog.setCanceledOnTouchOutside(true);
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog.setContentView(R.layout.image_preview_dialog);
        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.transparent)));
        dialog.getWindow().setLayout(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);

        ImageView imageView = (ImageView) dialog.findViewById(R.id.imageView);
        ImageButton imageButton = (ImageButton) dialog.findViewById(R.id.closeBTN);

        try {
            if (imageName != null) {
                imageView.setImageBitmap(imageName);
            } else {
                imageView.setImageResource(R.drawable.noimageavailable);
            }
        } catch (Exception e) {
            imageView.setImageResource(R.drawable.noimageavailable);
        }


        imageButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });

        dialog.show();
    }


    public void secondLevelAdapter(String formExpListScreenName, LinearLayout
            listConfigValues, String fieldName) {


        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(formExpListScreenName);
        String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
        Log.v("Res query", "" + query);
        listConfigs = da_listConfig.getListConfigs(formExpListScreenName, language, screenWidth);
        fileHelper.fileWriter("ListConfig Query : " + query, writer);
        ArrayList<HashMap<String, String>> formListValues = da_dynamics.getListConfigValues(screen, listConfigs, query, 0, 10, MdtlistLimit);  //load all values
        NestedScrollView nsValues = new NestedScrollView(this);
        nsValues.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        LinearLayout llValues = new LinearLayout(this);
        llValues.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
        llValues.setOrientation(LinearLayout.VERTICAL);


        Listconfigcustom listConfigCustom = new Listconfigcustom(MainActivity.this
                , ut_sp, ut_common, ut_view, da_queryConfig, da_dynamics, heightRatio, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, fabMenu, formValues, selectedListValues, paramFormValues, paramSelectedListValues, typeFace, fileHelper);
        listConfigCustom.initConfiguration(formExpListScreenName, null, listConfigs, formListValues, llValues, colorConfigs, onListClick, onListLongClick, textPadding, listConfigQuery, hsContainer, "", "");
        nsValues.addView(llValues);
        listConfigValues.addView(nsValues);
    }

    public void initExpListConfigHeader(LinearLayout listConfigHeader, BE_FormConfig
            Formconfig, ArrayList<String> Header, int contentHeight) {


        HashMap<String, ArrayList<HashMap<String, String>>> childValues = new HashMap<>();
        ArrayList<HashMap<String, String>> formListValues = new ArrayList<>();
        for (int i = 0; i < Header.size(); i++) {
            groupPos = i + 1;
            String formExpListScreenName = screen + FC_FORM + "EXPLISTVIEW" + "_HEADER_" + Formconfig.FieldName + "_Sub" + groupPos;

            BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(formExpListScreenName);
            String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
            Log.v("Res query", "" + query);
            listConfigs = da_listConfig.getListConfigs(formExpListScreenName, language, screenWidth);
            fileHelper.fileWriter("ListConfig Query : " + query, writer);
            formListValues = da_dynamics.getListConfigValues(screen, listConfigs, query, 0, 10, MdtlistLimit);  //load all values
            childValues.put(Header.get(i).toString(), formListValues);

            System.out.println("formListValues :: " + formListValues);
            System.out.println("listConfigs :: " + listConfigs);
        }


        expandableListView = new ExpandableListView(MainActivity.this);
        expandableListView.setNestedScrollingEnabled(true);
        expandableListView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, contentHeight, 1f));

        CustomExpandableListAdapter expandableListAdapter = new CustomExpandableListAdapter(MainActivity.this, screen, listConfigs, Formconfig.FieldName, Header, childValues, fontsize, heightRatio, ut_view, textPadding, ut_common, ut_sp, typeFace);
        expandableListView.setAdapter(expandableListAdapter);
        expandableListAdapter.notifyDataSetChanged();

        expandableListView.setOnGroupExpandListener(new ExpandableListView.OnGroupExpandListener() {
            @Override
            public void onGroupExpand(int groupPosition) {

                Toast.makeText(getApplicationContext(),
                        Header.get(groupPosition) + " List Expanded.",
                        Toast.LENGTH_SHORT).show();

            }
        });

        expandableListView.setOnGroupCollapseListener(new ExpandableListView.OnGroupCollapseListener() {
            @Override
            public void onGroupCollapse(int groupPosition) {

                Toast.makeText(getApplicationContext(),
                        Header.get(groupPosition) + " List Collapsed.",
                        Toast.LENGTH_SHORT).show();

            }
        });

        listConfigHeader.addView(expandableListView);


    }

    private class OnListTakePhotImageWithPreview implements View.OnClickListener {

        Bitmap bitmapImage;
        ImageView imageView;
        String tempCameraFilename;
        int RetakecameraListFileName;

        public OnListTakePhotImageWithPreview(Bitmap bitmapImage, ImageView imageView, String tempCameraFilename, int cameraListFieldName) {
            this.bitmapImage = bitmapImage;
            this.imageView = imageView;
            this.tempCameraFilename = tempCameraFilename;
            this.RetakecameraListFileName = cameraListFieldName;
        }

        @Override
        public void onClick(View v) {
            if (!bitmapImage.equals(defaultListCamerabitMap)) {
                ut_dialog.ShowPopup(MainActivity.this, new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        listCameraFilename = tempCameraFilename;
                        cameraListFieldname = RetakecameraListFileName;
                        Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                        File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
                        output = new File(dir, listCameraFilename);

                        Uri photoURI = FileProvider.getUriForFile(MainActivity.this, getApplicationContext().getPackageName() + ".fileprovider", output);

                        cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                        startActivityForResult(cameraIntent, TAKE_PIC_WITHPREVIEW);
                        //someActivityResultLauncher.launch(cameraIntent);
                        ut_dialog.popupWindow.dismiss();

                    }
                }, new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        //  replacebitmapImage = bitmapImage;
                        File fileDirectory = new File(fileHelper.getSalesDirectoryPath() + "/ListviewPhoto/");
                        if (fileDirectory.exists()) {
                            File[] dirFiles = fileDirectory.listFiles();
                            if (dirFiles.length != 0) {
                                for (int i = 0; i < dirFiles.length; i++) {
                                    String fileOutput = dirFiles[i].toString().substring(dirFiles[i].toString().lastIndexOf("/") + 1);
                                    if (fileOutput.equals(tempCameraFilename)) {
                                        dirFiles[i].delete();
                                        imageView.setImageBitmap(defaultListCamerabitMap);
                                        bitmapImage = defaultListCamerabitMap;
                                        cameraListFieldname = RetakecameraListFileName;
                                    }
                                }
                            }
                        }
                        ut_dialog.popupWindow.dismiss();
                    }
                }, new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        ut_dialog.popupWindow.dismiss();

                    }
                }, bitmapImage);
            } else {
                //   cameraListFieldname =    RetakecameraListFileName;
                Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
                output = new File(dir, listCameraFilename);

                Uri photoURI = FileProvider.getUriForFile(MainActivity.this, getApplicationContext().getPackageName() + ".fileprovider", output);

                cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                startActivityForResult(cameraIntent, TAKE_PIC_WITHPREVIEW);
                ut_dialog.popupWindow.dismiss();
            }
        }

    }

    int cameraListFieldname;

    public View.OnClickListener onListViewCameraTakePhotoClickListener(String screen,
                                                                       int FieldName, int random, ImageView imageView, String Fieldcontrol, String
                                                                               imageName, HashMap<String, String> formValues, HashMap<String, String> selectedListValues, HashMap<String, String> paramFormValues, HashMap<String, String> paramSelectedListValues, String
                                                                               FName, Bitmap bitmap, ArrayList<HashMap<String, String>> configsValues) {
        View.OnClickListener rtn = new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                final Object tag = view.getTag();

                listimageTagname = tag.toString();
                System.out.println("TAG : " + tag.toString());

                for (Map.Entry<String, String> entry : configsValues.get(FieldName).entrySet()) {
                    selectedListValues.put(entry.getKey(), entry.getValue());
                }
                defaultListCamerabitMap = bitmap;
                selectedListIndex = parseInt(tag.toString().split("#")[1]);
                HashMap<String, String> rtn = new HashMap<>();
                String screenSignature = screen + "_" + FName + "_SAVEPHOTO";
                BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
                String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
                fileHelper.fileWriter("getFormConfigValues Query : " + query, writer);
                rtn = da_dynamics.getFormConfigValues(query);

                if (rtn.size() > 0) {
                    listCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
                    selectedListValues.put(FName.toUpperCase(), listCameraFilename);


                    if (Fieldcontrol.equals(FC_TAKEPHOTO) || Fieldcontrol.equals(FC_TAKEPHOTOWITHPREVIEW)) {
                        if (tag != null) {
                            executeActionConfig((String) tag.toString().split("#")[0], AN_CAMERAICONCLICKED, "");

                            int a = parseInt(tag.toString().split("#")[1]);
                            int b = a + 100;
                            ListCameraTagFieldname = b;

                        }
                    } else if (Fieldcontrol.equals(FC_TAKEPHOTOWITHPREVIEW)) {
                        if (tag != null) {
                            cameraListFieldname = FieldName;
                            boolean bexe = executeActionConfig(tag.toString().split("#")[0], AN_CAMERAICONCLICKED, "");

                        }
                    }
                }
            }
        };
        return rtn;
    }


    public View.OnClickListener surveycameraclick(String surveySummary, ArrayList<BE_SurveyConfig> configs, int k, ImageView imageView) {
        View.OnClickListener rtn = new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                cameraSurveyConfig = configs.get(k);

                final Object tag = view.getTag();
                surveyimageTagname = tag.toString();
                surveyimageFilename = configs.get(k).ThemeName + "_" + configs.get(k).FormName + "_" + configs.get(k).ControlName + ".png";
                try {
                    imageTakePhoto = imageView;
                } catch (Exception e) {
                    e.printStackTrace();
                }

                File dir = new File(fileHelper.getSalesDirectoryPath() + "/CameraImage/");

                output = new File(dir, surveyimageFilename);
                try {
                    output.delete();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                Uri photoURI = FileProvider.getUriForFile(getApplicationContext(), getApplicationContext().getPackageName() + ".fileprovider", output);

                Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                imageTag = tag.toString().toUpperCase();
                startActivityForResult(cameraIntent, SURVEY_TAKE_PICTURE);
            }
        };
        return rtn;
    }


    public void listPhotoWithPreviewclick(Object stag, String screen,
                                          int FieldName, int random, ImageView imageView, String Fieldcontrol, String
                                                  imageName, HashMap<String, String> formValues, HashMap<String, String> selectedListValues, HashMap<String, String> paramFormValues, HashMap<String, String> paramSelectedListValues, String
                                                  FName, Bitmap bitmap, ArrayList<HashMap<String, String>> configsValues) {
        final Object tag = stag;

        listimageTagname = tag.toString();

        for (Map.Entry<String, String> entry : configsValues.get(FieldName).entrySet()) {
            selectedListValues.put(entry.getKey(), entry.getValue());
        }
        defaultListCamerabitMap = bitmap;
        selectedListIndex = parseInt(tag.toString().split("#")[1]);
        HashMap<String, String> rtn = new HashMap<>();
        String screenSignature = screen + "_" + FName + "_SAVEPHOTO";
        BE_QueryConfig queryConfig = da_queryConfig.getQueryConfig(screenSignature);
        String query = ut_common.getQuery(queryConfig, null, formValues, selectedListValues, paramFormValues, paramSelectedListValues, QtyRoundingDigits, PriceRoundingDigits, AmountRoundingDigits, FixedLot, system, surveyValue, paramScreenName);
        fileHelper.fileWriter("getFormConfigValues Query : " + query, writer);
        rtn = da_dynamics.getFormConfigValues(query);

        if (!rtn.isEmpty()) {
            listCameraFilename = rtn.get(rtn.keySet().toArray()[0]);
            selectedListValues.put(FName.toUpperCase(), listCameraFilename);

            if (tag != null) {

                int a = parseInt(tag.toString().split("#")[1]);
                int b = a + 100;
                ListCameraTagFieldname = b;
                executeActionConfig((String) tag.toString().split("#")[0], AN_CAMERAICONCLICKED, "");

            }

        }
    }


    public MenuItem item_menu, item_search, item_sync, item_next, item_print, item_filter, item_activated, action_save, action_save_arrow, item_refresh, action_share, action_scan;
    public ImageView menuMessage, menuChart, menuPrint, menuFilter, menuSaveArr, menuSave, menuSync, menuRefresh, menuShare, menuSearch, menuMenu, menuNext;
    public View item_filter1;

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        menuCount = 0;

        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main_menu, menu);


        MenuItem item_message = menu.findItem(R.id.action_message);
        View item_message1 = item_message.getActionView();
        item_menu = menu.findItem(R.id.action_menus);
        View item_menu1 = item_menu.getActionView();
        item_next = menu.findItem(R.id.action_next);
        View item_next1 = item_next.getActionView();
        item_sync = menu.findItem(R.id.action_sync);
        View item_sync1 = item_sync.getActionView();
        item_search = menu.findItem(R.id.action_search);
        View item_search1 = item_search.getActionView();
        item_print = menu.findItem(R.id.action_print);
        View item_print1 = item_print.getActionView();
        item_filter = menu.findItem(R.id.action_filter);
        item_filter1 = item_filter.getActionView();
        item_activated = menu.findItem(R.id.action_chartactivated);
        View item_activated1 = item_activated.getActionView();
        action_save = menu.findItem(R.id.action_saveBtn);
        View action_save1 = action_save.getActionView();
        action_save_arrow = menu.findItem(R.id.action_save_arrow);
        View action_save_arrow1 = action_save_arrow.getActionView();
        item_refresh = menu.findItem(R.id.action_refresh);
        View item_refresh1 = item_refresh.getActionView();
        action_share = menu.findItem(R.id.action_share);
        View action_share1 = action_share.getActionView();
        action_scan = menu.findItem(R.id.action_scan);
        View action_scan1 = action_scan.getActionView();

        bottomSheetDialog = new BottomSheetDialog(this);

        if (item_next1 != null) {
            ImageView menuNext = item_next1.findViewById(R.id.menuNext);
            menuNext.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (screen.equals("Survey Summary")) {
                        surveycount += 1;
                        if (formIDfs) {
                            formID = surveycount + "";
                        }
                        initSurvey(screen);
                    }
                    executeActionConfig("", AN_INITNEXTBUTTONCLICK, "");
                    if (SolutionName.equals("SALES")) {
                        if (!screen.equalsIgnoreCase("OPEN_REASON") && !screen.equalsIgnoreCase("Survey Summary")) {
                            try {
                                item_next.setVisible(false);
                                nextDisable = true;
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
            });
        }


        if (item_message1 != null) {
            ImageView menuMessage = item_message1.findViewById(R.id.menuMessage);
            menuMessage.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                }
            });
        }


        if (item_menu1 != null) {
            ImageView menuMenu = item_menu1.findViewById(R.id.menuMenu);
            menuMenu.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    System.out.println("Menu Open");

                    ut_dialog.showPopupMenu(MainActivity.this, v, new PopupMenu.OnMenuItemClickListener() {
                        @Override
                        public boolean onMenuItemClick(MenuItem item) {
                            hideSoftKeyboard(MainActivity.this);
                            getWindow().getDecorView().clearFocus();
                            menuOpen = false;
                            for (BE_MenuConfig menu : menuConfigs) {
                                if (menu.MenuDisplayText.equalsIgnoreCase(item.toString())) {
                                    executeActionConfig(menu.MenuCode, AN_MENUITEMCLICKED, "");
                                    break;
                                }
                            }
                            return false;
                        }
                    }, mainMenuvalue, menuConfigs);

                }
            });
        }


        if (item_sync1 != null) {
            ImageView menuSync = item_sync1.findViewById(R.id.menuSync);
            menuSync.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    executeActionConfig("", AN_SYNC, "");
                }
            });
        }


        if (item_search1 != null) {
            ImageView menuSearch = item_search1.findViewById(R.id.menuSearch);
            menuSearch.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    simpleSearchView.showSearch();
                    action_scan.setVisible(true);
                    item_search.setVisible(false);
                }
            });
        }

        if (action_scan1 != null) {
            ImageView menuScan = action_scan1.findViewById(R.id.menuScan);
            menuScan.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    //simpleSearchView.closeSearch();
                    searchviewlayout.setVisibility(View.GONE);
                    //Toast.makeText(MainActivity.this, "test", Toast.LENGTH_SHORT).show();
                    executeActionConfig("SCANQR", AN_MENUITEMCLICKED, "");
                }
            });
        }


        if (item_print1 != null) {
            ImageView menuPrint = item_print1.findViewById(R.id.menuPrint);
            menuPrint.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    Disposable d = Single.timer(3, TimeUnit.SECONDS)
                            .subscribeOn(Schedulers.io())
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe(ignored -> {
                                item_print.setVisible(true);
                            });
                    disposables.add(d);

                    item_print.setVisible(false);
                    executeActionConfig("", AN_INITPRINTBUTTONCLICK, "");

                }
            });
        }


        if (item_filter1 != null) {
            menuFilter = item_filter1.findViewById(R.id.menuFilter);

            menuFilter.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    float size = Float.parseFloat(String.valueOf(fontsize));
                    filterTextsize = (18) * size;
                    BottomsheetFilter filter = new BottomsheetFilter(MainActivity.this, screen, da_dynamics, da_queryConfig, ut_common, searchConfigs, scFilterselectedvalues, scFilterLayout, filterTextsize, formValues, bottomSheetDialog);
                    filter.bottomSheet();
                }
            });
        }


        if (item_activated1 != null) {
            ImageView menuChart = item_activated1.findViewById(R.id.menuChart);
            menuChart.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    formContent.removeAllViews();
                    executeActionConfig("", AN_ACTIVEICONCLICKED, "");
                }
            });
        }


        if (action_save1 != null) {
            ImageView menuSave = action_save1.findViewById(R.id.menuSave);
            menuSave.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    if (screen.equals("Replenishment-RAD")) {
                        if (reimageupload) {
                            if (before1) {

                                if (after1) {
                                    saveReplanishmentphoto();
                                } else if (after2) {
                                    saveReplanishmentphoto();
                                } else {
                                    showAlertOneButtonReplanverify("Simplr Sales", "Must Take Photo Before & After.", "OK", "");
                                }

                            } else if (before2) {
                                if (after1) {
                                    saveReplanishmentphoto();
                                } else if (after2) {
                                    saveReplanishmentphoto();
                                } else {
                                    showAlertOneButtonReplanverify("Simplr Sales", "Must Take Photo Before & After.", "OK", "");
                                }
                            } else if (after1) {
                                if (before1) {
                                    saveReplanishmentphoto();
                                } else if (before2) {
                                    saveReplanishmentphoto();
                                } else {
                                    showAlertOneButtonReplanverify("Simplr Sales", "Must Take Photo Before & After.", "OK", "");
                                }
                            } else if (after2) {
                                if (before1) {
                                    saveReplanishmentphoto();
                                } else if (before2) {
                                    saveReplanishmentphoto();
                                } else {
                                    showAlertOneButtonReplanverify("Simplr Sales", "Must Take Photo Before & After.", "OK", "");
                                }
                            }
                        } else {
                            showAlertOneButtonReplanverify("Simplr Sales", "Must Take Photo Before & After.", "OK", "");
                        }

                    } else {
                        executeActionConfig("", AN_INITSAVEBUTTONCLICK, "");
                    }
                }
            });
        }


        if (action_save_arrow1 != null) {
            ImageView menuSaveArr = action_save_arrow1.findViewById(R.id.menuSaveArr);
            menuSaveArr.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (screen.equals("Survey Summary")) {
                        surveycount += 1;
                        initSurvey(screen);
                    }
                    executeActionConfig("", AN_INITNEXTBUTTONCLICK, "");
                    if (SolutionName.equals("SALES")) {
                        if (!screen.equalsIgnoreCase("OPEN_REASON") && !screen.equalsIgnoreCase("Survey Summary")) {
                            try {
                                item_next.setVisible(false);
                                nextDisable = true;
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
            });
        }


        if (item_refresh1 != null) {
            ImageView menuRefresh = item_refresh1.findViewById(R.id.menuRefresh);
            menuRefresh.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    executeActionConfig("Refresh", AN_REFRESHBUTTONCLICKED, "");
                }
            });
        }


        if (action_share1 != null) {
            ImageView menuShare = action_share1.findViewById(R.id.menuShare);
            menuShare.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    executeActionConfig("Share", AN_initShareButtonClicked, "");
                }
            });
        }


        if (SearchmenuEnable) {
            menuCount = menuCount + 1;
            item_search.setVisible(true);
        } else {
            item_search.setVisible(false);
        }

        if (MessagemenuEnable) {
            menuCount = menuCount + 1;

            item_message.setVisible(true);
        } else {
            item_message.setVisible(false);
        }

        if (saveEnable) {
            menuCount = menuCount + 1;

            action_save.setVisible(true);
        } else {
            action_save.setVisible(false);
        }

        if (NextmenuDisable) {
            menuCount = menuCount + 1;

            item_next.setVisible(true);
        } else {
            item_next.setVisible(false);
        }

        if (MainmenuEnable) {
            menuCount = menuCount + 1;

            item_menu.setVisible(true);
        } else {
            item_menu.setVisible(false);
        }

        if (SyncmenuEnable) {
            menuCount = menuCount + 1;

            item_sync.setVisible(true);
        } else {
            item_sync.setVisible(false);
        }
        if (PrintmenuEnable) {
            menuCount = menuCount + 1;

            item_print.setVisible(true);
        } else {
            item_print.setVisible(false);
        }

        if (serachViewflag) {
//            menuCount = menuCount + 1;

//            item_filter.setVisible(true);
            filterIcon.setVisibility(View.VISIBLE);
        } else {
            filterIcon.setVisibility(View.GONE);
//            item_filter.setVisible(false);
        }
        if (actiavtedEnable) {
            menuCount = menuCount + 1;

            item_activated.setVisible(true);
        } else {
            item_activated.setVisible(false);
        }

        if (refreshEnable) {
            menuCount = menuCount + 1;

            item_refresh.setVisible(true);
        } else {
            item_refresh.setVisible(false);
        }

        if (shareEnable) {
            menuCount = menuCount + 1;

            action_share.setVisible(true);
        } else {
            action_share.setVisible(false);
        }

        try {
            if (menuCount > 3) {
                appNameText.setText("");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

//        setupSearchView(menu);
        return true;

    }

    @RequiresApi(api = Build.VERSION_CODES.Q)
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        System.out.println("ITEM : " + item.getItemId());

        View view;

        if (item.getItemId() == R.id.action_menus) {
            view = findViewById(R.id.action_menus);
            System.out.println("Menu Open");
            ut_dialog.showPopupMenu(MainActivity.this, view, new PopupMenu.OnMenuItemClickListener() {
                @Override
                public boolean onMenuItemClick(MenuItem item) {
                    hideSoftKeyboard(MainActivity.this);
                    getWindow().getDecorView().clearFocus();
                    menuOpen = false;
                    for (BE_MenuConfig menu : menuConfigs) {
                        if (menu.MenuDisplayText.equalsIgnoreCase(item.toString())) {
                            executeActionConfig(menu.MenuCode, AN_MENUITEMCLICKED, "");
                            break;
                        }
                    }
                    return false;
                }
            }, mainMenuvalue, menuConfigs);
            return true;

        } else if (item.getItemId() == R.id.action_next) {

            if (screen.equals("Survey Summary")) {
                surveycount += 1;
                initSurvey(screen);
//                    executeActionConfig("", AN_SAVESURVEY, "");
            }
            executeActionConfig("", AN_INITNEXTBUTTONCLICK, "");
            if (SolutionName.equals("SALES")) {
                if (!screen.equalsIgnoreCase("OPEN_REASON") && !screen.equalsIgnoreCase("Survey Summary")) {
                    try {
                        item.setVisible(false);
                        nextDisable = true;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
            return true;

        } else if (item.getItemId() == R.id.action_print) {
            executeActionConfig("", AN_INITPRINTBUTTONCLICK, "");
            return true;

        } else if (item.getItemId() == R.id.action_saveBtn) {
            if (screen.equals("Replenishment-RAD")) {
                if (reimageupload) {
                    if (before1) {

                        if (after1) {
                            saveReplanishmentphoto();
                        } else if (after2) {
                            saveReplanishmentphoto();
                        } else {
                            showAlertOneButtonReplanverify("Simplr Sales", "Must Take Photo Before & After.", "OK", "");
                        }

                    } else if (before2) {
                        if (after1) {
                            saveReplanishmentphoto();
                        } else if (after2) {
                            saveReplanishmentphoto();
                        } else {
                            showAlertOneButtonReplanverify("Simplr Sales", "Must Take Photo Before & After.", "OK", "");
                        }
                    } else if (after1) {
                        if (before1) {
                            saveReplanishmentphoto();
                        } else if (before2) {
                            saveReplanishmentphoto();
                        } else {
                            showAlertOneButtonReplanverify("Simplr Sales", "Must Take Photo Before & After.", "OK", "");
                        }
                    } else if (after2) {
                        if (before1) {
                            saveReplanishmentphoto();
                        } else if (before2) {
                            saveReplanishmentphoto();
                        } else {
                            showAlertOneButtonReplanverify("Simplr Sales", "Must Take Photo Before & After.", "OK", "");
                        }
                    }
                } else {
                    showAlertOneButtonReplanverify("Simplr Sales", "Must Take Photo Before & After.", "OK", "");
                }

            } else {
                executeActionConfig("", AN_INITSAVEBUTTONCLICK, "");
            }
            return true;

        } else if (item.getItemId() == R.id.action_sync) {
            executeActionConfig("", AN_SYNC, "");
            return true;

        } else if (item.getItemId() == R.id.action_chartactivated) {
            formContent.removeAllViews();
            executeActionConfig("", AN_ACTIVEICONCLICKED, "");
            return true;

        } else if (item.getItemId() == R.id.action_filter) {
            float size = Float.parseFloat(String.valueOf(fontsize));

            filterTextsize = (18) * size;

            BottomsheetFilter filter = new BottomsheetFilter(MainActivity.this, screen, da_dynamics, da_queryConfig, ut_common, searchConfigs, scFilterselectedvalues, scFilterLayout, filterTextsize, formValues, bottomSheetDialog);
            filter.bottomSheet();
            return true;

        } else if (item.getItemId() == R.id.action_refresh) {
            executeActionConfig("Refresh", AN_REFRESHBUTTONCLICKED, "");
            return true;

        } else if (item.getItemId() == R.id.action_share) {
            executeActionConfig("Share", AN_initShareButtonClicked, "");
            return true;
        } else {
            return super.onOptionsItemSelected(item);
        }

//        switch (item.getItemId()) {
//
////            case android.R.id.home:
////                view = findViewById(R.id.home);
////                doBackButton(view);
////                break;
//            case action_menus:
//                view = findViewById(action_menus);
//                System.out.println("Menu Open");
////                if(!menuOpen) {
////                    menuOpen=true;
//                ut_dialog.showPopupMenu(MainActivity.this, view, new PopupMenu.OnMenuItemClickListener() {
//                    @Override
//                    public boolean onMenuItemClick(MenuItem item) {
//                        hideSoftKeyboard(MainActivity.this);
//                        getWindow().getDecorView().clearFocus();
//                        menuOpen = false;
//                        for (BE_MenuConfig menu : menuConfigs) {
//                            if (menu.MenuDisplayText.equalsIgnoreCase(item.toString())) {
//                                executeActionConfig(menu.MenuCode, AN_MENUITEMCLICKED, "");
//                                break;
//                            }
//                        }
//                        return false;
//                    }
//                }, mainMenuvalue);
////                }
//                break;
//            case R.id.action_message:
//
//                //    finish();
////                Intent intent = new Intent(MainActivity.this, MainActivity.class);
////                intent.putExtra(IN_SCREEN_NAME, "Form-Message");
////                //  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
////                startActivity(intent);
//                break;
//            case R.id.action_next:
//
//                if (screen.equals("Survey Summary")) {
//                    surveycount += 1;
//                    initSurvey(screen);
////                    executeActionConfig("", AN_SAVESURVEY, "");
//                }
//                executeActionConfig("", AN_INITNEXTBUTTONCLICK, "");
//                if (SolutionName.equals("SALES")) {
//                    if (!screen.equalsIgnoreCase("OPEN_REASON")) {
//                        try {
//                            item.setVisible(false);
//                            nextDisable = true;
//                        } catch (Exception e) {
//                            e.printStackTrace();
//                        }
//                    }
//                }
//                break;
//            case R.id.action_print:
//                executeActionConfig("", AN_INITPRINTBUTTONCLICK, "");
//                break;
//            case R.id.action_saveBtn:
//
//                if (screen.equals("Replenishment-RAD")) {
//                    if (reimageupload) {
//                        if (before1) {
//
//                            if (after1) {
//                                saveReplanishmentphoto();
//                            } else if (after2) {
//                                saveReplanishmentphoto();
//                            } else {
//                                showAlertOneButtonReplanverify("Simplr Sales", "Must Take Photo Before & After.", "OK", "");
//                            }
//
//                        } else if (before2) {
//                            if (after1) {
//                                saveReplanishmentphoto();
//                            } else if (after2) {
//                                saveReplanishmentphoto();
//                            } else {
//                                showAlertOneButtonReplanverify("Simplr Sales", "Must Take Photo Before & After.", "OK", "");
//                            }
//                        } else if (after1) {
//                            if (before1) {
//                                saveReplanishmentphoto();
//                            } else if (before2) {
//                                saveReplanishmentphoto();
//                            } else {
//                                showAlertOneButtonReplanverify("Simplr Sales", "Must Take Photo Before & After.", "OK", "");
//                            }
//                        } else if (after2) {
//                            if (before1) {
//                                saveReplanishmentphoto();
//                            } else if (before2) {
//                                saveReplanishmentphoto();
//                            } else {
//                                showAlertOneButtonReplanverify("Simplr Sales", "Must Take Photo Before & After.", "OK", "");
//                            }
//                        }
//                    } else {
//                        showAlertOneButtonReplanverify("Simplr Sales", "Must Take Photo Before & After.", "OK", "");
//                    }
//
//                } else {
//                    executeActionConfig("", AN_INITSAVEBUTTONCLICK, "");
//                }
//                break;
//            case R.id.action_sync:
//
//                //    new CreateFolderAsync().execute();
//                executeActionConfig("", AN_SYNC, "");
//                // Update the UI
//                break;
//            case R.id.action_chartactivated:
//                formContent.removeAllViews();
//                executeActionConfig("", AN_ACTIVEICONCLICKED, "");
//                break;
//            case R.id.action_filter:
//
//                float size = Float.parseFloat(String.valueOf(fontsize));
//
//                filterTextsize = (18) * size;
//
//                BottomsheetFilter filter = new BottomsheetFilter(MainActivity.this, screen, da_dynamics, da_queryConfig, ut_common, searchConfigs, scFilterselectedvalues, scFilterLayout, filterTextsize, formValues, bottomSheetDialog);
//                filter.bottomSheet();
//
//                //   executeActionConfig("", AN_ACTIVEICONCLICKED, "");
//                break;
//
//            case R.id.action_refresh:
//                executeActionConfig("Refresh", AN_REFRESHBUTTONCLICKED, "");
//                break;
//
//            case R.id.action_share:
//                executeActionConfig("Share", AN_initShareButtonClicked, "");
//                break;
//            default:
//                break;
//        }
//        return super.onOptionsItemSelected(item);
    }

    public void saveReplanishmentphoto() {

        String CustNo = ut_sp.getStringValue(SP_CUSTOMER_ID);

        String pda_id = ut_sp.getStringValue(SP_PDA_ID);
        String doc_no = new UT_DateTime().getTransDocNo(new Date());
        ut_sp.setStringValue(SP_TRANS_DOC_NO, pda_id + doc_no);
        String TRANSDOCNO = ut_sp.getStringValue(SP_TRANS_DOC_NO);

        DA_System da_system = new DA_System(MainActivity.this);

        String agentId = da_system.getSystemvals("AgentId");

        CheckLocation checkLocation = new CheckLocation();
        checkLocation.checkLocationx(MainActivity.this, ut_sp, formValues);

        if (before1) {
            try {
                fileHelper.saveTakePhoto(bitmapone, imageNameone, fileHelper.getSalesDirectoryPath() + "/TakePhoto/");
                fileHelper.saveTakePhoto(bitmapone, imageNameone, fileHelper.getSalesDirectoryPath() + "/Photo/");

                String completeQuery = "Insert into ReplenishmentImages (Code,Location, CustNo, ImageName, Uploaded," +
                        " EndDate, StartDate, ResultDate, MDTNo, Orientation, Void,Location,Active) VALUES ('" + TRANSDOCNO + "'," +
                        "'" + "BEFORE_1" + "','" + CustNo + "', 'Replan_' || '" + CustNo + "' || '_' || '" + "BEFORE_1" + "'" +
                        "|| '_'  || DATE('now','localtime') ||'_' ||  '1' ||'.png' , 0, Datetime('now','localtime')," +
                        "Datetime('now','localtime'), Datetime('now','localtime'),'" + system.get(0).PDAID + "', '1', 0,'" + "BEFORE_1" + "','1')";
                da_dynamics.executeQuery(completeQuery);


                String query = "insert into PhotoTransactions (AgentID,CustNo,DocDate,DocNo,DocType,FileName,MdtNo,UserID,Uploaded)VALUES" +
                        "('" + agentId + "','" + CustNo + "',DATE('now','localtime'),'" + TRANSDOCNO + "','REPLENISHMENT','Replan_' || '" + CustNo + "' || '_' || '" + "BEFORE_1" + "'|| '_'  || DATE('now') ||'_' ||  '1' ||'.png','" + system.get(0).PDAID + "','" + agentId + "','0')";

                System.out.println("PhotoTransactions query : " + query);

                da_dynamics.executeQuery(query);

                String query2 = "insert into custvisit(CustNo, TransNo,Transtype,TransDate,AgentId,uploaded,Remarks,Longitude,Latitude)" +
                        "VALUES ('" + CustNo + "','" + TRANSDOCNO + "','REPLENISHMENT',datetime('now','localtime'),'" + agentId + "',0,'','0.0','0.0')";

                da_dynamics.executeQuery(query2);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if (before2) {
            try {
                fileHelper.saveTakePhoto(bitmaptwo, imageNametwo, fileHelper.getSalesDirectoryPath() + "/TakePhoto/");
                fileHelper.saveTakePhoto(bitmaptwo, imageNametwo, fileHelper.getSalesDirectoryPath() + "/Photo/");
                String completeQuery = "Insert into ReplenishmentImages (Code,Location, CustNo, ImageName, Uploaded," +
                        " EndDate, StartDate, ResultDate, MDTNo, Orientation, Void,Location,Active) VALUES ('" + TRANSDOCNO + "'," +
                        "'" + "BEFORE_2" + "','" + CustNo + "', 'Replan_' || '" + CustNo + "' || '_' || '" + "BEFORE_2" + "'" +
                        "|| '_'  || DATE('now','localtime') ||'_' ||  '1' ||'.png' , 0, Datetime('now','localtime')," +
                        "Datetime('now','localtime'), Datetime('now','localtime'),'" + system.get(0).PDAID + "', '1', 0,'" + "BEFORE_2" + "','1')";
                da_dynamics.executeQuery(completeQuery);


                String query = "insert into PhotoTransactions (AgentID,CustNo,DocDate,DocNo,DocType,FileName,MdtNo,UserID,Uploaded)VALUES" +
                        "('" + agentId + "','" + CustNo + "',DATE('now','localtime'),'" + TRANSDOCNO + "','REPLENISHMENT','Replan_' || '" + CustNo + "' || '_' || '" + "BEFORE_2" + "'|| '_'  || DATE('now') ||'_' ||  '1' ||'.png','" + system.get(0).PDAID + "','" + agentId + "','0')";

                System.out.println("PhotoTransactions query : " + query);

                da_dynamics.executeQuery(query);

                String query2 = "insert into custvisit(CustNo, TransNo,Transtype,TransDate,AgentId,uploaded,Remarks,Longitude,Latitude)" +
                        "VALUES ('" + CustNo + "','" + TRANSDOCNO + "','REPLENISHMENT',datetime('now','localtime'),'" + agentId + "',0,'','0.0','0.0')";

                da_dynamics.executeQuery(query2);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if (after1) {
            try {
                fileHelper.saveTakePhoto(bitmapthree, imageNamethree, fileHelper.getSalesDirectoryPath() + "/TakePhoto/");
                fileHelper.saveTakePhoto(bitmapthree, imageNamethree, fileHelper.getSalesDirectoryPath() + "/Photo/");

                String completeQuery = "Insert into ReplenishmentImages (Code,Location, CustNo, ImageName, Uploaded," +
                        " EndDate, StartDate, ResultDate, MDTNo, Orientation, Void,Location,Active) VALUES ('" + TRANSDOCNO + "'," +
                        "'" + "AFTER_1" + "','" + CustNo + "', 'Replan_' || '" + CustNo + "' || '_' || '" + "AFTER_1" + "'" +
                        "|| '_'  || DATE('now','localtime') ||'_' ||  '1' ||'.png' , 0, Datetime('now','localtime')," +
                        "Datetime('now','localtime'), Datetime('now','localtime'),'" + system.get(0).PDAID + "', '1', 0,'" + "AFTER_1" + "','1')";
                da_dynamics.executeQuery(completeQuery);


                String query = "insert into PhotoTransactions (AgentID,CustNo,DocDate,DocNo,DocType,FileName,MdtNo,UserID,Uploaded)VALUES" +
                        "('" + agentId + "','" + CustNo + "',DATE('now','localtime'),'" + TRANSDOCNO + "','REPLENISHMENT','Replan_' || '" + CustNo + "' || '_' || '" + "AFTER_1" + "'|| '_'  || DATE('now') ||'_' ||  '1' ||'.png','" + system.get(0).PDAID + "','" + agentId + "','0')";

                System.out.println("PhotoTransactions query : " + query);

                da_dynamics.executeQuery(query);

                String query2 = "insert into custvisit(CustNo, TransNo,Transtype,TransDate,AgentId,uploaded,Remarks,Longitude,Latitude)" +
                        "VALUES ('" + CustNo + "','" + TRANSDOCNO + "','REPLENISHMENT',datetime('now','localtime'),'" + agentId + "',0,'','0.0','0.0')";

                da_dynamics.executeQuery(query2);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if (after2) {
            try {
                fileHelper.saveTakePhoto(bitmapfour, imageNamefour, fileHelper.getSalesDirectoryPath() + "/TakePhoto/");
                fileHelper.saveTakePhoto(bitmapfour, imageNamefour, fileHelper.getSalesDirectoryPath() + "/Photo/");
                String completeQuery = "Insert into ReplenishmentImages (Code,Location, CustNo, ImageName, Uploaded," +
                        " EndDate, StartDate, ResultDate, MDTNo, Orientation, Void,Location,Active) VALUES ('" + TRANSDOCNO + "'," +
                        "'" + "AFTER_2" + "','" + CustNo + "', 'Replan_' || '" + CustNo + "' || '_' || '" + "AFTER_2" + "'" +
                        "|| '_'  || DATE('now','localtime') ||'_' ||  '1' ||'.png' , 0, Datetime('now','localtime')," +
                        "Datetime('now','localtime'), Datetime('now','localtime'),'" + system.get(0).PDAID + "', '1', 0,'" + "AFTER_2" + "','1')";
                da_dynamics.executeQuery(completeQuery);


                String query = "insert into PhotoTransactions (AgentID,CustNo,DocDate,DocNo,DocType,FileName,MdtNo,UserID,Uploaded)VALUES" +
                        "('" + agentId + "','" + CustNo + "',DATE('now','localtime'),'" + TRANSDOCNO + "','REPLENISHMENT','Replan_' || '" + CustNo + "' || '_' || '" + "AFTER_2" + "'|| '_'  || DATE('now') ||'_' ||  '1' ||'.png','" + system.get(0).PDAID + "','" + agentId + "','0')";

                System.out.println("PhotoTransactions query : " + query);

                da_dynamics.executeQuery(query);

                String query2 = "insert into custvisit(CustNo, TransNo,Transtype,TransDate,AgentId,uploaded,Remarks,Longitude,Latitude)" +
                        "VALUES ('" + CustNo + "','" + TRANSDOCNO + "','REPLENISHMENT',datetime('now','localtime'),'" + agentId + "',0,'','0.0','0.0')";

                da_dynamics.executeQuery(query2);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        showAlertOneButton("Simplr Sales", "Saved successfully.", "OK", "");

    }

    private void setupSearchView(Menu menu) {
        MenuItem item = menu.findItem(R.id.action_search);
        simpleSearchView.setMenuItem(item);
        // Adding padding to the animation because of the hidden menu item
        Point revealCenter = simpleSearchView.getRevealAnimationCenter();
        revealCenter.x -= DimensUtils.convertDpToPx(EXTRA_REVEAL_CENTER_PADDING, this);

    }

    public void hideViews() {
        // TODO (-mToolbar)  plus means  2 view above ho jaye or not visible to user
        // appBar.animate().translationY(-appBar.getHeight()).setInterpolator(new AccelerateInterpolator(2));

        // TODO uncomment this Hide Footer in android when Scrolling
        // TODO (+mToolbar)  plus means  2 view forward ho jaye or not visible to user
        //  toolbar_bottom.animate().translationY(+toolbar_bottom.getHeight()).setInterpolator(new AccelerateInterpolator(2));

        // TODO keshav Hide Also Floatng Button In Android
      /*  FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) fabMenu.getLayoutParams();
        int fabBottomMargin = lp.bottomMargin;*/
        //     fabMenu.animate().translationY(fabMenu.getHeight() + fabBottomMargin).setInterpolator(new AccelerateInterpolator(2)).start();
        fabMenu.hide();
        fabAction.setVisibility(View.GONE);

        // TODO keshav Hide Also Floatng Button In Android
    }

    public void showViews() {
        //   appBar.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2));

        // TODO uncomment this Hide Footer in android when Scrolling
        //  toolbar_bottom.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2));
        //fabMenu.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
        if (!menuFooterIcons.isEmpty() || menuFooterIcons.size() < 0) {
            //     fabMenu.setVisibility(View.VISIBLE);

            fabMenu.show();
            if (fabExpanded) {
                closeSubMenusFab();
                fabAction.setVisibility(View.VISIBLE);
            }
        }

    }

    private class OnclickImageView implements View.OnClickListener {

        Bitmap bitmap;
        String fieldcontrol;
        Context context;
        String defaultValue;

        public OnclickImageView(Context context, Bitmap bitmap, String fieldcontrol, String defaultValue) {

            this.context = context;
            this.bitmap = bitmap;
            this.fieldcontrol = fieldcontrol;
            this.defaultValue = defaultValue;
        }

        @Override
        public void onClick(View v) {

            if (fieldcontrol.equals(FC_INTENTVIEW)) {

                if (defaultValue.endsWith(".simg")) {
                    LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);

                    View popUpView = inflater.inflate(R.layout.custom_popup_imagepreview,
                            null); // inflating popup layout
                    PopupWindow popupWindow = new PopupWindow(popUpView, LinearLayout.LayoutParams.MATCH_PARENT,
                            LinearLayout.LayoutParams.MATCH_PARENT, true); // Creation of popup
                    popupWindow.setAnimationStyle(android.R.style.Animation_Dialog);
                    popupWindow.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
                    popupWindow.showAtLocation(popUpView, Gravity.CENTER, 0, 0); // Displaying popup
                    ImageView imageView = (ImageView) popUpView.findViewById(R.id.imagewithpreview);
                    imageView.setImageBitmap(bitmap);
                } else {
                    Intent myIntent = new Intent(Intent.ACTION_VIEW);
                    File tempUri = new File(fileHelper.getSalesDirectoryPath() + "/DisplayImages/Images/Items/" + defaultValue);
                    myIntent.setData(Uri.fromFile(tempUri));
                    Intent j = Intent.createChooser(myIntent, "Choose an application to open with:");
                    startActivity(j);
                }
                // ut_dialog.ShowPopupWindowImagePeview(context, bitmap);

            }

        }

    }

    // replace Query functions for WMS
    public String GetNextRunningNo(String PrePalletNo, String LenPalletNo, String
            LastPalletNo, String tableCond) {
        String[] arr = tableCond.split("[,]");
        String docNo = generateNewDocNo(system.get(0).PrePalletNo, system.get(0).LenPalletNo, system.get(0).LastPalletNo);
        //  if (key.length > 2)
        boolean bDocNoExist = false;
        String[] tmpArr;
        for (int i = 0; i < arr.length; i++) {
            tmpArr = arr[i].split(":");

            if (tmpArr.length > 1) {
                String CheckData = "SELECT * FROM " + tmpArr[0] + " WHERE " + tmpArr[1] + "=" + docNo;

                fileHelper.fileWriter("executeValidateQuery Query : " + CheckData, writer);

                int execute = da_dynamics.executeValidateQuery(CheckData);
                if (execute != -1) {
                    bDocNoExist = true;
                }
            }
        }
        if (bDocNoExist) {
            UpdateRunningNumber(LastPalletNo);
            return this.GetNextRunningNo(PrePalletNo, LenPalletNo, LastPalletNo, tableCond);
        } else {
            return docNo;
        }
    }

    public void UpdatesNewpalletNo(String sNewPalletNo) {
        da_dynamics.executeQuery("Update System set LastPalletNo = LastPalletNo + 1");
        da_dynamics.executeQuery("DELETE FROM Pallet WHERE PalletNo = '" + sNewPalletNo + "'");
        da_dynamics.executeQuery("INSERT INTO Pallet (PalletNo, Barcode) VALUES ('" + sNewPalletNo + "', '" + sNewPalletNo + "')");
    }

    private String generateNewDocNo(String pre, int len, String last) {
        String pad = "";
        for (int i = 0; i < len; i++) {
            pad += "0";
        }
        last += 1;
        last = "" + last;
        String docno = pre + pad.substring(0, pad.length() - pre.length());
        docno = docno.substring(0, docno.length() - last.length()) + last;
        return docno;
    }

    private void UpdateRunningNumber(String LastPalletNo) {
        String dLastVal = system.get(0).LastPalletNo;
        if (dLastVal != null && dLastVal != "" || (dLastVal == "0")) {
            dLastVal = String.valueOf(parseInt(dLastVal) + 1);
        } else {
            dLastVal = "0";
        }
        system.get(0).LastPalletNo = dLastVal;
        fileHelper.fileWriter("executeQuery Query : " + "UPDATE System SET " + LastPalletNo + " = " + LastPalletNo + "+1", writer);
        da_dynamics.executeQuery("UPDATE System SET " + LastPalletNo + " = " + LastPalletNo + "+1");
    }

    public String GetNewLotNo(String sItemNo, String sPONo, String sLotNo, String
            dtExpiryDate, String iLastLotNo) {

        String sTempLotNo = "";
        DateFormat dfDate = new SimpleDateFormat("yyyy-MM-dd");
        String date = dfDate.format(Calendar.getInstance().getTime());
        HashMap<String, String> rtn = new HashMap<>();
        fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + "Select * from TempExpDet where ItemNo = " + addSingleQuote(sItemNo) + " and ExpiryDate = " + addSingleQuote(dtExpiryDate), writer);
        rtn = da_dynamics.LastDocNoexecuteQuery("Select * from TempExpDet where ItemNo = " + addSingleQuote(sItemNo) + " and ExpiryDate = " + addSingleQuote(dtExpiryDate));
        if (rtn.containsKey("LotNo")) {
            sTempLotNo = rtn.get("LotNo");
            if (sTempLotNo != "") {
                return sTempLotNo;
            }

        }

        fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + "Select RcvExpDet.* from RcvExpDet, ReceivedHdr where ReceivedHdr.PONo = " + addSingleQuote(sPONo) + " and ReceivedHdr.ReceiveDate >= " + addSingleQuote(date + " 00:00:00") + " and ReceivedHdr.ReceiveDate <= " + addSingleQuote(date + " 23:59:59") + " and RcvExpDet.RcvNo = ReceivedHdr.ReceiveNo and RcvExpDet.ItemNo = " + addSingleQuote(sItemNo) + " and RcvExpDet.ExpiryDate = " + addSingleQuote(dtExpiryDate), writer);
        rtn = da_dynamics.LastDocNoexecuteQuery("Select RcvExpDet.* from RcvExpDet, ReceivedHdr where ReceivedHdr.PONo = " + addSingleQuote(sPONo) + " and ReceivedHdr.ReceiveDate >= " + addSingleQuote(date + " 00:00:00") + " and ReceivedHdr.ReceiveDate <= " + addSingleQuote(date + " 23:59:59") + " and RcvExpDet.RcvNo = ReceivedHdr.ReceiveNo and RcvExpDet.ItemNo = " + addSingleQuote(sItemNo) + " and RcvExpDet.ExpiryDate = " + addSingleQuote(dtExpiryDate));
        if (rtn.containsKey("LotNo")) {
            sTempLotNo = rtn.get("LotNo");
            if (sTempLotNo != "") {
                return sTempLotNo;
            }

        }
        if (sLotNo != "") {
            fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + "Select * from TempExpDet where ItemNo = " + addSingleQuote(sItemNo) + " and LotNo = " + addSingleQuote(sLotNo), writer);
            rtn = da_dynamics.LastDocNoexecuteQuery("Select * from TempExpDet where ItemNo = " + addSingleQuote(sItemNo) + " and LotNo = " + addSingleQuote(sLotNo));
            if (rtn.containsKey("LotNo")) {
                sLotNo = "";
                sTempLotNo = GenerateNewLotNo(sItemNo, iLastLotNo);


            }
        }
        return sTempLotNo;
        //  da_dynamics.executeQuery();
    }


    private String GenerateNewLotNo(String sItemNo, String iLastLotNo) {
        String sLotNo = "";
        HashMap<String, String> rtn = new HashMap<>();
        fileHelper.fileWriter("LastDocNoexecuteQuery Query : " + "Select ifnull(Item.LotPrefix,'') as ItemLotPrefix from Item where Item.ItemNo = " + addSingleQuote(sItemNo), writer);
        rtn = da_dynamics.LastDocNoexecuteQuery("Select ifnull(Item.LotPrefix,'') as ItemLotPrefix from Item where Item.ItemNo = " + addSingleQuote(sItemNo));
        if (rtn != null) {
            DateFormat dfDate = new SimpleDateFormat("yyyy-MM-dd");
            String currentDate = dfDate.format(Calendar.getInstance().getTime());
            String ItemLotPrefix = rtn.get("ItemLotPrefix");
            sLotNo = system.get(0).FormatLotNo;
            if (sLotNo == "") {
                int len = 3 - ItemLotPrefix.length();
                if (len > 0) {
                    String pad = "";
                    for (int i = 0; i < len; i++) {
                        ItemLotPrefix += '0';
                    }
                }
                DateFormat dfDate1 = new SimpleDateFormat("yyMM");
                sLotNo = ItemLotPrefix + "-" + dfDate1.format(currentDate) + "-";
                sLotNo += generateNewDocNo(system.get(0).PreLotNo, system.get(0).LenLotNo, system.get(0).LastLotNo);
            } else {
                DateFormat dfDate2 = new SimpleDateFormat(sLotNo);
                sLotNo = ItemLotPrefix + "-" + dfDate2.format(currentDate);
                Log.v("Res sLotNo", sLotNo);
                if (sLotNo.indexOf('P') != -1) {
                    sLotNo = sLotNo.replace("P", ItemLotPrefix);
                }
                Log.v("Res sLotNo", sLotNo);
                if (sLotNo.indexOf('L') != -1) {
                    sLotNo = sLotNo.replace("L", system.get(0).PreLotNo);
                }
                Log.v("Res sLotNo", sLotNo);
                if (sLotNo.indexOf('N') != -1) {
                    int len = system.get(0).LenLotNo;
                    String pad = "";
                    for (int i = 0; i < len; i++) {
                        pad += '0';
                    }
                    String dLastNo = iLastLotNo + 1;
                    dLastNo = new String(dLastNo);
                    String docno = pad.substring(0, pad.length() - dLastNo.length()) + dLastNo;
                    sLotNo = sLotNo.replace("N", docno);
                }
            }
            iLastLotNo = iLastLotNo + 1;

        }
        return iLastLotNo;
    }

    private String addSingleQuote(String value) {
        String rtn = "''";
        if (value != null) {
            if (value.equals("0") || value.equals("'0'") || value.equals("''")) {
                rtn = "'" + value + "'";
            } else {
                rtn = "'" + value + "'";
            }
        }
        return rtn;
    }

    private int CompareVersion(String version1, String version2, String downloadUrl, String fieldName) {

        String[] string1Vals = version1.split("\\.");
        String[] string2Vals = version2.split("\\.");

        int length = Math.max(string1Vals.length, string2Vals.length);

        for (int i = 0; i < length; i++) {
            Integer v1 = (i < string1Vals.length) ? parseInt(string1Vals[i]) : 0;
            Integer v2 = (i < string2Vals.length) ? parseInt(string2Vals[i]) : 0;

            //Making sure Version1 bigger than version2
            if (v1 > v2) {
                return 1;
            }
            //Making sure Version1 smaller than version2
            else if (v1 < v2) {

                executeActionConfig(fieldName, AN_AppUpdateAvailable, "");

                return -1;
            }
        }
        return 0;

    }

    public void javascriptCallFinished(final String val) {
        Log.v("mylog", "MyActivity.javascriptCallFinished is called : " + val);

        if (val.contains("{")) {

            JSONObject issueObj = null;
            try {
                issueObj = new JSONObject(val);
                Iterator iterator = issueObj.keys();
                while (iterator.hasNext()) {
                    String key = (String) iterator.next();
                    String issue = issueObj.getString(key);

                    ut_sp.setStringValue(SQL_JAVASCRIPTRESULT + "." + key, issueObj.getString(key));
                    executeActionConfig(jsFieldname, AN_JAVASCRIPTFINISHED, "");

                }

            } catch (JSONException e) {
                e.printStackTrace();
            }

        } else {
            ut_sp.setStringValue(SQL_JAVASCRIPTRESULT, val.toString());

            executeActionConfig(jsFieldname, AN_JAVASCRIPTFINISHED, "");
        }

    }

    @Override
    protected void onSaveInstanceState(@NonNull Bundle outState) {
        super.onSaveInstanceState(outState);
    }


    public void selectlistposition(int pos) {
        listPosition = pos;
    }


    @Override
    public void Result(String value) {

    }


    public void getFilefromDevice(String FieldName) {
        attachFieldName = FieldName;
        String[] mimeTypes =
                {"application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", // .doc & .docx
                        "application/vnd.ms-powerpoint", "application/vnd.openxmlformats-officedocument.presentationml.presentation", // .ppt & .pptx
                        "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", // .xls & .xlsx
                        "text/plain",
                        "application/pdf",
                        "application/zip", "application/vnd.android.package-archive"};

        intent = new Intent(Intent.ACTION_GET_CONTENT); // or ACTION_OPEN_DOCUMENT
        intent.setType("*/*");
        intent.putExtra(Intent.EXTRA_MIME_TYPES, mimeTypes);
        intent.addCategory(Intent.CATEGORY_OPENABLE);
        intent.putExtra(Intent.EXTRA_LOCAL_ONLY, true);
        startActivityForResult(intent, PICKFILE_REQUEST_CODE);

    }

    private boolean verifycode(String text) {
        boolean value = false;
        int even = 0;
        int odd = 0;

        for (int i = 0; i < text.length() - 1; i++) {
            if (i % 2 == 1) {
                even = even + parseInt(String.valueOf(text.charAt(i)));
            }

            if (i % 2 == 0) {
                odd = odd + parseInt(String.valueOf(text.charAt(i)));
            }
        }

        int ee = even * 3;
        int oo = ee + odd;
        int aa = oo / 10;
        int bb = aa * 10;
        int cc = oo - bb;
        int dd = 10 - cc;

        String tex = text.substring(text.length() - 1);
        if (cc != 0) {
            if (tex.equals(dd + "")) {
                value = true;
            } else {
                value = false;
            }
        } else {
            value = true;
        }

        return value;
    }

    private void logDeviceInfo() {
        String deviceModel = deviceInfo.getDeviceModel();
        String androidVersion = deviceInfo.getAndroidVersion();
        long totalRam = deviceInfo.getTotalRAM(this);
        long totalStorage = deviceInfo.getTotalInternalStorage();
        long availableStorage = deviceInfo.getAvailableInternalStorage();

        String totalRamStr = deviceInfo.formatSize(totalRam);
        String totalStorageStr = deviceInfo.formatSize(totalStorage);
        String availableStorageStr = deviceInfo.formatSize(availableStorage);
        String storageUsage = deviceInfo.getAppStorageUsage(this);

        long availableRam = deviceInfo.getAvailableRAM(this);
        String availableRamStr = deviceInfo.formatSize(availableRam);

        //Log write
        fileHelper.fileWriter("DeviceInfo-Device Model : " + deviceModel, writer);
        fileHelper.fileWriter("DeviceInfo-Android Version : " + androidVersion, writer);
//        fileHelper.fileWriter("DeviceInfo-App Memory Usage: " + memoryUsage, writer);
        fileHelper.fileWriter("DeviceInfo-Total Ram : " + totalRamStr, writer);
        fileHelper.fileWriter("DeviceInfo-Total Storage : " + totalStorageStr, writer);
        fileHelper.fileWriter("DeviceInfo-Available Storage : " + availableStorageStr, writer);
        fileHelper.fileWriter("DeviceInfo-App Storage : " + storageUsage, writer);
        fileHelper.fileWriter("DeviceInfo-RAM Available : " + availableRamStr, writer);
    }

    private void printESCPOSScript(String btAddress, String script, BE_ActionConfig actionConfig, int width) {
//        btAddress = "57:4C:54:02:CA:F2";
        BluetoothPrintersConnections btConnection = new BluetoothPrintersConnections();
        com.dantsu.escposprinter.connection.bluetooth.BluetoothConnection btPrinter = null;
        for (int i = 0; i < Objects.requireNonNull(btConnection.getList()).length; i++) {
            com.dantsu.escposprinter.connection.bluetooth.BluetoothConnection con = btConnection.getList()[i];
            if (con.getDevice().getAddress().equalsIgnoreCase(btAddress)) {
                btPrinter = con;
            }
        }
        if (btPrinter != null) {
            com.dantsu.escposprinter.connection.bluetooth.BluetoothConnection selectedDevice = btPrinter;
            runOnUiThread(new Runnable() {
                @Override
                public void run() {

                }
            });
            Single<String> longRunningProcess = Single.fromCallable(() -> {
                String rtn = "success";
                String paperWidthStr = "48mm";
                EscPosPrinter printer = new EscPosPrinter(
                        selectedDevice.connect(),
                        203,
                        58f,
                        maxLength,
                        new EscPosCharsetEncoding("TIS620", 255)
                );
                printer.printFormattedText(script);
                Thread.sleep(script.getBytes().length * 100L / 1024);
                printer.disconnectPrinter();
                return rtn;
            });

            Disposable disp = longRunningProcess.subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(result -> {
                        fileHelper.fileWriter("result : " + result, writer);

                        if (result.equals("success")) {
                            if (progressdialog != null) {
                                progressdialog.dismiss();
                            }

                            executeActionConfig("", AN_PrintSuccess, "");
                        } else {
                            if (progressdialog != null) {
                                progressdialog.dismiss();
                            }
                            executeActionConfig("", AN_PrintFailed, "");
                        }
                    }, error -> {
                        if (progressdialog != null) {
                            progressdialog.dismiss();
                        }
                        fileHelper.fileWriter("error : " + error, writer);

                        executeActionConfig("", AN_PrintFailed, "");
                    });
            disposables.add(disp);
        } else {
            Toast.makeText(getApplicationContext(), "Printer Not Found", Toast.LENGTH_SHORT).show();
            Log.d("TAG", "printESCPOS: Printer not found");
            if (progressdialog != null) {
                progressdialog.dismiss();
            }
            executeActionConfig("", AN_PrintFailed, "");
        }
    }

    private void printESCPOS(String btAddress, ArrayList<String> filePath, BE_ActionConfig actionConfig, int width) {
//        btAddress = "57:4C:54:02:CA:F2";
        BluetoothPrintersConnections btConnection = new BluetoothPrintersConnections();
        com.dantsu.escposprinter.connection.bluetooth.BluetoothConnection btPrinter = null;
        for (int i = 0; i < Objects.requireNonNull(btConnection.getList()).length; i++) {
            com.dantsu.escposprinter.connection.bluetooth.BluetoothConnection con = btConnection.getList()[i];
            if (con.getDevice().getAddress().equalsIgnoreCase(btAddress)) {
                btPrinter = con;
            }
        }
        if (btPrinter != null) {
            com.dantsu.escposprinter.connection.bluetooth.BluetoothConnection selectedDevice = btPrinter;
            runOnUiThread(new Runnable() {
                @Override
                public void run() {

                }
            });
            Single<String> longRunningProcess = Single.fromCallable(() -> {
                String rtn = "success";
                String paperWidthStr = "48mm";

                File file = new File(filePath.get(0));
                ParcelFileDescriptor pfd = ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);
                PdfRenderer renderer = new PdfRenderer(pfd);

                int paperWidth = getPaperWidthInPixel(paperWidthStr);

                for (int i = 0; i < renderer.getPageCount(); i++) {
                    PdfRenderer.Page page = renderer.openPage(i);
                    int paperHeight = page.getHeight() * paperWidth / page.getWidth();
                    Bitmap bmp = Bitmap.createBitmap(paperWidth, paperHeight, Bitmap.Config.ARGB_8888);
                    page.render(bmp, null, null, PdfRenderer.Page.RENDER_MODE_FOR_PRINT);

                    EscPosPrinterCommands printerCommands = new EscPosPrinterCommands(selectedDevice);
                    printerCommands.connect();
                    printerCommands.reset();

//                    printerCommands.useEscAsteriskCommand(true);
                    byte[] bytsImage = EscPosPrinterCommands.bitmapToBytes(bmp, false);
                    printerCommands.printImage(bytsImage);
                    printerCommands.feedPaper(25);


                    Thread.sleep(bytsImage.length * 100 / 1024);
                    printerCommands.disconnect();
                    bmp.recycle();
                    page.close();
                }

                renderer.close();
                return rtn;
            });

            Disposable disp = longRunningProcess.subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(result -> {
                        fileHelper.fileWriter("result : " + result, writer);

                        if (result.equals("success")) {
                            if (progressdialog != null) {
                                progressdialog.dismiss();
                            }

                            executeActionConfig("", AN_PrintSuccess, "");
                        } else {
                            if (progressdialog != null) {
                                progressdialog.dismiss();
                            }
                            executeActionConfig("", AN_PrintFailed, "");
                        }
                    }, error -> {
                        if (progressdialog != null) {
                            progressdialog.dismiss();
                        }
                        fileHelper.fileWriter("error : " + error, writer);

                        executeActionConfig("", AN_PrintFailed, "");
                    });
            disposables.add(disp);
        } else {
            Toast.makeText(getApplicationContext(), "Printer Not Found", Toast.LENGTH_SHORT).show();
            Log.d("TAG", "printESCPOS: Printer not found");
            if (progressdialog != null) {
                progressdialog.dismiss();
            }
            executeActionConfig("", AN_PrintFailed, "");
        }
    }

    private void printOneil(String btAddress, ArrayList<String> filePath, BE_ActionConfig actionConfig, int width) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {

                try {
                    if (progressdialog != null) {
                        progressdialog.cancel();
                        progressdialog.dismiss();
                        progressdialog = null;
                    }

                    progressdialog = new Dialog(MainActivity.this);
                    progressdialog.setContentView(R.layout.loading_dialog);
                    progressdialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                    progressdialog.setCancelable(false);
                    progressdialog.setCanceledOnTouchOutside(false);
                    progressdialog.getWindow().getAttributes().windowAnimations = R.style.animation;
                    progressdialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);

                    loadingProgress = progressdialog.findViewById(R.id.loadingProgress);
                    percentage = progressdialog.findViewById(R.id.percentage);

                    progressdialog.show();

                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        });
        if (actionConfig.ActionPlan.equalsIgnoreCase("HONEYWELLZPL")) {
            BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
            BluetoothDevice bluetoothDevice = bluetoothAdapter.getRemoteDevice(btAddress);


            fileHelper.fileWriter("bluetoothDevice : " + bluetoothDevice, writer);
            fileHelper.fileWriter("bluetoothDevice address : " + bluetoothDevice.getAddress(), writer);

            final PosManager posManager = new PosManager(getApplicationContext()) {
                @Override
                public void posStatusCallback(PrinterInterface printerInterface, int status) {
                    Log.i(TAG, "posStatusCallback: " + status);
                }

                @Override
                public void posMsgCallback(PrinterInterface printerInterface, String s) {
                    Log.i(TAG, "posMsgCallback: " + s);
                }
            };


            BluetoothEdrConfigBean configObj = new BluetoothEdrConfigBean(bluetoothDevice);
            posManager.connectDevice(configObj);


            fileHelper.fileWriter("posManager : " + posManager.isPrinterConncect(), writer);


            Single<String> longRunningProcess = Single.fromCallable(() -> {
                String rtn = "success";
                try {
                    int time = 0;

                    do {
                        time++;
                        Thread.sleep(100);
                    } while (!posManager.isPrinterConncect() && time < 30);

                    fileHelper.fileWriter("posManager connect : " + posManager.isPrinterConncect(), writer);

                    if (!posManager.isPrinterConncect()) {
                        fileHelper.fileWriter("posManager connect : " + posManager.isPrinterConncect(), writer);
                        rtn = "Not connect";
                    } else {

                        File file = new File(filePath.get(0));
                        ParcelFileDescriptor fileDesc = ParcelFileDescriptor.open(file, 268435456);
                        PdfRenderer renderer = new PdfRenderer(fileDesc);
                        int numPgs = renderer.getPageCount();
                        fileHelper.fileWriter("getPageCount : " + numPgs, writer);

                        int paperWidth = 576;
//                        float paperWidth = 2 * 192;
//                        float paperHeight = (float) height * paperWidth / width2;
                        for (int i = 0; i < renderer.getPageCount(); i++) {
                            PdfRenderer.Page page = renderer.openPage(i);
                            int paperHeight = page.getHeight() * paperWidth / page.getWidth();
                            Bitmap bmp = Bitmap.createBitmap(
                                    paperWidth,
                                    paperHeight,
                                    Bitmap.Config.ARGB_8888
                            );
                            Canvas canvasWhite = new Canvas(bmp);
                            canvasWhite.drawColor(Color.WHITE);
                            page.render(
                                    bmp,
                                    null,
                                    null,
                                    PdfRenderer.Page.RENDER_MODE_FOR_PRINT
                            );

                            try {
                                CmdFactory zplFac = new ZplFactory();
                                Cmd zplCmd = zplFac.create();
                                zplCmd.append(zplCmd.getHeaderCmd());
                                CommonSetting commonSetting = new CommonSetting();
                                commonSetting.setLableSizeBean(new LableSizeBean(80, bmp.getHeight()));
                                commonSetting.setPrintDirection(PrintDirection.NORMAL);
                                zplCmd.append(zplCmd.getHeaderCmd());
                                zplCmd.append(zplCmd.getCommonSettingCmd(commonSetting));
                                BitmapSetting bitmapSetting = new BitmapSetting();
                                bitmapSetting.setPrintPostion(new Position(0, 0));
                                bitmapSetting.setBimtapLimitWidth(paperWidth * 8);
                                zplCmd.append(zplCmd.getBitmapCmd(bitmapSetting, bmp));
                                zplCmd.append(zplCmd.getPrintCopies(1));
                                zplCmd.append(zplCmd.getEndCmd());
                                zplCmd.append(zplCmd.getCRLFCmd());
                                byte[] appendCmds = zplCmd.getAppendCmds();

//                                int bytesToWrite = 1024;
//                                int bytesWritten = 0;
//                                int totalBytes = appendCmds.length;
//                                int remainingBytes = totalBytes;
//                                while (bytesWritten < totalBytes) {
//                                    Thread.sleep(100);
//                                    if (remainingBytes < bytesToWrite) {
//                                        bytesToWrite =
//                                                remainingBytes;
//                                    }
//                                    posManager.writeAsync(appendCmds);
//                                    bytesWritten += bytesToWrite;
//                                    remainingBytes = remainingBytes - bytesToWrite;
//                                }

                                posManager.writeAsync(appendCmds);
                                Thread.sleep(3000);


                            } catch (Exception e) {
                                e.printStackTrace();
                                fileHelper.fileWriter("Exception new : " + e.getLocalizedMessage(), writer);
                            }


                            bmp.recycle();
                            page.close();

                        }
                        renderer.close();
                    }

                } catch (Exception e) {
                    rtn = e.getMessage();
                    Log.e("Printer Exception", e.getLocalizedMessage());
                    fileHelper.fileWriter("Printer Exception : " + e.getLocalizedMessage(), writer);

                } finally {
                    posManager.cleanPosListener();
                    posManager.disconnectPrinter();
                }
                return rtn;
            });

            Disposable disp = longRunningProcess.subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(result -> {
                        fileHelper.fileWriter("result : " + result, writer);

                        if (result.equals("success")) {
                            if (progressdialog != null) {
                                progressdialog.dismiss();
                            }

                            executeActionConfig("", AN_PrintSuccess, "");
                        } else {
                            if (progressdialog != null) {
                                progressdialog.dismiss();
                            }
                            executeActionConfig("", AN_PrintFailed, "");
                        }
                    }, error -> {
                        if (progressdialog != null) {
                            progressdialog.dismiss();
                        }
                        fileHelper.fileWriter("error : " + error, writer);

                        executeActionConfig("", AN_PrintFailed, "");
                    });
            disposables.add(disp);

        } else {
            Single<String> longRunningProcess = Single.fromCallable(() -> {
                String rtn = "success";
                try {
                    int retry = 0;
                    if (hwBtConnection == null) {
                        do {
                            try {
                                hwBtConnection = Connection_Bluetooth.createClient(btAddress, false);
                            } catch (Exception e) {
                                if (hwBtConnection != null) {
                                    hwBtConnection.close();
                                }
                            }
                            retry++;
                            if (hwBtConnection == null) {
                                fileHelper.fileWriter("HWBtConnection 1 : Fail to open bluetooth", writer);
                                Log.d("HWBtConnection", "Fail to open bluetooth");
                                Thread.sleep(100);
                            }
                        } while (retry < 25 && hwBtConnection == null);
                    }
                    if (hwBtConnection == null) {
                        rtn = "failed";
                        fileHelper.fileWriter("onClick: Failed to Connect", writer);

                        Log.d(TAG, "onClick : Failed to Connect");
                    } else {
                        int printHeadWidth = 832;
                        do {
                            try {
                                if (!hwBtConnection.getIsOpen()) {
                                    hwBtConnection.open();
                                }
                            } catch (Exception e) {
                                hwBtConnection.close();
                            }
                            retry++;
                            if (!hwBtConnection.getIsOpen()) {
                                fileHelper.fileWriter("HWBtConnection 2 : Fail to connect bluetooth", writer);

                                Log.d("HWBtConnection", "Fail to connect bluetooth");
                                Thread.sleep(100);
                            }
                        } while (retry < 25 && !hwBtConnection.getIsOpen());


                        DocumentDPL documentDPL = new DocumentDPL();
                        File file = new File(filePath.get(0));
                        ParcelFileDescriptor fileDesc = ParcelFileDescriptor.open(file, 268435456);
                        PdfRenderer renderer = new PdfRenderer(fileDesc);
                        int numPgs = renderer.getPageCount();

                        for (int i = 0; i < numPgs; ++i) {
                            PdfRenderer.Page page = renderer.openPage(i);
                            int width2 = page.getWidth();
                            int height = page.getHeight();
                            float scaledHeight = (float) height * 832 / width2;
                            Bitmap pdfImage = Bitmap.createBitmap(printHeadWidth, (int) scaledHeight, Bitmap.Config.ARGB_8888);
                            page.render(pdfImage, (Rect) null, (Matrix) null, PdfRenderer.Page.RENDER_MODE_FOR_PRINT);
                            Matrix matrix = new Matrix();
                            matrix.postRotate(180);
                            Bitmap rotatedBitmap = Bitmap.createBitmap(pdfImage, 0, 0, pdfImage.getWidth(), pdfImage.getHeight(), matrix, true);
                            documentDPL.writeImage(rotatedBitmap, 0, 0, new ParametersDPL());
                            page.close();
                        }


                        byte[] printData = documentDPL.getDocumentData();

                        int bytesWritten = 0;
                        int bytesToWrite = 1024;
                        int totalBytes = printData.length;
                        int remainingBytes = totalBytes;
                        while (bytesWritten < totalBytes) {
                            hwBtConnection.waitForEmptyBuffer(500);
                            if (remainingBytes < bytesToWrite) {
                                bytesToWrite = remainingBytes;
                            }

                            // Send data, 1024 bytes at a time until all data sent
                            hwBtConnection.write(printData, bytesWritten, bytesToWrite);
                            bytesWritten += bytesToWrite;
                            remainingBytes = remainingBytes - bytesToWrite;
                            Log.d("HWBtConnection", "Sending Data");
                            fileHelper.fileWriter("HWBtConnection  : Sending Data", writer);

                        }

                        hwBtConnection.write("");
                    }
                } catch (Exception e) {
                    rtn = e.getMessage();
                    Log.e("Printer Exception", e.getLocalizedMessage());
                    fileHelper.fileWriter("Printer Exception : " + e.getLocalizedMessage(), writer);

                } finally {
                    hwBtConnection.close();
                    hwBtConnection = null;
                }
                return rtn;
            });

            Disposable disp = longRunningProcess.subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(result -> {

                        if (result.equals("success")) {
                            if (progressdialog != null) {
                                progressdialog.dismiss();
                            }
                            executeActionConfig("", AN_PrintSuccess, "");
                        } else {
                            if (progressdialog != null) {
                                progressdialog.dismiss();
                            }
                            executeActionConfig("", AN_PrintFailed, "");
                        }
                    }, error -> {
                        if (progressdialog != null) {
                            progressdialog.dismiss();
                        }
                        executeActionConfig("", AN_PrintFailed, "");
                    });
            disposables.add(disp);
        }
    }

    private void printSunmi(ArrayList<String> filePath, BE_ActionConfig actionConfig, Context context, int width) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                try {
                    if (progressdialog != null) {
                        progressdialog.cancel();
                        progressdialog.dismiss();
                        progressdialog = null;
                    }

                    progressdialog = new Dialog(MainActivity.this);
                    progressdialog.setContentView(R.layout.loading_dialog);
                    progressdialog.getWindow().setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                    progressdialog.setCancelable(false);
                    progressdialog.setCanceledOnTouchOutside(false);
                    progressdialog.getWindow().getAttributes().windowAnimations = R.style.animation;
                    progressdialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);

                    loadingProgress = progressdialog.findViewById(R.id.loadingProgress);
                    percentage = progressdialog.findViewById(R.id.percentage);

                    progressdialog.show();

                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        });
        SunmiPrintHelper.getInstance().deInitSunmiPrinterService(context);
        SunmiPrintHelper.getInstance().initSunmiPrinterService(context);
        Single<String> longRunningProcess = Single.fromCallable(() -> {
            File file = new File(filePath.get(0));
            ParcelFileDescriptor fileDesc = ParcelFileDescriptor.open(file, 268435456);
            PdfRenderer renderer = new PdfRenderer(fileDesc);
            int numPgs = renderer.getPageCount();

            for (int i = 0; i < numPgs; ++i) {
                PdfRenderer.Page page = renderer.openPage(i);
                int width2 = page.getWidth();
                int height = page.getHeight();
                float paperWidth = 2 * 192;
                float paperHeight = (float) height * paperWidth / width2;
//                Bitmap pdfImage = Bitmap.createBitmap((int) page.getWidth(), (int) page.getHeight(), Bitmap.Config.ARGB_8888);
                Bitmap pdfImage = Bitmap.createBitmap((int) paperWidth, (int) paperHeight, Bitmap.Config.ARGB_8888);
                page.render(pdfImage, (Rect) null, (Matrix) null, PdfRenderer.Page.RENDER_MODE_FOR_PRINT);
                SunmiPrintHelper.getInstance().printPDFBitmap(pdfImage);
                SunmiPrintHelper.getInstance().finishBitmap();
                pdfImage.recycle();
                page.close();
            }
            renderer.close();
            return "success";
        });
        Disposable disp = longRunningProcess.subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(result -> {
                    if (result.equals("success")) {
                        if (progressdialog != null) {
                            progressdialog.dismiss();
                        }
                        executeActionConfig("", AN_PrintSuccess, "");
                    } else {
                        if (progressdialog != null) {
                            progressdialog.dismiss();
                        }
                        executeActionConfig("", AN_PrintFailed, "");
                    }
                }, error -> {
                    if (progressdialog != null) {
                        progressdialog.dismiss();
                    }
                    executeActionConfig("", AN_PrintFailed, "");
                });
        disposables.add(disp);
    }

    public void calllistEnd() {
        selectedListIndex = -1;
        executeActionConfig("", AN_ListConfigEnd, "");


    }


    public void BluetoothScanner(String mtargetDeviceAddress) {

        targetDeviceAddress = mtargetDeviceAddress;
        final String TAG = "BluetoothScanner";


        if (Build.VERSION.SDK_INT >= 31) {
            String[] permission = new String[2];
            permission[0] = Manifest.permission.BLUETOOTH_SCAN;
            permission[1] = Manifest.permission.BLUETOOTH_CONNECT;
            int blueToothPermission = ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN);

            if (blueToothPermission != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(
                        this, permission, REQUEST_BLUETOOTH);
            } else {

                BluetoothAdapter BA = BluetoothAdapter.getDefaultAdapter();
                BA.startDiscovery();
                IntentFilter filter = new IntentFilter();
                filter.addAction(BluetoothDevice.ACTION_FOUND);

                filter.setPriority(100);
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                    registerReceiver(broadcastReceiver, filter, Context.RECEIVER_NOT_EXPORTED);
                } else {
                    registerReceiver(broadcastReceiver, filter);
                }
            }
        } else {

            BluetoothAdapter BA = BluetoothAdapter.getDefaultAdapter();
            BA.startDiscovery();
            IntentFilter filter = new IntentFilter();
            filter.addAction(BluetoothDevice.ACTION_FOUND);

            filter.setPriority(100);


            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                registerReceiver(broadcastReceiver, filter, Context.RECEIVER_NOT_EXPORTED);
            } else {
                registerReceiver(broadcastReceiver, filter);
            }
        }


    }

    private int getPaperWidthInPixel(String paperWidthStr) {
        if (paperWidthStr.toLowerCase().endsWith("inch")) {
            int width = parseInt(paperWidthStr.replaceAll("inch", ""));
            return width * 203;
        } else if (paperWidthStr.toLowerCase().endsWith("mm")) {
            int width = parseInt(paperWidthStr.replaceAll("mm", ""));
            return (int) ((width / 25.4) * 203);
        }
        return 0;
    }

    private float getPaperWidthInMm(String paperWidthStr) {
        if (paperWidthStr.toLowerCase().endsWith("inch")) {
            int width = parseInt(paperWidthStr.replaceAll("inch", ""));
            return (float) (width * 25.4);
        } else if (paperWidthStr.toLowerCase().endsWith("mm")) {
            int width = parseInt(paperWidthStr.replaceAll("mm", ""));
            return (float) width;
        }
        return 0.0f;
    }


    public List<Bitmap> chunkImage(Bitmap bitmap, int paperHeight, int pagingHeight) {
        int width = bitmap.getWidth();
        int height = bitmap.getHeight();

        int chunkHeight = pagingHeight > 0 ? pagingHeight : (pagingHeight == -1 ? height : paperHeight * 3);
        List<Bitmap> chunks = new ArrayList<Bitmap>();

        int startY = 0;

        while (startY < height) {
            int endY = startY + chunkHeight;

            int chunkHeightActual = endY > height ? height - startY : chunkHeight;

            Bitmap chunk = Bitmap.createBitmap(width, chunkHeightActual, Bitmap.Config.ARGB_8888);
            Canvas canvas = new Canvas(chunk);
            canvas.drawColor(Color.WHITE);
            Rect srcRect = new Rect(0, startY, width, startY + chunkHeightActual);
            Rect dstRect = new Rect(0, 0, width, chunkHeightActual);
            canvas.drawBitmap(bitmap, srcRect, dstRect, null);

            chunks.add(chunk);

            startY += chunkHeight;
        }

        return chunks;
    }

    private boolean isLocationPermissionGranted() {
        return ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
                == PackageManager.PERMISSION_GRANTED;
    }

    private boolean isLocationPermissionGranted2() {
        return ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.ACCESS_FINE_LOCATION);

    }


    private class SaveSignature extends AsyncTask<String, Void, String> {
        Bitmap bitmapSignature;
        FileHelper fileHelper;
        HashMap<String, String> Formvalues;
        String fieldName;

        public SaveSignature(Bitmap mbitmapSignature, FileHelper mfileHelper, HashMap<String, String> formvalues, String mfieldName) {
            this.bitmapSignature = mbitmapSignature;
            this.fileHelper = mfileHelper;
            this.Formvalues = formvalues;
            this.fieldName = mfieldName;
        }

        @Override
        protected String doInBackground(String... strings) {

            if (Formvalues.get(fieldName.toUpperCase()) != null) {
                fileHelper.SaveSignature(Formvalues.get(fieldName.toUpperCase()), bitmapSignature);
            } else {
                fileHelper.SaveSignature(fieldName.toUpperCase() + ".png", bitmapSignature);
            }
            signDone = true;
            executeActionConfig(fieldName.toUpperCase(), AN_SIGNEND, "");
            return null;
        }
    }

}

